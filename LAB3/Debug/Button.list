
Button.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031ac  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080032b8  080032b8  000132b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080032dc  080032dc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080032dc  080032dc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080032dc  080032dc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080032dc  080032dc  000132dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080032e0  080032e0  000132e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080032e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  2000000c  080032f0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  080032f0  00020110  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009c0a  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ce8  00000000  00000000  00029c3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ae0  00000000  00000000  0002b928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009c0  00000000  00000000  0002c408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016333  00000000  00000000  0002cdc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bd82  00000000  00000000  000430fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082949  00000000  00000000  0004ee7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d17c6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a48  00000000  00000000  000d181c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080032a0 	.word	0x080032a0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080032a0 	.word	0x080032a0

0800014c <fsm_clock>:

#include "fsm_automatic.h"
#include "input_processing.h"
#include "main.h"
int ClockCounter = 0;
void fsm_clock(void){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	if(timer_flag[2] == 1){
 8000150:	4b33      	ldr	r3, [pc, #204]	; (8000220 <fsm_clock+0xd4>)
 8000152:	689b      	ldr	r3, [r3, #8]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d118      	bne.n	800018a <fsm_clock+0x3e>
		number_clock1--;
 8000158:	4b32      	ldr	r3, [pc, #200]	; (8000224 <fsm_clock+0xd8>)
 800015a:	681b      	ldr	r3, [r3, #0]
 800015c:	3b01      	subs	r3, #1
 800015e:	4a31      	ldr	r2, [pc, #196]	; (8000224 <fsm_clock+0xd8>)
 8000160:	6013      	str	r3, [r2, #0]
		if(number_clock1 <= 0){
 8000162:	4b30      	ldr	r3, [pc, #192]	; (8000224 <fsm_clock+0xd8>)
 8000164:	681b      	ldr	r3, [r3, #0]
 8000166:	2b00      	cmp	r3, #0
 8000168:	dc0a      	bgt.n	8000180 <fsm_clock+0x34>
			number_clock1 = timer_counter[0]/100 + 1;
 800016a:	4b2f      	ldr	r3, [pc, #188]	; (8000228 <fsm_clock+0xdc>)
 800016c:	681b      	ldr	r3, [r3, #0]
 800016e:	4a2f      	ldr	r2, [pc, #188]	; (800022c <fsm_clock+0xe0>)
 8000170:	fb82 1203 	smull	r1, r2, r2, r3
 8000174:	1152      	asrs	r2, r2, #5
 8000176:	17db      	asrs	r3, r3, #31
 8000178:	1ad3      	subs	r3, r2, r3
 800017a:	3301      	adds	r3, #1
 800017c:	4a29      	ldr	r2, [pc, #164]	; (8000224 <fsm_clock+0xd8>)
 800017e:	6013      	str	r3, [r2, #0]
		}
		setTimer(2, 1000);
 8000180:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000184:	2002      	movs	r0, #2
 8000186:	f001 fced 	bl	8001b64 <setTimer>
	}
	if(timer_flag[3] == 1){
 800018a:	4b25      	ldr	r3, [pc, #148]	; (8000220 <fsm_clock+0xd4>)
 800018c:	68db      	ldr	r3, [r3, #12]
 800018e:	2b01      	cmp	r3, #1
 8000190:	d118      	bne.n	80001c4 <fsm_clock+0x78>
		number_clock2--;
 8000192:	4b27      	ldr	r3, [pc, #156]	; (8000230 <fsm_clock+0xe4>)
 8000194:	681b      	ldr	r3, [r3, #0]
 8000196:	3b01      	subs	r3, #1
 8000198:	4a25      	ldr	r2, [pc, #148]	; (8000230 <fsm_clock+0xe4>)
 800019a:	6013      	str	r3, [r2, #0]
		if(number_clock2 <= 0){
 800019c:	4b24      	ldr	r3, [pc, #144]	; (8000230 <fsm_clock+0xe4>)
 800019e:	681b      	ldr	r3, [r3, #0]
 80001a0:	2b00      	cmp	r3, #0
 80001a2:	dc0a      	bgt.n	80001ba <fsm_clock+0x6e>
			number_clock2 = timer_counter[1]/100 + 1;
 80001a4:	4b20      	ldr	r3, [pc, #128]	; (8000228 <fsm_clock+0xdc>)
 80001a6:	685b      	ldr	r3, [r3, #4]
 80001a8:	4a20      	ldr	r2, [pc, #128]	; (800022c <fsm_clock+0xe0>)
 80001aa:	fb82 1203 	smull	r1, r2, r2, r3
 80001ae:	1152      	asrs	r2, r2, #5
 80001b0:	17db      	asrs	r3, r3, #31
 80001b2:	1ad3      	subs	r3, r2, r3
 80001b4:	3301      	adds	r3, #1
 80001b6:	4a1e      	ldr	r2, [pc, #120]	; (8000230 <fsm_clock+0xe4>)
 80001b8:	6013      	str	r3, [r2, #0]
		}
		setTimer(3, 1000);
 80001ba:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80001be:	2003      	movs	r0, #3
 80001c0:	f001 fcd0 	bl	8001b64 <setTimer>
	}
	if(timer_flag[5] == 1){
 80001c4:	4b16      	ldr	r3, [pc, #88]	; (8000220 <fsm_clock+0xd4>)
 80001c6:	695b      	ldr	r3, [r3, #20]
 80001c8:	2b01      	cmp	r3, #1
 80001ca:	d114      	bne.n	80001f6 <fsm_clock+0xaa>
		DisplayClock(ClockCounter);
 80001cc:	4b19      	ldr	r3, [pc, #100]	; (8000234 <fsm_clock+0xe8>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	4618      	mov	r0, r3
 80001d2:	f001 f973 	bl	80014bc <DisplayClock>
		ClockCounter++;
 80001d6:	4b17      	ldr	r3, [pc, #92]	; (8000234 <fsm_clock+0xe8>)
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	3301      	adds	r3, #1
 80001dc:	4a15      	ldr	r2, [pc, #84]	; (8000234 <fsm_clock+0xe8>)
 80001de:	6013      	str	r3, [r2, #0]
		if(ClockCounter > 1){
 80001e0:	4b14      	ldr	r3, [pc, #80]	; (8000234 <fsm_clock+0xe8>)
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	2b01      	cmp	r3, #1
 80001e6:	dd02      	ble.n	80001ee <fsm_clock+0xa2>
			ClockCounter = 0;
 80001e8:	4b12      	ldr	r3, [pc, #72]	; (8000234 <fsm_clock+0xe8>)
 80001ea:	2200      	movs	r2, #0
 80001ec:	601a      	str	r2, [r3, #0]
		}
		setTimer(5, 100);
 80001ee:	2164      	movs	r1, #100	; 0x64
 80001f0:	2005      	movs	r0, #5
 80001f2:	f001 fcb7 	bl	8001b64 <setTimer>
	}
	if(ClockCounter == 0){
 80001f6:	4b0f      	ldr	r3, [pc, #60]	; (8000234 <fsm_clock+0xe8>)
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d105      	bne.n	800020a <fsm_clock+0xbe>
		Display7Seg2(number_clock1);
 80001fe:	4b09      	ldr	r3, [pc, #36]	; (8000224 <fsm_clock+0xd8>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	4618      	mov	r0, r3
 8000204:	f000 fdbe 	bl	8000d84 <Display7Seg2>
	}
	else if(ClockCounter == 1){
		Display7Seg2(number_clock2);
	}
}
 8000208:	e008      	b.n	800021c <fsm_clock+0xd0>
	else if(ClockCounter == 1){
 800020a:	4b0a      	ldr	r3, [pc, #40]	; (8000234 <fsm_clock+0xe8>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	2b01      	cmp	r3, #1
 8000210:	d104      	bne.n	800021c <fsm_clock+0xd0>
		Display7Seg2(number_clock2);
 8000212:	4b07      	ldr	r3, [pc, #28]	; (8000230 <fsm_clock+0xe4>)
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	4618      	mov	r0, r3
 8000218:	f000 fdb4 	bl	8000d84 <Display7Seg2>
}
 800021c:	bf00      	nop
 800021e:	bd80      	pop	{r7, pc}
 8000220:	200000e4 	.word	0x200000e4
 8000224:	20000038 	.word	0x20000038
 8000228:	200000bc 	.word	0x200000bc
 800022c:	51eb851f 	.word	0x51eb851f
 8000230:	2000003c 	.word	0x2000003c
 8000234:	20000028 	.word	0x20000028

08000238 <fsm_automatic_runx>:

void fsm_automatic_runx(){
 8000238:	b580      	push	{r7, lr}
 800023a:	af00      	add	r7, sp, #0
	switch(statusx){
 800023c:	4b7f      	ldr	r3, [pc, #508]	; (800043c <fsm_automatic_runx+0x204>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	3b01      	subs	r3, #1
 8000242:	2b0e      	cmp	r3, #14
 8000244:	f200 80ea 	bhi.w	800041c <fsm_automatic_runx+0x1e4>
 8000248:	a201      	add	r2, pc, #4	; (adr r2, 8000250 <fsm_automatic_runx+0x18>)
 800024a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800024e:	bf00      	nop
 8000250:	0800028d 	.word	0x0800028d
 8000254:	080002bb 	.word	0x080002bb
 8000258:	0800032f 	.word	0x0800032f
 800025c:	08000359 	.word	0x08000359
 8000260:	0800041d 	.word	0x0800041d
 8000264:	0800041d 	.word	0x0800041d
 8000268:	0800041d 	.word	0x0800041d
 800026c:	0800041d 	.word	0x0800041d
 8000270:	0800041d 	.word	0x0800041d
 8000274:	0800041d 	.word	0x0800041d
 8000278:	0800041d 	.word	0x0800041d
 800027c:	0800041d 	.word	0x0800041d
 8000280:	08000383 	.word	0x08000383
 8000284:	080003b1 	.word	0x080003b1
 8000288:	080003e7 	.word	0x080003e7
	case INITX:
		statusx = AUTO_REDX;
 800028c:	4b6b      	ldr	r3, [pc, #428]	; (800043c <fsm_automatic_runx+0x204>)
 800028e:	2202      	movs	r2, #2
 8000290:	601a      	str	r2, [r3, #0]
		setTimer(0,5000);
 8000292:	f241 3188 	movw	r1, #5000	; 0x1388
 8000296:	2000      	movs	r0, #0
 8000298:	f001 fc64 	bl	8001b64 <setTimer>
		setTimer(2,10);
 800029c:	210a      	movs	r1, #10
 800029e:	2002      	movs	r0, #2
 80002a0:	f001 fc60 	bl	8001b64 <setTimer>
		number_clock1 = timer_counter[0]/100;
 80002a4:	4b66      	ldr	r3, [pc, #408]	; (8000440 <fsm_automatic_runx+0x208>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	4a66      	ldr	r2, [pc, #408]	; (8000444 <fsm_automatic_runx+0x20c>)
 80002aa:	fb82 1203 	smull	r1, r2, r2, r3
 80002ae:	1152      	asrs	r2, r2, #5
 80002b0:	17db      	asrs	r3, r3, #31
 80002b2:	1ad3      	subs	r3, r2, r3
 80002b4:	4a64      	ldr	r2, [pc, #400]	; (8000448 <fsm_automatic_runx+0x210>)
 80002b6:	6013      	str	r3, [r2, #0]
		break;
 80002b8:	e0bd      	b.n	8000436 <fsm_automatic_runx+0x1fe>
	case AUTO_REDX:
		if(counterMode != 2){
 80002ba:	4b64      	ldr	r3, [pc, #400]	; (800044c <fsm_automatic_runx+0x214>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	2b02      	cmp	r3, #2
 80002c0:	d001      	beq.n	80002c6 <fsm_automatic_runx+0x8e>
			DisplayREDX();
 80002c2:	f001 f927 	bl	8001514 <DisplayREDX>
		}
		if(timer_flag[0] == 1){
 80002c6:	4b62      	ldr	r3, [pc, #392]	; (8000450 <fsm_automatic_runx+0x218>)
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	2b01      	cmp	r3, #1
 80002cc:	d107      	bne.n	80002de <fsm_automatic_runx+0xa6>
			statusx = AUTO_GREENX;
 80002ce:	4b5b      	ldr	r3, [pc, #364]	; (800043c <fsm_automatic_runx+0x204>)
 80002d0:	2203      	movs	r2, #3
 80002d2:	601a      	str	r2, [r3, #0]
			setTimer(0,3000);
 80002d4:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80002d8:	2000      	movs	r0, #0
 80002da:	f001 fc43 	bl	8001b64 <setTimer>
		}
		if(ProcessButton3() == 1 && statusMode == MAN_RED){
 80002de:	f000 fadd 	bl	800089c <ProcessButton3>
 80002e2:	4603      	mov	r3, r0
 80002e4:	2b01      	cmp	r3, #1
 80002e6:	f040 809b 	bne.w	8000420 <fsm_automatic_runx+0x1e8>
 80002ea:	4b5a      	ldr	r3, [pc, #360]	; (8000454 <fsm_automatic_runx+0x21c>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	2b09      	cmp	r3, #9
 80002f0:	f040 8096 	bne.w	8000420 <fsm_automatic_runx+0x1e8>
			HAL_GPIO_TogglePin(TEST_GPIO_Port, TEST_Pin);
 80002f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002f8:	4857      	ldr	r0, [pc, #348]	; (8000458 <fsm_automatic_runx+0x220>)
 80002fa:	f001 ffd4 	bl	80022a6 <HAL_GPIO_TogglePin>
			statusx = MAN_RED_SET;
 80002fe:	4b4f      	ldr	r3, [pc, #316]	; (800043c <fsm_automatic_runx+0x204>)
 8000300:	220d      	movs	r2, #13
 8000302:	601a      	str	r2, [r3, #0]
			setTimer(0, counterTimeSet*1000);
 8000304:	4b55      	ldr	r3, [pc, #340]	; (800045c <fsm_automatic_runx+0x224>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800030c:	fb02 f303 	mul.w	r3, r2, r3
 8000310:	4619      	mov	r1, r3
 8000312:	2000      	movs	r0, #0
 8000314:	f001 fc26 	bl	8001b64 <setTimer>
			number_clock1 = timer_counter[0]/100;
 8000318:	4b49      	ldr	r3, [pc, #292]	; (8000440 <fsm_automatic_runx+0x208>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	4a49      	ldr	r2, [pc, #292]	; (8000444 <fsm_automatic_runx+0x20c>)
 800031e:	fb82 1203 	smull	r1, r2, r2, r3
 8000322:	1152      	asrs	r2, r2, #5
 8000324:	17db      	asrs	r3, r3, #31
 8000326:	1ad3      	subs	r3, r2, r3
 8000328:	4a47      	ldr	r2, [pc, #284]	; (8000448 <fsm_automatic_runx+0x210>)
 800032a:	6013      	str	r3, [r2, #0]
		}
		break;
 800032c:	e078      	b.n	8000420 <fsm_automatic_runx+0x1e8>
	case AUTO_GREENX:
		if(counterMode != 3){
 800032e:	4b47      	ldr	r3, [pc, #284]	; (800044c <fsm_automatic_runx+0x214>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	2b03      	cmp	r3, #3
 8000334:	d001      	beq.n	800033a <fsm_automatic_runx+0x102>
			DisplayGREENX();
 8000336:	f001 f919 	bl	800156c <DisplayGREENX>
		}
		if(timer_flag[0] == 1){
 800033a:	4b45      	ldr	r3, [pc, #276]	; (8000450 <fsm_automatic_runx+0x218>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	2b01      	cmp	r3, #1
 8000340:	d170      	bne.n	8000424 <fsm_automatic_runx+0x1ec>
			InitLED();
 8000342:	f001 f997 	bl	8001674 <InitLED>
			statusx = AUTO_YELLOWX;
 8000346:	4b3d      	ldr	r3, [pc, #244]	; (800043c <fsm_automatic_runx+0x204>)
 8000348:	2204      	movs	r2, #4
 800034a:	601a      	str	r2, [r3, #0]
			setTimer(0,2000);
 800034c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000350:	2000      	movs	r0, #0
 8000352:	f001 fc07 	bl	8001b64 <setTimer>
		}
		break;
 8000356:	e065      	b.n	8000424 <fsm_automatic_runx+0x1ec>
	case AUTO_YELLOWX:
		if(counterMode != 4){
 8000358:	4b3c      	ldr	r3, [pc, #240]	; (800044c <fsm_automatic_runx+0x214>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	2b04      	cmp	r3, #4
 800035e:	d001      	beq.n	8000364 <fsm_automatic_runx+0x12c>
			DisplayYELLOWX();
 8000360:	f001 f8ee 	bl	8001540 <DisplayYELLOWX>
		}
		if(timer_flag[0] == 1){
 8000364:	4b3a      	ldr	r3, [pc, #232]	; (8000450 <fsm_automatic_runx+0x218>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	2b01      	cmp	r3, #1
 800036a:	d15d      	bne.n	8000428 <fsm_automatic_runx+0x1f0>
			InitLED();
 800036c:	f001 f982 	bl	8001674 <InitLED>
			statusx = AUTO_REDX;
 8000370:	4b32      	ldr	r3, [pc, #200]	; (800043c <fsm_automatic_runx+0x204>)
 8000372:	2202      	movs	r2, #2
 8000374:	601a      	str	r2, [r3, #0]
			setTimer(0,5000);
 8000376:	f241 3188 	movw	r1, #5000	; 0x1388
 800037a:	2000      	movs	r0, #0
 800037c:	f001 fbf2 	bl	8001b64 <setTimer>
		}
		break;
 8000380:	e052      	b.n	8000428 <fsm_automatic_runx+0x1f0>
		case MAN_RED_SET:
			if(timer_flag[0] == 1){
 8000382:	4b33      	ldr	r3, [pc, #204]	; (8000450 <fsm_automatic_runx+0x218>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	2b01      	cmp	r3, #1
 8000388:	d150      	bne.n	800042c <fsm_automatic_runx+0x1f4>
				statusx = AUTO_GREENX;
 800038a:	4b2c      	ldr	r3, [pc, #176]	; (800043c <fsm_automatic_runx+0x204>)
 800038c:	2203      	movs	r2, #3
 800038e:	601a      	str	r2, [r3, #0]
				setTimer(0,3000);
 8000390:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8000394:	2000      	movs	r0, #0
 8000396:	f001 fbe5 	bl	8001b64 <setTimer>
				number_clock1 = timer_counter[0]/100;
 800039a:	4b29      	ldr	r3, [pc, #164]	; (8000440 <fsm_automatic_runx+0x208>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	4a29      	ldr	r2, [pc, #164]	; (8000444 <fsm_automatic_runx+0x20c>)
 80003a0:	fb82 1203 	smull	r1, r2, r2, r3
 80003a4:	1152      	asrs	r2, r2, #5
 80003a6:	17db      	asrs	r3, r3, #31
 80003a8:	1ad3      	subs	r3, r2, r3
 80003aa:	4a27      	ldr	r2, [pc, #156]	; (8000448 <fsm_automatic_runx+0x210>)
 80003ac:	6013      	str	r3, [r2, #0]
			}
			break;
 80003ae:	e03d      	b.n	800042c <fsm_automatic_runx+0x1f4>
		case MAN_GREEN_SET:
			if(timer_flag[0] == 1){
 80003b0:	4b27      	ldr	r3, [pc, #156]	; (8000450 <fsm_automatic_runx+0x218>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	2b01      	cmp	r3, #1
 80003b6:	d13b      	bne.n	8000430 <fsm_automatic_runx+0x1f8>
				statusx = AUTO_YELLOWX;
 80003b8:	4b20      	ldr	r3, [pc, #128]	; (800043c <fsm_automatic_runx+0x204>)
 80003ba:	2204      	movs	r2, #4
 80003bc:	601a      	str	r2, [r3, #0]
				setTimer(0,2000);
 80003be:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80003c2:	2000      	movs	r0, #0
 80003c4:	f001 fbce 	bl	8001b64 <setTimer>
				setTimer(2, 10);
 80003c8:	210a      	movs	r1, #10
 80003ca:	2002      	movs	r0, #2
 80003cc:	f001 fbca 	bl	8001b64 <setTimer>
				number_clock1 = timer_counter[0]/100;
 80003d0:	4b1b      	ldr	r3, [pc, #108]	; (8000440 <fsm_automatic_runx+0x208>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	4a1b      	ldr	r2, [pc, #108]	; (8000444 <fsm_automatic_runx+0x20c>)
 80003d6:	fb82 1203 	smull	r1, r2, r2, r3
 80003da:	1152      	asrs	r2, r2, #5
 80003dc:	17db      	asrs	r3, r3, #31
 80003de:	1ad3      	subs	r3, r2, r3
 80003e0:	4a19      	ldr	r2, [pc, #100]	; (8000448 <fsm_automatic_runx+0x210>)
 80003e2:	6013      	str	r3, [r2, #0]
			}
			break;
 80003e4:	e024      	b.n	8000430 <fsm_automatic_runx+0x1f8>
		case MAN_YELLOW_SET:
			if(timer_flag[0] == 1){
 80003e6:	4b1a      	ldr	r3, [pc, #104]	; (8000450 <fsm_automatic_runx+0x218>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	2b01      	cmp	r3, #1
 80003ec:	d122      	bne.n	8000434 <fsm_automatic_runx+0x1fc>
				statusx = AUTO_REDX;
 80003ee:	4b13      	ldr	r3, [pc, #76]	; (800043c <fsm_automatic_runx+0x204>)
 80003f0:	2202      	movs	r2, #2
 80003f2:	601a      	str	r2, [r3, #0]
				setTimer(0,5000);
 80003f4:	f241 3188 	movw	r1, #5000	; 0x1388
 80003f8:	2000      	movs	r0, #0
 80003fa:	f001 fbb3 	bl	8001b64 <setTimer>
				setTimer(2, 10);
 80003fe:	210a      	movs	r1, #10
 8000400:	2002      	movs	r0, #2
 8000402:	f001 fbaf 	bl	8001b64 <setTimer>
				number_clock1 = timer_counter[0]/100;
 8000406:	4b0e      	ldr	r3, [pc, #56]	; (8000440 <fsm_automatic_runx+0x208>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	4a0e      	ldr	r2, [pc, #56]	; (8000444 <fsm_automatic_runx+0x20c>)
 800040c:	fb82 1203 	smull	r1, r2, r2, r3
 8000410:	1152      	asrs	r2, r2, #5
 8000412:	17db      	asrs	r3, r3, #31
 8000414:	1ad3      	subs	r3, r2, r3
 8000416:	4a0c      	ldr	r2, [pc, #48]	; (8000448 <fsm_automatic_runx+0x210>)
 8000418:	6013      	str	r3, [r2, #0]
			}
			break;
 800041a:	e00b      	b.n	8000434 <fsm_automatic_runx+0x1fc>
	default:
		break;
 800041c:	bf00      	nop
 800041e:	e00a      	b.n	8000436 <fsm_automatic_runx+0x1fe>
		break;
 8000420:	bf00      	nop
 8000422:	e008      	b.n	8000436 <fsm_automatic_runx+0x1fe>
		break;
 8000424:	bf00      	nop
 8000426:	e006      	b.n	8000436 <fsm_automatic_runx+0x1fe>
		break;
 8000428:	bf00      	nop
 800042a:	e004      	b.n	8000436 <fsm_automatic_runx+0x1fe>
			break;
 800042c:	bf00      	nop
 800042e:	e002      	b.n	8000436 <fsm_automatic_runx+0x1fe>
			break;
 8000430:	bf00      	nop
 8000432:	e000      	b.n	8000436 <fsm_automatic_runx+0x1fe>
			break;
 8000434:	bf00      	nop
	}
}
 8000436:	bf00      	nop
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	2000002c 	.word	0x2000002c
 8000440:	200000bc 	.word	0x200000bc
 8000444:	51eb851f 	.word	0x51eb851f
 8000448:	20000038 	.word	0x20000038
 800044c:	20000044 	.word	0x20000044
 8000450:	200000e4 	.word	0x200000e4
 8000454:	20000034 	.word	0x20000034
 8000458:	40010c00 	.word	0x40010c00
 800045c:	20000048 	.word	0x20000048

08000460 <fsm_automatic_runy>:
void fsm_automatic_runy(){
 8000460:	b580      	push	{r7, lr}
 8000462:	af00      	add	r7, sp, #0
	switch(statusy){
 8000464:	4b2f      	ldr	r3, [pc, #188]	; (8000524 <fsm_automatic_runy+0xc4>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	3b05      	subs	r3, #5
 800046a:	2b03      	cmp	r3, #3
 800046c:	d850      	bhi.n	8000510 <fsm_automatic_runy+0xb0>
 800046e:	a201      	add	r2, pc, #4	; (adr r2, 8000474 <fsm_automatic_runy+0x14>)
 8000470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000474:	08000485 	.word	0x08000485
 8000478:	080004b7 	.word	0x080004b7
 800047c:	080004d5 	.word	0x080004d5
 8000480:	080004f3 	.word	0x080004f3
	case INITY:
		DisplayGREENY();
 8000484:	f001 f8b4 	bl	80015f0 <DisplayGREENY>
		statusy = AUTO_GREENY;
 8000488:	4b26      	ldr	r3, [pc, #152]	; (8000524 <fsm_automatic_runy+0xc4>)
 800048a:	2207      	movs	r2, #7
 800048c:	601a      	str	r2, [r3, #0]
		setTimer(1,3000);
 800048e:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8000492:	2001      	movs	r0, #1
 8000494:	f001 fb66 	bl	8001b64 <setTimer>
		setTimer(3,10);
 8000498:	210a      	movs	r1, #10
 800049a:	2003      	movs	r0, #3
 800049c:	f001 fb62 	bl	8001b64 <setTimer>
		number_clock2 = timer_counter[1]/100;
 80004a0:	4b21      	ldr	r3, [pc, #132]	; (8000528 <fsm_automatic_runy+0xc8>)
 80004a2:	685b      	ldr	r3, [r3, #4]
 80004a4:	4a21      	ldr	r2, [pc, #132]	; (800052c <fsm_automatic_runy+0xcc>)
 80004a6:	fb82 1203 	smull	r1, r2, r2, r3
 80004aa:	1152      	asrs	r2, r2, #5
 80004ac:	17db      	asrs	r3, r3, #31
 80004ae:	1ad3      	subs	r3, r2, r3
 80004b0:	4a1f      	ldr	r2, [pc, #124]	; (8000530 <fsm_automatic_runy+0xd0>)
 80004b2:	6013      	str	r3, [r2, #0]
		break;
 80004b4:	e033      	b.n	800051e <fsm_automatic_runy+0xbe>
	case AUTO_REDY:
		DisplayREDY();
 80004b6:	f001 f86f 	bl	8001598 <DisplayREDY>
		if(timer_flag[1] == 1){
 80004ba:	4b1e      	ldr	r3, [pc, #120]	; (8000534 <fsm_automatic_runy+0xd4>)
 80004bc:	685b      	ldr	r3, [r3, #4]
 80004be:	2b01      	cmp	r3, #1
 80004c0:	d128      	bne.n	8000514 <fsm_automatic_runy+0xb4>
			statusy = AUTO_GREENY;
 80004c2:	4b18      	ldr	r3, [pc, #96]	; (8000524 <fsm_automatic_runy+0xc4>)
 80004c4:	2207      	movs	r2, #7
 80004c6:	601a      	str	r2, [r3, #0]
			setTimer(1,3000);
 80004c8:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80004cc:	2001      	movs	r0, #1
 80004ce:	f001 fb49 	bl	8001b64 <setTimer>
		}
		break;
 80004d2:	e01f      	b.n	8000514 <fsm_automatic_runy+0xb4>
	case AUTO_GREENY:
		DisplayGREENY();
 80004d4:	f001 f88c 	bl	80015f0 <DisplayGREENY>
		if(timer_flag[1] == 1){
 80004d8:	4b16      	ldr	r3, [pc, #88]	; (8000534 <fsm_automatic_runy+0xd4>)
 80004da:	685b      	ldr	r3, [r3, #4]
 80004dc:	2b01      	cmp	r3, #1
 80004de:	d11b      	bne.n	8000518 <fsm_automatic_runy+0xb8>
			statusy = AUTO_YELLOWY;
 80004e0:	4b10      	ldr	r3, [pc, #64]	; (8000524 <fsm_automatic_runy+0xc4>)
 80004e2:	2208      	movs	r2, #8
 80004e4:	601a      	str	r2, [r3, #0]
			setTimer(1,2000);
 80004e6:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80004ea:	2001      	movs	r0, #1
 80004ec:	f001 fb3a 	bl	8001b64 <setTimer>
		}
		break;
 80004f0:	e012      	b.n	8000518 <fsm_automatic_runy+0xb8>
	case AUTO_YELLOWY:
		DisplayYELLOWY();
 80004f2:	f001 f867 	bl	80015c4 <DisplayYELLOWY>
		if(timer_flag[1] == 1){
 80004f6:	4b0f      	ldr	r3, [pc, #60]	; (8000534 <fsm_automatic_runy+0xd4>)
 80004f8:	685b      	ldr	r3, [r3, #4]
 80004fa:	2b01      	cmp	r3, #1
 80004fc:	d10e      	bne.n	800051c <fsm_automatic_runy+0xbc>
			statusy = AUTO_REDY;
 80004fe:	4b09      	ldr	r3, [pc, #36]	; (8000524 <fsm_automatic_runy+0xc4>)
 8000500:	2206      	movs	r2, #6
 8000502:	601a      	str	r2, [r3, #0]
			setTimer(1,5000);
 8000504:	f241 3188 	movw	r1, #5000	; 0x1388
 8000508:	2001      	movs	r0, #1
 800050a:	f001 fb2b 	bl	8001b64 <setTimer>
		}
		break;
 800050e:	e005      	b.n	800051c <fsm_automatic_runy+0xbc>
	default:
		break;
 8000510:	bf00      	nop
 8000512:	e004      	b.n	800051e <fsm_automatic_runy+0xbe>
		break;
 8000514:	bf00      	nop
 8000516:	e002      	b.n	800051e <fsm_automatic_runy+0xbe>
		break;
 8000518:	bf00      	nop
 800051a:	e000      	b.n	800051e <fsm_automatic_runy+0xbe>
		break;
 800051c:	bf00      	nop
	}
}
 800051e:	bf00      	nop
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	20000030 	.word	0x20000030
 8000528:	200000bc 	.word	0x200000bc
 800052c:	51eb851f 	.word	0x51eb851f
 8000530:	2000003c 	.word	0x2000003c
 8000534:	200000e4 	.word	0x200000e4

08000538 <fsm_manual_run>:

#include "fsm_manual.h"
#include "led_display.h"
#include "input_processing.h"
#include "fsm_automatic.h"
void fsm_manual_run(void){
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
	switch(statusMode){
 800053c:	4b35      	ldr	r3, [pc, #212]	; (8000614 <fsm_manual_run+0xdc>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	3b09      	subs	r3, #9
 8000542:	2b03      	cmp	r3, #3
 8000544:	d85a      	bhi.n	80005fc <fsm_manual_run+0xc4>
 8000546:	a201      	add	r2, pc, #4	; (adr r2, 800054c <fsm_manual_run+0x14>)
 8000548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800054c:	08000577 	.word	0x08000577
 8000550:	080005a7 	.word	0x080005a7
 8000554:	080005d7 	.word	0x080005d7
 8000558:	0800055d 	.word	0x0800055d
	case NORMAL_MODE:
		if(counterMode == 2){
 800055c:	4b2e      	ldr	r3, [pc, #184]	; (8000618 <fsm_manual_run+0xe0>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	2b02      	cmp	r3, #2
 8000562:	d14d      	bne.n	8000600 <fsm_manual_run+0xc8>
			statusMode = MAN_RED;
 8000564:	4b2b      	ldr	r3, [pc, #172]	; (8000614 <fsm_manual_run+0xdc>)
 8000566:	2209      	movs	r2, #9
 8000568:	601a      	str	r2, [r3, #0]
			setTimer(4, 500);
 800056a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800056e:	2004      	movs	r0, #4
 8000570:	f001 faf8 	bl	8001b64 <setTimer>
		}
		break;
 8000574:	e044      	b.n	8000600 <fsm_manual_run+0xc8>
	case MAN_RED:
		if(timer_flag[4] == 1){
 8000576:	4b29      	ldr	r3, [pc, #164]	; (800061c <fsm_manual_run+0xe4>)
 8000578:	691b      	ldr	r3, [r3, #16]
 800057a:	2b01      	cmp	r3, #1
 800057c:	d106      	bne.n	800058c <fsm_manual_run+0x54>
			DisplayMAN_RED();
 800057e:	f001 f84d 	bl	800161c <DisplayMAN_RED>
			setTimer(4, 500);
 8000582:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000586:	2004      	movs	r0, #4
 8000588:	f001 faec 	bl	8001b64 <setTimer>
		}
		if(counterMode == 3){
 800058c:	4b22      	ldr	r3, [pc, #136]	; (8000618 <fsm_manual_run+0xe0>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	2b03      	cmp	r3, #3
 8000592:	d137      	bne.n	8000604 <fsm_manual_run+0xcc>
			statusMode = MAN_GREEN;
 8000594:	4b1f      	ldr	r3, [pc, #124]	; (8000614 <fsm_manual_run+0xdc>)
 8000596:	220a      	movs	r2, #10
 8000598:	601a      	str	r2, [r3, #0]
			setTimer(4, 500);
 800059a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800059e:	2004      	movs	r0, #4
 80005a0:	f001 fae0 	bl	8001b64 <setTimer>
		}
		break;
 80005a4:	e02e      	b.n	8000604 <fsm_manual_run+0xcc>
	case MAN_GREEN:
		if(timer_flag[4] == 1){
 80005a6:	4b1d      	ldr	r3, [pc, #116]	; (800061c <fsm_manual_run+0xe4>)
 80005a8:	691b      	ldr	r3, [r3, #16]
 80005aa:	2b01      	cmp	r3, #1
 80005ac:	d106      	bne.n	80005bc <fsm_manual_run+0x84>
			setTimer(4, 500);
 80005ae:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80005b2:	2004      	movs	r0, #4
 80005b4:	f001 fad6 	bl	8001b64 <setTimer>
			DisplayMAN_GREEN();
 80005b8:	f001 f83e 	bl	8001638 <DisplayMAN_GREEN>
		}
		if(counterMode == 4){
 80005bc:	4b16      	ldr	r3, [pc, #88]	; (8000618 <fsm_manual_run+0xe0>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	2b04      	cmp	r3, #4
 80005c2:	d121      	bne.n	8000608 <fsm_manual_run+0xd0>
			statusMode = MAN_YELLOW;
 80005c4:	4b13      	ldr	r3, [pc, #76]	; (8000614 <fsm_manual_run+0xdc>)
 80005c6:	220b      	movs	r2, #11
 80005c8:	601a      	str	r2, [r3, #0]
			setTimer(4, 500);
 80005ca:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80005ce:	2004      	movs	r0, #4
 80005d0:	f001 fac8 	bl	8001b64 <setTimer>
		}
		break;
 80005d4:	e018      	b.n	8000608 <fsm_manual_run+0xd0>
	case MAN_YELLOW:
		if(timer_flag[4] == 1){
 80005d6:	4b11      	ldr	r3, [pc, #68]	; (800061c <fsm_manual_run+0xe4>)
 80005d8:	691b      	ldr	r3, [r3, #16]
 80005da:	2b01      	cmp	r3, #1
 80005dc:	d106      	bne.n	80005ec <fsm_manual_run+0xb4>
			setTimer(4, 500);
 80005de:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80005e2:	2004      	movs	r0, #4
 80005e4:	f001 fabe 	bl	8001b64 <setTimer>
			DisplayMAN_YELLOW();
 80005e8:	f001 f836 	bl	8001658 <DisplayMAN_YELLOW>
		}
		if(counterMode == 1){
 80005ec:	4b0a      	ldr	r3, [pc, #40]	; (8000618 <fsm_manual_run+0xe0>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	2b01      	cmp	r3, #1
 80005f2:	d10b      	bne.n	800060c <fsm_manual_run+0xd4>
			statusMode = NORMAL_MODE;
 80005f4:	4b07      	ldr	r3, [pc, #28]	; (8000614 <fsm_manual_run+0xdc>)
 80005f6:	220c      	movs	r2, #12
 80005f8:	601a      	str	r2, [r3, #0]
		}
		break;
 80005fa:	e007      	b.n	800060c <fsm_manual_run+0xd4>
	default:
		break;
 80005fc:	bf00      	nop
 80005fe:	e006      	b.n	800060e <fsm_manual_run+0xd6>
		break;
 8000600:	bf00      	nop
 8000602:	e004      	b.n	800060e <fsm_manual_run+0xd6>
		break;
 8000604:	bf00      	nop
 8000606:	e002      	b.n	800060e <fsm_manual_run+0xd6>
		break;
 8000608:	bf00      	nop
 800060a:	e000      	b.n	800060e <fsm_manual_run+0xd6>
		break;
 800060c:	bf00      	nop
	}
}
 800060e:	bf00      	nop
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	20000034 	.word	0x20000034
 8000618:	20000044 	.word	0x20000044
 800061c:	200000e4 	.word	0x200000e4

08000620 <fsm_for_input_processing1>:
enum ButtonState buttonState2 = BUTTON_RELEASED;
enum ButtonState buttonState3 = BUTTON_RELEASED;
int counterMode = 0;
int counterTimeSet = 0;
int Mode3_flag = 0;
void fsm_for_input_processing1(void){
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
	switch(buttonState1){
 8000624:	4b27      	ldr	r3, [pc, #156]	; (80006c4 <fsm_for_input_processing1+0xa4>)
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	2b02      	cmp	r3, #2
 800062a:	d03a      	beq.n	80006a2 <fsm_for_input_processing1+0x82>
 800062c:	2b02      	cmp	r3, #2
 800062e:	dc47      	bgt.n	80006c0 <fsm_for_input_processing1+0xa0>
 8000630:	2b00      	cmp	r3, #0
 8000632:	d002      	beq.n	800063a <fsm_for_input_processing1+0x1a>
 8000634:	2b01      	cmp	r3, #1
 8000636:	d020      	beq.n	800067a <fsm_for_input_processing1+0x5a>
			if(!is_button_pressed(0)){
				buttonState1 = BUTTON_RELEASED;
			}
		break;
		}
	}
 8000638:	e042      	b.n	80006c0 <fsm_for_input_processing1+0xa0>
			if(is_button_pressed(0)){
 800063a:	2000      	movs	r0, #0
 800063c:	f000 f9e8 	bl	8000a10 <is_button_pressed>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d037      	beq.n	80006b6 <fsm_for_input_processing1+0x96>
				buttonState1 = BUTTON_PRESSED ;
 8000646:	4b1f      	ldr	r3, [pc, #124]	; (80006c4 <fsm_for_input_processing1+0xa4>)
 8000648:	2201      	movs	r2, #1
 800064a:	701a      	strb	r2, [r3, #0]
				if(ProcessButton1() == 1){
 800064c:	f000 f8ea 	bl	8000824 <ProcessButton1>
 8000650:	4603      	mov	r3, r0
 8000652:	2b01      	cmp	r3, #1
 8000654:	d10b      	bne.n	800066e <fsm_for_input_processing1+0x4e>
					  counterMode++;
 8000656:	4b1c      	ldr	r3, [pc, #112]	; (80006c8 <fsm_for_input_processing1+0xa8>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	3301      	adds	r3, #1
 800065c:	4a1a      	ldr	r2, [pc, #104]	; (80006c8 <fsm_for_input_processing1+0xa8>)
 800065e:	6013      	str	r3, [r2, #0]
					  if(counterMode > 4){
 8000660:	4b19      	ldr	r3, [pc, #100]	; (80006c8 <fsm_for_input_processing1+0xa8>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	2b04      	cmp	r3, #4
 8000666:	dd02      	ble.n	800066e <fsm_for_input_processing1+0x4e>
						  counterMode = 1;
 8000668:	4b17      	ldr	r3, [pc, #92]	; (80006c8 <fsm_for_input_processing1+0xa8>)
 800066a:	2201      	movs	r2, #1
 800066c:	601a      	str	r2, [r3, #0]
				  Display7Seg1(counterMode);
 800066e:	4b16      	ldr	r3, [pc, #88]	; (80006c8 <fsm_for_input_processing1+0xa8>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4618      	mov	r0, r3
 8000674:	f000 fa00 	bl	8000a78 <Display7Seg1>
		break;
 8000678:	e01d      	b.n	80006b6 <fsm_for_input_processing1+0x96>
			if(!is_button_pressed(0)){
 800067a:	2000      	movs	r0, #0
 800067c:	f000 f9c8 	bl	8000a10 <is_button_pressed>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d103      	bne.n	800068e <fsm_for_input_processing1+0x6e>
				buttonState1 = BUTTON_RELEASED;
 8000686:	4b0f      	ldr	r3, [pc, #60]	; (80006c4 <fsm_for_input_processing1+0xa4>)
 8000688:	2200      	movs	r2, #0
 800068a:	701a      	strb	r2, [r3, #0]
		break;
 800068c:	e015      	b.n	80006ba <fsm_for_input_processing1+0x9a>
				if(is_button_pressed_1s(0) == 1){
 800068e:	2000      	movs	r0, #0
 8000690:	f000 f9d8 	bl	8000a44 <is_button_pressed_1s>
 8000694:	4603      	mov	r3, r0
 8000696:	2b01      	cmp	r3, #1
 8000698:	d10f      	bne.n	80006ba <fsm_for_input_processing1+0x9a>
					buttonState1 = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 800069a:	4b0a      	ldr	r3, [pc, #40]	; (80006c4 <fsm_for_input_processing1+0xa4>)
 800069c:	2202      	movs	r2, #2
 800069e:	701a      	strb	r2, [r3, #0]
		break;
 80006a0:	e00b      	b.n	80006ba <fsm_for_input_processing1+0x9a>
			if(!is_button_pressed(0)){
 80006a2:	2000      	movs	r0, #0
 80006a4:	f000 f9b4 	bl	8000a10 <is_button_pressed>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d107      	bne.n	80006be <fsm_for_input_processing1+0x9e>
				buttonState1 = BUTTON_RELEASED;
 80006ae:	4b05      	ldr	r3, [pc, #20]	; (80006c4 <fsm_for_input_processing1+0xa4>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	701a      	strb	r2, [r3, #0]
		break;
 80006b4:	e003      	b.n	80006be <fsm_for_input_processing1+0x9e>
		break;
 80006b6:	bf00      	nop
 80006b8:	e002      	b.n	80006c0 <fsm_for_input_processing1+0xa0>
		break;
 80006ba:	bf00      	nop
 80006bc:	e000      	b.n	80006c0 <fsm_for_input_processing1+0xa0>
		break;
 80006be:	bf00      	nop
	}
 80006c0:	bf00      	nop
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	20000040 	.word	0x20000040
 80006c8:	20000044 	.word	0x20000044

080006cc <fsm_for_input_processing2>:
void fsm_for_input_processing2(void){
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
	switch(buttonState2){
 80006d0:	4b27      	ldr	r3, [pc, #156]	; (8000770 <fsm_for_input_processing2+0xa4>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	2b02      	cmp	r3, #2
 80006d6:	d03a      	beq.n	800074e <fsm_for_input_processing2+0x82>
 80006d8:	2b02      	cmp	r3, #2
 80006da:	dc47      	bgt.n	800076c <fsm_for_input_processing2+0xa0>
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d002      	beq.n	80006e6 <fsm_for_input_processing2+0x1a>
 80006e0:	2b01      	cmp	r3, #1
 80006e2:	d020      	beq.n	8000726 <fsm_for_input_processing2+0x5a>
			if(!is_button_pressed(1)){
				buttonState2 = BUTTON_RELEASED;
			}
		break;
		}
	}
 80006e4:	e042      	b.n	800076c <fsm_for_input_processing2+0xa0>
			if(is_button_pressed(1)){
 80006e6:	2001      	movs	r0, #1
 80006e8:	f000 f992 	bl	8000a10 <is_button_pressed>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d037      	beq.n	8000762 <fsm_for_input_processing2+0x96>
				buttonState2 = BUTTON_PRESSED ;
 80006f2:	4b1f      	ldr	r3, [pc, #124]	; (8000770 <fsm_for_input_processing2+0xa4>)
 80006f4:	2201      	movs	r2, #1
 80006f6:	701a      	strb	r2, [r3, #0]
				if(ProcessButton2() == 1){
 80006f8:	f000 f8b2 	bl	8000860 <ProcessButton2>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b01      	cmp	r3, #1
 8000700:	d10b      	bne.n	800071a <fsm_for_input_processing2+0x4e>
					  counterTimeSet++;
 8000702:	4b1c      	ldr	r3, [pc, #112]	; (8000774 <fsm_for_input_processing2+0xa8>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	3301      	adds	r3, #1
 8000708:	4a1a      	ldr	r2, [pc, #104]	; (8000774 <fsm_for_input_processing2+0xa8>)
 800070a:	6013      	str	r3, [r2, #0]
					  if(counterTimeSet > 9){
 800070c:	4b19      	ldr	r3, [pc, #100]	; (8000774 <fsm_for_input_processing2+0xa8>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	2b09      	cmp	r3, #9
 8000712:	dd02      	ble.n	800071a <fsm_for_input_processing2+0x4e>
						  counterTimeSet = 0;
 8000714:	4b17      	ldr	r3, [pc, #92]	; (8000774 <fsm_for_input_processing2+0xa8>)
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
				  Display7Seg3(counterTimeSet);
 800071a:	4b16      	ldr	r3, [pc, #88]	; (8000774 <fsm_for_input_processing2+0xa8>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	4618      	mov	r0, r3
 8000720:	f000 fcf6 	bl	8001110 <Display7Seg3>
		break;
 8000724:	e01d      	b.n	8000762 <fsm_for_input_processing2+0x96>
			if(!is_button_pressed(1)){
 8000726:	2001      	movs	r0, #1
 8000728:	f000 f972 	bl	8000a10 <is_button_pressed>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d103      	bne.n	800073a <fsm_for_input_processing2+0x6e>
				buttonState2 = BUTTON_RELEASED;
 8000732:	4b0f      	ldr	r3, [pc, #60]	; (8000770 <fsm_for_input_processing2+0xa4>)
 8000734:	2200      	movs	r2, #0
 8000736:	701a      	strb	r2, [r3, #0]
		break;
 8000738:	e015      	b.n	8000766 <fsm_for_input_processing2+0x9a>
				if(is_button_pressed_1s(1) == 1){
 800073a:	2001      	movs	r0, #1
 800073c:	f000 f982 	bl	8000a44 <is_button_pressed_1s>
 8000740:	4603      	mov	r3, r0
 8000742:	2b01      	cmp	r3, #1
 8000744:	d10f      	bne.n	8000766 <fsm_for_input_processing2+0x9a>
					buttonState2 = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 8000746:	4b0a      	ldr	r3, [pc, #40]	; (8000770 <fsm_for_input_processing2+0xa4>)
 8000748:	2202      	movs	r2, #2
 800074a:	701a      	strb	r2, [r3, #0]
		break;
 800074c:	e00b      	b.n	8000766 <fsm_for_input_processing2+0x9a>
			if(!is_button_pressed(1)){
 800074e:	2001      	movs	r0, #1
 8000750:	f000 f95e 	bl	8000a10 <is_button_pressed>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d107      	bne.n	800076a <fsm_for_input_processing2+0x9e>
				buttonState2 = BUTTON_RELEASED;
 800075a:	4b05      	ldr	r3, [pc, #20]	; (8000770 <fsm_for_input_processing2+0xa4>)
 800075c:	2200      	movs	r2, #0
 800075e:	701a      	strb	r2, [r3, #0]
		break;
 8000760:	e003      	b.n	800076a <fsm_for_input_processing2+0x9e>
		break;
 8000762:	bf00      	nop
 8000764:	e002      	b.n	800076c <fsm_for_input_processing2+0xa0>
		break;
 8000766:	bf00      	nop
 8000768:	e000      	b.n	800076c <fsm_for_input_processing2+0xa0>
		break;
 800076a:	bf00      	nop
	}
 800076c:	bf00      	nop
 800076e:	bd80      	pop	{r7, pc}
 8000770:	20000041 	.word	0x20000041
 8000774:	20000048 	.word	0x20000048

08000778 <fsm_for_input_processing3>:
void fsm_for_input_processing3(void){
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
	switch(buttonState3){
 800077c:	4b21      	ldr	r3, [pc, #132]	; (8000804 <fsm_for_input_processing3+0x8c>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	2b02      	cmp	r3, #2
 8000782:	d02e      	beq.n	80007e2 <fsm_for_input_processing3+0x6a>
 8000784:	2b02      	cmp	r3, #2
 8000786:	dc3b      	bgt.n	8000800 <fsm_for_input_processing3+0x88>
 8000788:	2b00      	cmp	r3, #0
 800078a:	d002      	beq.n	8000792 <fsm_for_input_processing3+0x1a>
 800078c:	2b01      	cmp	r3, #1
 800078e:	d014      	beq.n	80007ba <fsm_for_input_processing3+0x42>
			if(!is_button_pressed(2)){
				buttonState3 = BUTTON_RELEASED;
			}
		break;
		}
	}
 8000790:	e036      	b.n	8000800 <fsm_for_input_processing3+0x88>
			if(is_button_pressed(2)){
 8000792:	2002      	movs	r0, #2
 8000794:	f000 f93c 	bl	8000a10 <is_button_pressed>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d02b      	beq.n	80007f6 <fsm_for_input_processing3+0x7e>
				buttonState3 = BUTTON_PRESSED ;
 800079e:	4b19      	ldr	r3, [pc, #100]	; (8000804 <fsm_for_input_processing3+0x8c>)
 80007a0:	2201      	movs	r2, #1
 80007a2:	701a      	strb	r2, [r3, #0]
				if(ProcessButton3() == 1){
 80007a4:	f000 f87a 	bl	800089c <ProcessButton3>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b01      	cmp	r3, #1
 80007ac:	d123      	bne.n	80007f6 <fsm_for_input_processing3+0x7e>
					HAL_GPIO_TogglePin(TEST_GPIO_Port, TEST_Pin);
 80007ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007b2:	4815      	ldr	r0, [pc, #84]	; (8000808 <fsm_for_input_processing3+0x90>)
 80007b4:	f001 fd77 	bl	80022a6 <HAL_GPIO_TogglePin>
		break;
 80007b8:	e01d      	b.n	80007f6 <fsm_for_input_processing3+0x7e>
			if(!is_button_pressed(2)){
 80007ba:	2002      	movs	r0, #2
 80007bc:	f000 f928 	bl	8000a10 <is_button_pressed>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d103      	bne.n	80007ce <fsm_for_input_processing3+0x56>
				buttonState3 = BUTTON_RELEASED;
 80007c6:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <fsm_for_input_processing3+0x8c>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	701a      	strb	r2, [r3, #0]
		break;
 80007cc:	e015      	b.n	80007fa <fsm_for_input_processing3+0x82>
				if(is_button_pressed_1s(2) == 1){
 80007ce:	2002      	movs	r0, #2
 80007d0:	f000 f938 	bl	8000a44 <is_button_pressed_1s>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b01      	cmp	r3, #1
 80007d8:	d10f      	bne.n	80007fa <fsm_for_input_processing3+0x82>
					buttonState3 = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 80007da:	4b0a      	ldr	r3, [pc, #40]	; (8000804 <fsm_for_input_processing3+0x8c>)
 80007dc:	2202      	movs	r2, #2
 80007de:	701a      	strb	r2, [r3, #0]
		break;
 80007e0:	e00b      	b.n	80007fa <fsm_for_input_processing3+0x82>
			if(!is_button_pressed(2)){
 80007e2:	2002      	movs	r0, #2
 80007e4:	f000 f914 	bl	8000a10 <is_button_pressed>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d107      	bne.n	80007fe <fsm_for_input_processing3+0x86>
				buttonState3 = BUTTON_RELEASED;
 80007ee:	4b05      	ldr	r3, [pc, #20]	; (8000804 <fsm_for_input_processing3+0x8c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	701a      	strb	r2, [r3, #0]
		break;
 80007f4:	e003      	b.n	80007fe <fsm_for_input_processing3+0x86>
		break;
 80007f6:	bf00      	nop
 80007f8:	e002      	b.n	8000800 <fsm_for_input_processing3+0x88>
		break;
 80007fa:	bf00      	nop
 80007fc:	e000      	b.n	8000800 <fsm_for_input_processing3+0x88>
		break;
 80007fe:	bf00      	nop
	}
 8000800:	bf00      	nop
 8000802:	bd80      	pop	{r7, pc}
 8000804:	20000042 	.word	0x20000042
 8000808:	40010c00 	.word	0x40010c00

0800080c <Button1Run>:
static uint8_t flagForButtonPress1s[N0_OF_BUTTONS];
static uint16_t counterForButtonPress1s[N0_OF_BUTTONS];
int button1_flag = 0;
int button2_flag = 0;
int button3_flag = 0;
void Button1Run(void){
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
 	button1_flag = 1;
 8000810:	4b03      	ldr	r3, [pc, #12]	; (8000820 <Button1Run+0x14>)
 8000812:	2201      	movs	r2, #1
 8000814:	601a      	str	r2, [r3, #0]
 }
 8000816:	bf00      	nop
 8000818:	46bd      	mov	sp, r7
 800081a:	bc80      	pop	{r7}
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	20000068 	.word	0x20000068

08000824 <ProcessButton1>:
int ProcessButton1(void){
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
	 if(button1_flag == 1){
 8000828:	4b06      	ldr	r3, [pc, #24]	; (8000844 <ProcessButton1+0x20>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	2b01      	cmp	r3, #1
 800082e:	d104      	bne.n	800083a <ProcessButton1+0x16>
		 button1_flag = 0;
 8000830:	4b04      	ldr	r3, [pc, #16]	; (8000844 <ProcessButton1+0x20>)
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
		 return 1;
 8000836:	2301      	movs	r3, #1
 8000838:	e000      	b.n	800083c <ProcessButton1+0x18>
	 }
	 return 0;
 800083a:	2300      	movs	r3, #0
 }
 800083c:	4618      	mov	r0, r3
 800083e:	46bd      	mov	sp, r7
 8000840:	bc80      	pop	{r7}
 8000842:	4770      	bx	lr
 8000844:	20000068 	.word	0x20000068

08000848 <Button2Run>:
void Button2Run(void){
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
 	button2_flag = 1;
 800084c:	4b03      	ldr	r3, [pc, #12]	; (800085c <Button2Run+0x14>)
 800084e:	2201      	movs	r2, #1
 8000850:	601a      	str	r2, [r3, #0]
 }
 8000852:	bf00      	nop
 8000854:	46bd      	mov	sp, r7
 8000856:	bc80      	pop	{r7}
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	2000006c 	.word	0x2000006c

08000860 <ProcessButton2>:
int ProcessButton2(void){
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
	 if(button2_flag == 1){
 8000864:	4b06      	ldr	r3, [pc, #24]	; (8000880 <ProcessButton2+0x20>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	2b01      	cmp	r3, #1
 800086a:	d104      	bne.n	8000876 <ProcessButton2+0x16>
		 button2_flag = 0;
 800086c:	4b04      	ldr	r3, [pc, #16]	; (8000880 <ProcessButton2+0x20>)
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
		 return 1;
 8000872:	2301      	movs	r3, #1
 8000874:	e000      	b.n	8000878 <ProcessButton2+0x18>
	 }
	 return 0;
 8000876:	2300      	movs	r3, #0
 }
 8000878:	4618      	mov	r0, r3
 800087a:	46bd      	mov	sp, r7
 800087c:	bc80      	pop	{r7}
 800087e:	4770      	bx	lr
 8000880:	2000006c 	.word	0x2000006c

08000884 <Button3Run>:
void Button3Run(void){
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
 	button3_flag = 1;
 8000888:	4b03      	ldr	r3, [pc, #12]	; (8000898 <Button3Run+0x14>)
 800088a:	2201      	movs	r2, #1
 800088c:	601a      	str	r2, [r3, #0]
 }
 800088e:	bf00      	nop
 8000890:	46bd      	mov	sp, r7
 8000892:	bc80      	pop	{r7}
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	20000070 	.word	0x20000070

0800089c <ProcessButton3>:
int ProcessButton3(void){
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
	 if(button3_flag == 1){
 80008a0:	4b06      	ldr	r3, [pc, #24]	; (80008bc <ProcessButton3+0x20>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	2b01      	cmp	r3, #1
 80008a6:	d104      	bne.n	80008b2 <ProcessButton3+0x16>
		 button3_flag = 0;
 80008a8:	4b04      	ldr	r3, [pc, #16]	; (80008bc <ProcessButton3+0x20>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
		 return 1;
 80008ae:	2301      	movs	r3, #1
 80008b0:	e000      	b.n	80008b4 <ProcessButton3+0x18>
	 }
	 return 0;
 80008b2:	2300      	movs	r3, #0
 }
 80008b4:	4618      	mov	r0, r3
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bc80      	pop	{r7}
 80008ba:	4770      	bx	lr
 80008bc:	20000070 	.word	0x20000070

080008c0 <button_reading>:
void button_reading(void){
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
	 for(unsigned char i = 0;i < N0_OF_BUTTONS;i++){
 80008c6:	2300      	movs	r3, #0
 80008c8:	71fb      	strb	r3, [r7, #7]
 80008ca:	e08b      	b.n	80009e4 <button_reading+0x124>
		 debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 80008cc:	79fa      	ldrb	r2, [r7, #7]
 80008ce:	79fb      	ldrb	r3, [r7, #7]
 80008d0:	4949      	ldr	r1, [pc, #292]	; (80009f8 <button_reading+0x138>)
 80008d2:	5c89      	ldrb	r1, [r1, r2]
 80008d4:	4a49      	ldr	r2, [pc, #292]	; (80009fc <button_reading+0x13c>)
 80008d6:	54d1      	strb	r1, [r2, r3]
		 if(i == 0){
 80008d8:	79fb      	ldrb	r3, [r7, #7]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d108      	bne.n	80008f0 <button_reading+0x30>
		 debounceButtonBuffer1[0] = HAL_GPIO_ReadPin(Button_GPIO_Port,Button_Pin);
 80008de:	2101      	movs	r1, #1
 80008e0:	4847      	ldr	r0, [pc, #284]	; (8000a00 <button_reading+0x140>)
 80008e2:	f001 fcb1 	bl	8002248 <HAL_GPIO_ReadPin>
 80008e6:	4603      	mov	r3, r0
 80008e8:	461a      	mov	r2, r3
 80008ea:	4b43      	ldr	r3, [pc, #268]	; (80009f8 <button_reading+0x138>)
 80008ec:	701a      	strb	r2, [r3, #0]
 80008ee:	e016      	b.n	800091e <button_reading+0x5e>
		 }
		 else if(i == 1){
 80008f0:	79fb      	ldrb	r3, [r7, #7]
 80008f2:	2b01      	cmp	r3, #1
 80008f4:	d108      	bne.n	8000908 <button_reading+0x48>
		 debounceButtonBuffer1[1] = HAL_GPIO_ReadPin(Button1_GPIO_Port,Button1_Pin);
 80008f6:	2102      	movs	r1, #2
 80008f8:	4841      	ldr	r0, [pc, #260]	; (8000a00 <button_reading+0x140>)
 80008fa:	f001 fca5 	bl	8002248 <HAL_GPIO_ReadPin>
 80008fe:	4603      	mov	r3, r0
 8000900:	461a      	mov	r2, r3
 8000902:	4b3d      	ldr	r3, [pc, #244]	; (80009f8 <button_reading+0x138>)
 8000904:	705a      	strb	r2, [r3, #1]
 8000906:	e00a      	b.n	800091e <button_reading+0x5e>
		 }
		 else if(i == 2){
 8000908:	79fb      	ldrb	r3, [r7, #7]
 800090a:	2b02      	cmp	r3, #2
 800090c:	d107      	bne.n	800091e <button_reading+0x5e>
		 debounceButtonBuffer1[2] = HAL_GPIO_ReadPin(Button2_GPIO_Port,Button2_Pin);
 800090e:	2104      	movs	r1, #4
 8000910:	483b      	ldr	r0, [pc, #236]	; (8000a00 <button_reading+0x140>)
 8000912:	f001 fc99 	bl	8002248 <HAL_GPIO_ReadPin>
 8000916:	4603      	mov	r3, r0
 8000918:	461a      	mov	r2, r3
 800091a:	4b37      	ldr	r3, [pc, #220]	; (80009f8 <button_reading+0x138>)
 800091c:	709a      	strb	r2, [r3, #2]
		 }
		 if(debounceButtonBuffer1[i] == debounceButtonBuffer2[i]){
 800091e:	79fb      	ldrb	r3, [r7, #7]
 8000920:	4a35      	ldr	r2, [pc, #212]	; (80009f8 <button_reading+0x138>)
 8000922:	5cd2      	ldrb	r2, [r2, r3]
 8000924:	79fb      	ldrb	r3, [r7, #7]
 8000926:	4935      	ldr	r1, [pc, #212]	; (80009fc <button_reading+0x13c>)
 8000928:	5ccb      	ldrb	r3, [r1, r3]
 800092a:	429a      	cmp	r2, r3
 800092c:	d14e      	bne.n	80009cc <button_reading+0x10c>
			 buttonBuffer[i] = debounceButtonBuffer1[i];
 800092e:	79fa      	ldrb	r2, [r7, #7]
 8000930:	79fb      	ldrb	r3, [r7, #7]
 8000932:	4931      	ldr	r1, [pc, #196]	; (80009f8 <button_reading+0x138>)
 8000934:	5c89      	ldrb	r1, [r1, r2]
 8000936:	4a33      	ldr	r2, [pc, #204]	; (8000a04 <button_reading+0x144>)
 8000938:	54d1      	strb	r1, [r2, r3]
		 	 if(buttonBuffer[i] == BUTTON_IS_PRESSED){
 800093a:	79fb      	ldrb	r3, [r7, #7]
 800093c:	4a31      	ldr	r2, [pc, #196]	; (8000a04 <button_reading+0x144>)
 800093e:	5cd3      	ldrb	r3, [r2, r3]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d14c      	bne.n	80009de <button_reading+0x11e>
				 if(i == 0){
 8000944:	79fb      	ldrb	r3, [r7, #7]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d102      	bne.n	8000950 <button_reading+0x90>
					 Button1Run();
 800094a:	f7ff ff5f 	bl	800080c <Button1Run>
 800094e:	e00a      	b.n	8000966 <button_reading+0xa6>
				 }
				 else if(i == 1){
 8000950:	79fb      	ldrb	r3, [r7, #7]
 8000952:	2b01      	cmp	r3, #1
 8000954:	d102      	bne.n	800095c <button_reading+0x9c>
					 Button2Run();
 8000956:	f7ff ff77 	bl	8000848 <Button2Run>
 800095a:	e004      	b.n	8000966 <button_reading+0xa6>
				 }
				 else if(i == 2){
 800095c:	79fb      	ldrb	r3, [r7, #7]
 800095e:	2b02      	cmp	r3, #2
 8000960:	d101      	bne.n	8000966 <button_reading+0xa6>
					 Button3Run();
 8000962:	f7ff ff8f 	bl	8000884 <Button3Run>
				 }
		 		 if(counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING && flagForButtonPress1s[i] == 0){
 8000966:	79fb      	ldrb	r3, [r7, #7]
 8000968:	4a27      	ldr	r2, [pc, #156]	; (8000a08 <button_reading+0x148>)
 800096a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800096e:	2b63      	cmp	r3, #99	; 0x63
 8000970:	d80e      	bhi.n	8000990 <button_reading+0xd0>
 8000972:	79fb      	ldrb	r3, [r7, #7]
 8000974:	4a25      	ldr	r2, [pc, #148]	; (8000a0c <button_reading+0x14c>)
 8000976:	5cd3      	ldrb	r3, [r2, r3]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d109      	bne.n	8000990 <button_reading+0xd0>
		 			 counterForButtonPress1s[i]++;
 800097c:	79fb      	ldrb	r3, [r7, #7]
 800097e:	4a22      	ldr	r2, [pc, #136]	; (8000a08 <button_reading+0x148>)
 8000980:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000984:	3201      	adds	r2, #1
 8000986:	b291      	uxth	r1, r2
 8000988:	4a1f      	ldr	r2, [pc, #124]	; (8000a08 <button_reading+0x148>)
 800098a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800098e:	e026      	b.n	80009de <button_reading+0x11e>
		 		 }
		 		 else{
		 			 flagForButtonPress1s[i] = 1;
 8000990:	79fb      	ldrb	r3, [r7, #7]
 8000992:	4a1e      	ldr	r2, [pc, #120]	; (8000a0c <button_reading+0x14c>)
 8000994:	2101      	movs	r1, #1
 8000996:	54d1      	strb	r1, [r2, r3]

		 			 if(counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING2){
 8000998:	79fb      	ldrb	r3, [r7, #7]
 800099a:	4a1b      	ldr	r2, [pc, #108]	; (8000a08 <button_reading+0x148>)
 800099c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009a0:	2b95      	cmp	r3, #149	; 0x95
 80009a2:	d809      	bhi.n	80009b8 <button_reading+0xf8>
		 				counterForButtonPress1s[i]++;
 80009a4:	79fb      	ldrb	r3, [r7, #7]
 80009a6:	4a18      	ldr	r2, [pc, #96]	; (8000a08 <button_reading+0x148>)
 80009a8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80009ac:	3201      	adds	r2, #1
 80009ae:	b291      	uxth	r1, r2
 80009b0:	4a15      	ldr	r2, [pc, #84]	; (8000a08 <button_reading+0x148>)
 80009b2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80009b6:	e012      	b.n	80009de <button_reading+0x11e>
		 			 }
		 			 else{
		 				buttonBuffer[i] = BUTTON_IS_RELEASED;
 80009b8:	79fb      	ldrb	r3, [r7, #7]
 80009ba:	4a12      	ldr	r2, [pc, #72]	; (8000a04 <button_reading+0x144>)
 80009bc:	2101      	movs	r1, #1
 80009be:	54d1      	strb	r1, [r2, r3]
		 				counterForButtonPress1s[i] = 100;
 80009c0:	79fb      	ldrb	r3, [r7, #7]
 80009c2:	4a11      	ldr	r2, [pc, #68]	; (8000a08 <button_reading+0x148>)
 80009c4:	2164      	movs	r1, #100	; 0x64
 80009c6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80009ca:	e008      	b.n	80009de <button_reading+0x11e>

		 		 }
		 	 }
		 }
		 	 else{
		 		 counterForButtonPress1s[i] = 0;
 80009cc:	79fb      	ldrb	r3, [r7, #7]
 80009ce:	4a0e      	ldr	r2, [pc, #56]	; (8000a08 <button_reading+0x148>)
 80009d0:	2100      	movs	r1, #0
 80009d2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		 		 flagForButtonPress1s[i] = 0;
 80009d6:	79fb      	ldrb	r3, [r7, #7]
 80009d8:	4a0c      	ldr	r2, [pc, #48]	; (8000a0c <button_reading+0x14c>)
 80009da:	2100      	movs	r1, #0
 80009dc:	54d1      	strb	r1, [r2, r3]
	 for(unsigned char i = 0;i < N0_OF_BUTTONS;i++){
 80009de:	79fb      	ldrb	r3, [r7, #7]
 80009e0:	3301      	adds	r3, #1
 80009e2:	71fb      	strb	r3, [r7, #7]
 80009e4:	79fb      	ldrb	r3, [r7, #7]
 80009e6:	2b02      	cmp	r3, #2
 80009e8:	f67f af70 	bls.w	80008cc <button_reading+0xc>
		 	 }
	 	 }
	}
 80009ec:	bf00      	nop
 80009ee:	bf00      	nop
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	20000054 	.word	0x20000054
 80009fc:	20000058 	.word	0x20000058
 8000a00:	40010c00 	.word	0x40010c00
 8000a04:	20000050 	.word	0x20000050
 8000a08:	20000060 	.word	0x20000060
 8000a0c:	2000005c 	.word	0x2000005c

08000a10 <is_button_pressed>:
unsigned char is_button_pressed(uint8_t index){
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	71fb      	strb	r3, [r7, #7]
	if(index >= N0_OF_BUTTONS) return 0;
 8000a1a:	79fb      	ldrb	r3, [r7, #7]
 8000a1c:	2b02      	cmp	r3, #2
 8000a1e:	d901      	bls.n	8000a24 <is_button_pressed+0x14>
 8000a20:	2300      	movs	r3, #0
 8000a22:	e007      	b.n	8000a34 <is_button_pressed+0x24>
	return (buttonBuffer[index] == BUTTON_IS_PRESSED);
 8000a24:	79fb      	ldrb	r3, [r7, #7]
 8000a26:	4a06      	ldr	r2, [pc, #24]	; (8000a40 <is_button_pressed+0x30>)
 8000a28:	5cd3      	ldrb	r3, [r2, r3]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	bf0c      	ite	eq
 8000a2e:	2301      	moveq	r3, #1
 8000a30:	2300      	movne	r3, #0
 8000a32:	b2db      	uxtb	r3, r3
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	370c      	adds	r7, #12
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bc80      	pop	{r7}
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	20000050 	.word	0x20000050

08000a44 <is_button_pressed_1s>:
unsigned char is_button_pressed_1s(unsigned char index){
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	71fb      	strb	r3, [r7, #7]
	if(index >= N0_OF_BUTTONS) return 0xff;
 8000a4e:	79fb      	ldrb	r3, [r7, #7]
 8000a50:	2b02      	cmp	r3, #2
 8000a52:	d901      	bls.n	8000a58 <is_button_pressed_1s+0x14>
 8000a54:	23ff      	movs	r3, #255	; 0xff
 8000a56:	e007      	b.n	8000a68 <is_button_pressed_1s+0x24>
	return (flagForButtonPress1s[index] == 1) ;
 8000a58:	79fb      	ldrb	r3, [r7, #7]
 8000a5a:	4a06      	ldr	r2, [pc, #24]	; (8000a74 <is_button_pressed_1s+0x30>)
 8000a5c:	5cd3      	ldrb	r3, [r2, r3]
 8000a5e:	2b01      	cmp	r3, #1
 8000a60:	bf0c      	ite	eq
 8000a62:	2301      	moveq	r3, #1
 8000a64:	2300      	movne	r3, #0
 8000a66:	b2db      	uxtb	r3, r3
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	370c      	adds	r7, #12
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bc80      	pop	{r7}
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	2000005c 	.word	0x2000005c

08000a78 <Display7Seg1>:
 *
 *  Created on: Sep 27, 2024
 *      Author: Genki
 */
#include "main.h"
void Display7Seg1(int x){
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
	if(x == 0){
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d122      	bne.n	8000acc <Display7Seg1+0x54>
		HAL_GPIO_WritePin(SEG1_1_GPIO_Port, SEG1_1_Pin, GPIO_PIN_RESET);
 8000a86:	2200      	movs	r2, #0
 8000a88:	2101      	movs	r1, #1
 8000a8a:	48bd      	ldr	r0, [pc, #756]	; (8000d80 <Display7Seg1+0x308>)
 8000a8c:	f001 fbf3 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_2_GPIO_Port, SEG1_2_Pin, GPIO_PIN_RESET);
 8000a90:	2200      	movs	r2, #0
 8000a92:	2102      	movs	r1, #2
 8000a94:	48ba      	ldr	r0, [pc, #744]	; (8000d80 <Display7Seg1+0x308>)
 8000a96:	f001 fbee 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_3_GPIO_Port, SEG1_3_Pin, GPIO_PIN_RESET);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	2104      	movs	r1, #4
 8000a9e:	48b8      	ldr	r0, [pc, #736]	; (8000d80 <Display7Seg1+0x308>)
 8000aa0:	f001 fbe9 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_4_GPIO_Port, SEG1_4_Pin, GPIO_PIN_RESET);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	2108      	movs	r1, #8
 8000aa8:	48b5      	ldr	r0, [pc, #724]	; (8000d80 <Display7Seg1+0x308>)
 8000aaa:	f001 fbe4 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_5_GPIO_Port, SEG1_5_Pin, GPIO_PIN_RESET);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	2110      	movs	r1, #16
 8000ab2:	48b3      	ldr	r0, [pc, #716]	; (8000d80 <Display7Seg1+0x308>)
 8000ab4:	f001 fbdf 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_6_GPIO_Port, SEG1_6_Pin, GPIO_PIN_RESET);
 8000ab8:	2200      	movs	r2, #0
 8000aba:	2120      	movs	r1, #32
 8000abc:	48b0      	ldr	r0, [pc, #704]	; (8000d80 <Display7Seg1+0x308>)
 8000abe:	f001 fbda 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_7_GPIO_Port, SEG1_7_Pin, GPIO_PIN_SET);
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	2140      	movs	r1, #64	; 0x40
 8000ac6:	48ae      	ldr	r0, [pc, #696]	; (8000d80 <Display7Seg1+0x308>)
 8000ac8:	f001 fbd5 	bl	8002276 <HAL_GPIO_WritePin>
	}
	if(x == 1){
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2b01      	cmp	r3, #1
 8000ad0:	d122      	bne.n	8000b18 <Display7Seg1+0xa0>
		HAL_GPIO_WritePin(SEG1_1_GPIO_Port, SEG1_1_Pin, GPIO_PIN_SET);
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	2101      	movs	r1, #1
 8000ad6:	48aa      	ldr	r0, [pc, #680]	; (8000d80 <Display7Seg1+0x308>)
 8000ad8:	f001 fbcd 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_2_GPIO_Port, SEG1_2_Pin, GPIO_PIN_RESET);
 8000adc:	2200      	movs	r2, #0
 8000ade:	2102      	movs	r1, #2
 8000ae0:	48a7      	ldr	r0, [pc, #668]	; (8000d80 <Display7Seg1+0x308>)
 8000ae2:	f001 fbc8 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_3_GPIO_Port, SEG1_3_Pin, GPIO_PIN_RESET);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	2104      	movs	r1, #4
 8000aea:	48a5      	ldr	r0, [pc, #660]	; (8000d80 <Display7Seg1+0x308>)
 8000aec:	f001 fbc3 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_4_GPIO_Port, SEG1_4_Pin, GPIO_PIN_SET);
 8000af0:	2201      	movs	r2, #1
 8000af2:	2108      	movs	r1, #8
 8000af4:	48a2      	ldr	r0, [pc, #648]	; (8000d80 <Display7Seg1+0x308>)
 8000af6:	f001 fbbe 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_5_GPIO_Port, SEG1_5_Pin, GPIO_PIN_SET);
 8000afa:	2201      	movs	r2, #1
 8000afc:	2110      	movs	r1, #16
 8000afe:	48a0      	ldr	r0, [pc, #640]	; (8000d80 <Display7Seg1+0x308>)
 8000b00:	f001 fbb9 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_6_GPIO_Port, SEG1_6_Pin, GPIO_PIN_SET);
 8000b04:	2201      	movs	r2, #1
 8000b06:	2120      	movs	r1, #32
 8000b08:	489d      	ldr	r0, [pc, #628]	; (8000d80 <Display7Seg1+0x308>)
 8000b0a:	f001 fbb4 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_7_GPIO_Port, SEG1_7_Pin, GPIO_PIN_SET);
 8000b0e:	2201      	movs	r2, #1
 8000b10:	2140      	movs	r1, #64	; 0x40
 8000b12:	489b      	ldr	r0, [pc, #620]	; (8000d80 <Display7Seg1+0x308>)
 8000b14:	f001 fbaf 	bl	8002276 <HAL_GPIO_WritePin>
		}
	if(x == 2){
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	2b02      	cmp	r3, #2
 8000b1c:	d122      	bne.n	8000b64 <Display7Seg1+0xec>
		HAL_GPIO_WritePin(SEG1_1_GPIO_Port, SEG1_1_Pin, GPIO_PIN_RESET);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	2101      	movs	r1, #1
 8000b22:	4897      	ldr	r0, [pc, #604]	; (8000d80 <Display7Seg1+0x308>)
 8000b24:	f001 fba7 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_2_GPIO_Port, SEG1_2_Pin, GPIO_PIN_RESET);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	2102      	movs	r1, #2
 8000b2c:	4894      	ldr	r0, [pc, #592]	; (8000d80 <Display7Seg1+0x308>)
 8000b2e:	f001 fba2 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_3_GPIO_Port, SEG1_3_Pin, GPIO_PIN_SET);
 8000b32:	2201      	movs	r2, #1
 8000b34:	2104      	movs	r1, #4
 8000b36:	4892      	ldr	r0, [pc, #584]	; (8000d80 <Display7Seg1+0x308>)
 8000b38:	f001 fb9d 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_4_GPIO_Port, SEG1_4_Pin, GPIO_PIN_RESET);
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	2108      	movs	r1, #8
 8000b40:	488f      	ldr	r0, [pc, #572]	; (8000d80 <Display7Seg1+0x308>)
 8000b42:	f001 fb98 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_5_GPIO_Port, SEG1_5_Pin, GPIO_PIN_RESET);
 8000b46:	2200      	movs	r2, #0
 8000b48:	2110      	movs	r1, #16
 8000b4a:	488d      	ldr	r0, [pc, #564]	; (8000d80 <Display7Seg1+0x308>)
 8000b4c:	f001 fb93 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_6_GPIO_Port, SEG1_6_Pin, GPIO_PIN_SET);
 8000b50:	2201      	movs	r2, #1
 8000b52:	2120      	movs	r1, #32
 8000b54:	488a      	ldr	r0, [pc, #552]	; (8000d80 <Display7Seg1+0x308>)
 8000b56:	f001 fb8e 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_7_GPIO_Port, SEG1_7_Pin, GPIO_PIN_RESET);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	2140      	movs	r1, #64	; 0x40
 8000b5e:	4888      	ldr	r0, [pc, #544]	; (8000d80 <Display7Seg1+0x308>)
 8000b60:	f001 fb89 	bl	8002276 <HAL_GPIO_WritePin>
		}
	if(x == 3){
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	2b03      	cmp	r3, #3
 8000b68:	d122      	bne.n	8000bb0 <Display7Seg1+0x138>
		HAL_GPIO_WritePin(SEG1_1_GPIO_Port, SEG1_1_Pin, GPIO_PIN_RESET);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2101      	movs	r1, #1
 8000b6e:	4884      	ldr	r0, [pc, #528]	; (8000d80 <Display7Seg1+0x308>)
 8000b70:	f001 fb81 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_2_GPIO_Port, SEG1_2_Pin, GPIO_PIN_RESET);
 8000b74:	2200      	movs	r2, #0
 8000b76:	2102      	movs	r1, #2
 8000b78:	4881      	ldr	r0, [pc, #516]	; (8000d80 <Display7Seg1+0x308>)
 8000b7a:	f001 fb7c 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_3_GPIO_Port, SEG1_3_Pin, GPIO_PIN_RESET);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2104      	movs	r1, #4
 8000b82:	487f      	ldr	r0, [pc, #508]	; (8000d80 <Display7Seg1+0x308>)
 8000b84:	f001 fb77 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_4_GPIO_Port, SEG1_4_Pin, GPIO_PIN_RESET);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	2108      	movs	r1, #8
 8000b8c:	487c      	ldr	r0, [pc, #496]	; (8000d80 <Display7Seg1+0x308>)
 8000b8e:	f001 fb72 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_5_GPIO_Port, SEG1_5_Pin, GPIO_PIN_SET);
 8000b92:	2201      	movs	r2, #1
 8000b94:	2110      	movs	r1, #16
 8000b96:	487a      	ldr	r0, [pc, #488]	; (8000d80 <Display7Seg1+0x308>)
 8000b98:	f001 fb6d 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_6_GPIO_Port, SEG1_6_Pin, GPIO_PIN_SET);
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	2120      	movs	r1, #32
 8000ba0:	4877      	ldr	r0, [pc, #476]	; (8000d80 <Display7Seg1+0x308>)
 8000ba2:	f001 fb68 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_7_GPIO_Port, SEG1_7_Pin, GPIO_PIN_RESET);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	2140      	movs	r1, #64	; 0x40
 8000baa:	4875      	ldr	r0, [pc, #468]	; (8000d80 <Display7Seg1+0x308>)
 8000bac:	f001 fb63 	bl	8002276 <HAL_GPIO_WritePin>
		}
	if(x == 4){
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2b04      	cmp	r3, #4
 8000bb4:	d122      	bne.n	8000bfc <Display7Seg1+0x184>
		HAL_GPIO_WritePin(SEG1_1_GPIO_Port, SEG1_1_Pin, GPIO_PIN_SET);
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	2101      	movs	r1, #1
 8000bba:	4871      	ldr	r0, [pc, #452]	; (8000d80 <Display7Seg1+0x308>)
 8000bbc:	f001 fb5b 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_2_GPIO_Port, SEG1_2_Pin, GPIO_PIN_RESET);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	2102      	movs	r1, #2
 8000bc4:	486e      	ldr	r0, [pc, #440]	; (8000d80 <Display7Seg1+0x308>)
 8000bc6:	f001 fb56 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_3_GPIO_Port, SEG1_3_Pin, GPIO_PIN_RESET);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	2104      	movs	r1, #4
 8000bce:	486c      	ldr	r0, [pc, #432]	; (8000d80 <Display7Seg1+0x308>)
 8000bd0:	f001 fb51 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_4_GPIO_Port, SEG1_4_Pin, GPIO_PIN_SET);
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	2108      	movs	r1, #8
 8000bd8:	4869      	ldr	r0, [pc, #420]	; (8000d80 <Display7Seg1+0x308>)
 8000bda:	f001 fb4c 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_5_GPIO_Port, SEG1_5_Pin, GPIO_PIN_SET);
 8000bde:	2201      	movs	r2, #1
 8000be0:	2110      	movs	r1, #16
 8000be2:	4867      	ldr	r0, [pc, #412]	; (8000d80 <Display7Seg1+0x308>)
 8000be4:	f001 fb47 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_6_GPIO_Port, SEG1_6_Pin, GPIO_PIN_RESET);
 8000be8:	2200      	movs	r2, #0
 8000bea:	2120      	movs	r1, #32
 8000bec:	4864      	ldr	r0, [pc, #400]	; (8000d80 <Display7Seg1+0x308>)
 8000bee:	f001 fb42 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_7_GPIO_Port, SEG1_7_Pin, GPIO_PIN_RESET);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	2140      	movs	r1, #64	; 0x40
 8000bf6:	4862      	ldr	r0, [pc, #392]	; (8000d80 <Display7Seg1+0x308>)
 8000bf8:	f001 fb3d 	bl	8002276 <HAL_GPIO_WritePin>
		}
	if(x == 5){
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2b05      	cmp	r3, #5
 8000c00:	d122      	bne.n	8000c48 <Display7Seg1+0x1d0>
		HAL_GPIO_WritePin(SEG1_1_GPIO_Port, SEG1_1_Pin, GPIO_PIN_RESET);
 8000c02:	2200      	movs	r2, #0
 8000c04:	2101      	movs	r1, #1
 8000c06:	485e      	ldr	r0, [pc, #376]	; (8000d80 <Display7Seg1+0x308>)
 8000c08:	f001 fb35 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_2_GPIO_Port, SEG1_2_Pin, GPIO_PIN_SET);
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	2102      	movs	r1, #2
 8000c10:	485b      	ldr	r0, [pc, #364]	; (8000d80 <Display7Seg1+0x308>)
 8000c12:	f001 fb30 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_3_GPIO_Port, SEG1_3_Pin, GPIO_PIN_RESET);
 8000c16:	2200      	movs	r2, #0
 8000c18:	2104      	movs	r1, #4
 8000c1a:	4859      	ldr	r0, [pc, #356]	; (8000d80 <Display7Seg1+0x308>)
 8000c1c:	f001 fb2b 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_4_GPIO_Port, SEG1_4_Pin, GPIO_PIN_RESET);
 8000c20:	2200      	movs	r2, #0
 8000c22:	2108      	movs	r1, #8
 8000c24:	4856      	ldr	r0, [pc, #344]	; (8000d80 <Display7Seg1+0x308>)
 8000c26:	f001 fb26 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_5_GPIO_Port, SEG1_5_Pin, GPIO_PIN_SET);
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	2110      	movs	r1, #16
 8000c2e:	4854      	ldr	r0, [pc, #336]	; (8000d80 <Display7Seg1+0x308>)
 8000c30:	f001 fb21 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_6_GPIO_Port, SEG1_6_Pin, GPIO_PIN_RESET);
 8000c34:	2200      	movs	r2, #0
 8000c36:	2120      	movs	r1, #32
 8000c38:	4851      	ldr	r0, [pc, #324]	; (8000d80 <Display7Seg1+0x308>)
 8000c3a:	f001 fb1c 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_7_GPIO_Port, SEG1_7_Pin, GPIO_PIN_RESET);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2140      	movs	r1, #64	; 0x40
 8000c42:	484f      	ldr	r0, [pc, #316]	; (8000d80 <Display7Seg1+0x308>)
 8000c44:	f001 fb17 	bl	8002276 <HAL_GPIO_WritePin>
		}
	if(x == 6){
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2b06      	cmp	r3, #6
 8000c4c:	d122      	bne.n	8000c94 <Display7Seg1+0x21c>
		HAL_GPIO_WritePin(SEG1_1_GPIO_Port, SEG1_1_Pin, GPIO_PIN_RESET);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	2101      	movs	r1, #1
 8000c52:	484b      	ldr	r0, [pc, #300]	; (8000d80 <Display7Seg1+0x308>)
 8000c54:	f001 fb0f 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_2_GPIO_Port, SEG1_2_Pin, GPIO_PIN_SET);
 8000c58:	2201      	movs	r2, #1
 8000c5a:	2102      	movs	r1, #2
 8000c5c:	4848      	ldr	r0, [pc, #288]	; (8000d80 <Display7Seg1+0x308>)
 8000c5e:	f001 fb0a 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_3_GPIO_Port, SEG1_3_Pin, GPIO_PIN_RESET);
 8000c62:	2200      	movs	r2, #0
 8000c64:	2104      	movs	r1, #4
 8000c66:	4846      	ldr	r0, [pc, #280]	; (8000d80 <Display7Seg1+0x308>)
 8000c68:	f001 fb05 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_4_GPIO_Port, SEG1_4_Pin, GPIO_PIN_RESET);
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	2108      	movs	r1, #8
 8000c70:	4843      	ldr	r0, [pc, #268]	; (8000d80 <Display7Seg1+0x308>)
 8000c72:	f001 fb00 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_5_GPIO_Port, SEG1_5_Pin, GPIO_PIN_RESET);
 8000c76:	2200      	movs	r2, #0
 8000c78:	2110      	movs	r1, #16
 8000c7a:	4841      	ldr	r0, [pc, #260]	; (8000d80 <Display7Seg1+0x308>)
 8000c7c:	f001 fafb 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_6_GPIO_Port, SEG1_6_Pin, GPIO_PIN_RESET);
 8000c80:	2200      	movs	r2, #0
 8000c82:	2120      	movs	r1, #32
 8000c84:	483e      	ldr	r0, [pc, #248]	; (8000d80 <Display7Seg1+0x308>)
 8000c86:	f001 faf6 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_7_GPIO_Port, SEG1_7_Pin, GPIO_PIN_RESET);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2140      	movs	r1, #64	; 0x40
 8000c8e:	483c      	ldr	r0, [pc, #240]	; (8000d80 <Display7Seg1+0x308>)
 8000c90:	f001 faf1 	bl	8002276 <HAL_GPIO_WritePin>
		}
	if(x == 7){
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	2b07      	cmp	r3, #7
 8000c98:	d122      	bne.n	8000ce0 <Display7Seg1+0x268>
		HAL_GPIO_WritePin(SEG1_1_GPIO_Port, SEG1_1_Pin, GPIO_PIN_RESET);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2101      	movs	r1, #1
 8000c9e:	4838      	ldr	r0, [pc, #224]	; (8000d80 <Display7Seg1+0x308>)
 8000ca0:	f001 fae9 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_2_GPIO_Port, SEG1_2_Pin, GPIO_PIN_RESET);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	2102      	movs	r1, #2
 8000ca8:	4835      	ldr	r0, [pc, #212]	; (8000d80 <Display7Seg1+0x308>)
 8000caa:	f001 fae4 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_3_GPIO_Port, SEG1_3_Pin, GPIO_PIN_RESET);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	2104      	movs	r1, #4
 8000cb2:	4833      	ldr	r0, [pc, #204]	; (8000d80 <Display7Seg1+0x308>)
 8000cb4:	f001 fadf 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_4_GPIO_Port, SEG1_4_Pin, GPIO_PIN_SET);
 8000cb8:	2201      	movs	r2, #1
 8000cba:	2108      	movs	r1, #8
 8000cbc:	4830      	ldr	r0, [pc, #192]	; (8000d80 <Display7Seg1+0x308>)
 8000cbe:	f001 fada 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_5_GPIO_Port, SEG1_5_Pin, GPIO_PIN_SET);
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	2110      	movs	r1, #16
 8000cc6:	482e      	ldr	r0, [pc, #184]	; (8000d80 <Display7Seg1+0x308>)
 8000cc8:	f001 fad5 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_6_GPIO_Port, SEG1_6_Pin, GPIO_PIN_SET);
 8000ccc:	2201      	movs	r2, #1
 8000cce:	2120      	movs	r1, #32
 8000cd0:	482b      	ldr	r0, [pc, #172]	; (8000d80 <Display7Seg1+0x308>)
 8000cd2:	f001 fad0 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_7_GPIO_Port, SEG1_7_Pin, GPIO_PIN_SET);
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	2140      	movs	r1, #64	; 0x40
 8000cda:	4829      	ldr	r0, [pc, #164]	; (8000d80 <Display7Seg1+0x308>)
 8000cdc:	f001 facb 	bl	8002276 <HAL_GPIO_WritePin>
		}
	if(x == 8){
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	2b08      	cmp	r3, #8
 8000ce4:	d122      	bne.n	8000d2c <Display7Seg1+0x2b4>
		HAL_GPIO_WritePin(SEG1_1_GPIO_Port, SEG1_1_Pin, GPIO_PIN_RESET);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	2101      	movs	r1, #1
 8000cea:	4825      	ldr	r0, [pc, #148]	; (8000d80 <Display7Seg1+0x308>)
 8000cec:	f001 fac3 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_2_GPIO_Port, SEG1_2_Pin, GPIO_PIN_RESET);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	2102      	movs	r1, #2
 8000cf4:	4822      	ldr	r0, [pc, #136]	; (8000d80 <Display7Seg1+0x308>)
 8000cf6:	f001 fabe 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_3_GPIO_Port, SEG1_3_Pin, GPIO_PIN_RESET);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2104      	movs	r1, #4
 8000cfe:	4820      	ldr	r0, [pc, #128]	; (8000d80 <Display7Seg1+0x308>)
 8000d00:	f001 fab9 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_4_GPIO_Port, SEG1_4_Pin, GPIO_PIN_RESET);
 8000d04:	2200      	movs	r2, #0
 8000d06:	2108      	movs	r1, #8
 8000d08:	481d      	ldr	r0, [pc, #116]	; (8000d80 <Display7Seg1+0x308>)
 8000d0a:	f001 fab4 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_5_GPIO_Port, SEG1_5_Pin, GPIO_PIN_RESET);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	2110      	movs	r1, #16
 8000d12:	481b      	ldr	r0, [pc, #108]	; (8000d80 <Display7Seg1+0x308>)
 8000d14:	f001 faaf 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_6_GPIO_Port, SEG1_6_Pin, GPIO_PIN_RESET);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	2120      	movs	r1, #32
 8000d1c:	4818      	ldr	r0, [pc, #96]	; (8000d80 <Display7Seg1+0x308>)
 8000d1e:	f001 faaa 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_7_GPIO_Port, SEG1_7_Pin, GPIO_PIN_RESET);
 8000d22:	2200      	movs	r2, #0
 8000d24:	2140      	movs	r1, #64	; 0x40
 8000d26:	4816      	ldr	r0, [pc, #88]	; (8000d80 <Display7Seg1+0x308>)
 8000d28:	f001 faa5 	bl	8002276 <HAL_GPIO_WritePin>
			}
	if(x == 9){
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	2b09      	cmp	r3, #9
 8000d30:	d122      	bne.n	8000d78 <Display7Seg1+0x300>
		HAL_GPIO_WritePin(SEG1_1_GPIO_Port, SEG1_1_Pin, GPIO_PIN_RESET);
 8000d32:	2200      	movs	r2, #0
 8000d34:	2101      	movs	r1, #1
 8000d36:	4812      	ldr	r0, [pc, #72]	; (8000d80 <Display7Seg1+0x308>)
 8000d38:	f001 fa9d 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_2_GPIO_Port, SEG1_2_Pin, GPIO_PIN_RESET);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2102      	movs	r1, #2
 8000d40:	480f      	ldr	r0, [pc, #60]	; (8000d80 <Display7Seg1+0x308>)
 8000d42:	f001 fa98 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_3_GPIO_Port, SEG1_3_Pin, GPIO_PIN_RESET);
 8000d46:	2200      	movs	r2, #0
 8000d48:	2104      	movs	r1, #4
 8000d4a:	480d      	ldr	r0, [pc, #52]	; (8000d80 <Display7Seg1+0x308>)
 8000d4c:	f001 fa93 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_4_GPIO_Port, SEG1_4_Pin, GPIO_PIN_RESET);
 8000d50:	2200      	movs	r2, #0
 8000d52:	2108      	movs	r1, #8
 8000d54:	480a      	ldr	r0, [pc, #40]	; (8000d80 <Display7Seg1+0x308>)
 8000d56:	f001 fa8e 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_5_GPIO_Port, SEG1_5_Pin, GPIO_PIN_SET);
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	2110      	movs	r1, #16
 8000d5e:	4808      	ldr	r0, [pc, #32]	; (8000d80 <Display7Seg1+0x308>)
 8000d60:	f001 fa89 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_6_GPIO_Port, SEG1_6_Pin, GPIO_PIN_RESET);
 8000d64:	2200      	movs	r2, #0
 8000d66:	2120      	movs	r1, #32
 8000d68:	4805      	ldr	r0, [pc, #20]	; (8000d80 <Display7Seg1+0x308>)
 8000d6a:	f001 fa84 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_7_GPIO_Port, SEG1_7_Pin, GPIO_PIN_RESET);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2140      	movs	r1, #64	; 0x40
 8000d72:	4803      	ldr	r0, [pc, #12]	; (8000d80 <Display7Seg1+0x308>)
 8000d74:	f001 fa7f 	bl	8002276 <HAL_GPIO_WritePin>
	}
}
 8000d78:	bf00      	nop
 8000d7a:	3708      	adds	r7, #8
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	40010800 	.word	0x40010800

08000d84 <Display7Seg2>:
void Display7Seg2(int x){
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
	if(x == 0){
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d128      	bne.n	8000de4 <Display7Seg2+0x60>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000d92:	2200      	movs	r2, #0
 8000d94:	2180      	movs	r1, #128	; 0x80
 8000d96:	48d2      	ldr	r0, [pc, #840]	; (80010e0 <Display7Seg2+0x35c>)
 8000d98:	f001 fa6d 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000da2:	48cf      	ldr	r0, [pc, #828]	; (80010e0 <Display7Seg2+0x35c>)
 8000da4:	f001 fa67 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8000da8:	2200      	movs	r2, #0
 8000daa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dae:	48cc      	ldr	r0, [pc, #816]	; (80010e0 <Display7Seg2+0x35c>)
 8000db0:	f001 fa61 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8000db4:	2200      	movs	r2, #0
 8000db6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dba:	48c9      	ldr	r0, [pc, #804]	; (80010e0 <Display7Seg2+0x35c>)
 8000dbc:	f001 fa5b 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_RESET);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dc6:	48c6      	ldr	r0, [pc, #792]	; (80010e0 <Display7Seg2+0x35c>)
 8000dc8:	f001 fa55 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 8000dcc:	2200      	movs	r2, #0
 8000dce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dd2:	48c3      	ldr	r0, [pc, #780]	; (80010e0 <Display7Seg2+0x35c>)
 8000dd4:	f001 fa4f 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_SET);
 8000dd8:	2201      	movs	r2, #1
 8000dda:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dde:	48c0      	ldr	r0, [pc, #768]	; (80010e0 <Display7Seg2+0x35c>)
 8000de0:	f001 fa49 	bl	8002276 <HAL_GPIO_WritePin>
	}
	if(x == 1){
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2b01      	cmp	r3, #1
 8000de8:	d128      	bne.n	8000e3c <Display7Seg2+0xb8>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000dea:	2201      	movs	r2, #1
 8000dec:	2180      	movs	r1, #128	; 0x80
 8000dee:	48bc      	ldr	r0, [pc, #752]	; (80010e0 <Display7Seg2+0x35c>)
 8000df0:	f001 fa41 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000df4:	2200      	movs	r2, #0
 8000df6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dfa:	48b9      	ldr	r0, [pc, #740]	; (80010e0 <Display7Seg2+0x35c>)
 8000dfc:	f001 fa3b 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8000e00:	2200      	movs	r2, #0
 8000e02:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e06:	48b6      	ldr	r0, [pc, #728]	; (80010e0 <Display7Seg2+0x35c>)
 8000e08:	f001 fa35 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e12:	48b3      	ldr	r0, [pc, #716]	; (80010e0 <Display7Seg2+0x35c>)
 8000e14:	f001 fa2f 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_SET);
 8000e18:	2201      	movs	r2, #1
 8000e1a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e1e:	48b0      	ldr	r0, [pc, #704]	; (80010e0 <Display7Seg2+0x35c>)
 8000e20:	f001 fa29 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_SET);
 8000e24:	2201      	movs	r2, #1
 8000e26:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e2a:	48ad      	ldr	r0, [pc, #692]	; (80010e0 <Display7Seg2+0x35c>)
 8000e2c:	f001 fa23 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_SET);
 8000e30:	2201      	movs	r2, #1
 8000e32:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e36:	48aa      	ldr	r0, [pc, #680]	; (80010e0 <Display7Seg2+0x35c>)
 8000e38:	f001 fa1d 	bl	8002276 <HAL_GPIO_WritePin>
		}
	if(x == 2){
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2b02      	cmp	r3, #2
 8000e40:	d128      	bne.n	8000e94 <Display7Seg2+0x110>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000e42:	2200      	movs	r2, #0
 8000e44:	2180      	movs	r1, #128	; 0x80
 8000e46:	48a6      	ldr	r0, [pc, #664]	; (80010e0 <Display7Seg2+0x35c>)
 8000e48:	f001 fa15 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e52:	48a3      	ldr	r0, [pc, #652]	; (80010e0 <Display7Seg2+0x35c>)
 8000e54:	f001 fa0f 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 8000e58:	2201      	movs	r2, #1
 8000e5a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e5e:	48a0      	ldr	r0, [pc, #640]	; (80010e0 <Display7Seg2+0x35c>)
 8000e60:	f001 fa09 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8000e64:	2200      	movs	r2, #0
 8000e66:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e6a:	489d      	ldr	r0, [pc, #628]	; (80010e0 <Display7Seg2+0x35c>)
 8000e6c:	f001 fa03 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_RESET);
 8000e70:	2200      	movs	r2, #0
 8000e72:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e76:	489a      	ldr	r0, [pc, #616]	; (80010e0 <Display7Seg2+0x35c>)
 8000e78:	f001 f9fd 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_SET);
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e82:	4897      	ldr	r0, [pc, #604]	; (80010e0 <Display7Seg2+0x35c>)
 8000e84:	f001 f9f7 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_RESET);
 8000e88:	2200      	movs	r2, #0
 8000e8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e8e:	4894      	ldr	r0, [pc, #592]	; (80010e0 <Display7Seg2+0x35c>)
 8000e90:	f001 f9f1 	bl	8002276 <HAL_GPIO_WritePin>
		}
	if(x == 3){
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2b03      	cmp	r3, #3
 8000e98:	d128      	bne.n	8000eec <Display7Seg2+0x168>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	2180      	movs	r1, #128	; 0x80
 8000e9e:	4890      	ldr	r0, [pc, #576]	; (80010e0 <Display7Seg2+0x35c>)
 8000ea0:	f001 f9e9 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000eaa:	488d      	ldr	r0, [pc, #564]	; (80010e0 <Display7Seg2+0x35c>)
 8000eac:	f001 f9e3 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000eb6:	488a      	ldr	r0, [pc, #552]	; (80010e0 <Display7Seg2+0x35c>)
 8000eb8:	f001 f9dd 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ec2:	4887      	ldr	r0, [pc, #540]	; (80010e0 <Display7Seg2+0x35c>)
 8000ec4:	f001 f9d7 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_SET);
 8000ec8:	2201      	movs	r2, #1
 8000eca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ece:	4884      	ldr	r0, [pc, #528]	; (80010e0 <Display7Seg2+0x35c>)
 8000ed0:	f001 f9d1 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_SET);
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000eda:	4881      	ldr	r0, [pc, #516]	; (80010e0 <Display7Seg2+0x35c>)
 8000edc:	f001 f9cb 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_RESET);
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ee6:	487e      	ldr	r0, [pc, #504]	; (80010e0 <Display7Seg2+0x35c>)
 8000ee8:	f001 f9c5 	bl	8002276 <HAL_GPIO_WritePin>
		}
	if(x == 4){
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2b04      	cmp	r3, #4
 8000ef0:	d128      	bne.n	8000f44 <Display7Seg2+0x1c0>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	2180      	movs	r1, #128	; 0x80
 8000ef6:	487a      	ldr	r0, [pc, #488]	; (80010e0 <Display7Seg2+0x35c>)
 8000ef8:	f001 f9bd 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000efc:	2200      	movs	r2, #0
 8000efe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f02:	4877      	ldr	r0, [pc, #476]	; (80010e0 <Display7Seg2+0x35c>)
 8000f04:	f001 f9b7 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8000f08:	2200      	movs	r2, #0
 8000f0a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f0e:	4874      	ldr	r0, [pc, #464]	; (80010e0 <Display7Seg2+0x35c>)
 8000f10:	f001 f9b1 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 8000f14:	2201      	movs	r2, #1
 8000f16:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f1a:	4871      	ldr	r0, [pc, #452]	; (80010e0 <Display7Seg2+0x35c>)
 8000f1c:	f001 f9ab 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_SET);
 8000f20:	2201      	movs	r2, #1
 8000f22:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f26:	486e      	ldr	r0, [pc, #440]	; (80010e0 <Display7Seg2+0x35c>)
 8000f28:	f001 f9a5 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f32:	486b      	ldr	r0, [pc, #428]	; (80010e0 <Display7Seg2+0x35c>)
 8000f34:	f001 f99f 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_RESET);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f3e:	4868      	ldr	r0, [pc, #416]	; (80010e0 <Display7Seg2+0x35c>)
 8000f40:	f001 f999 	bl	8002276 <HAL_GPIO_WritePin>
		}
	if(x == 5){
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2b05      	cmp	r3, #5
 8000f48:	d128      	bne.n	8000f9c <Display7Seg2+0x218>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	2180      	movs	r1, #128	; 0x80
 8000f4e:	4864      	ldr	r0, [pc, #400]	; (80010e0 <Display7Seg2+0x35c>)
 8000f50:	f001 f991 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000f54:	2201      	movs	r2, #1
 8000f56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f5a:	4861      	ldr	r0, [pc, #388]	; (80010e0 <Display7Seg2+0x35c>)
 8000f5c:	f001 f98b 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8000f60:	2200      	movs	r2, #0
 8000f62:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f66:	485e      	ldr	r0, [pc, #376]	; (80010e0 <Display7Seg2+0x35c>)
 8000f68:	f001 f985 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f72:	485b      	ldr	r0, [pc, #364]	; (80010e0 <Display7Seg2+0x35c>)
 8000f74:	f001 f97f 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_SET);
 8000f78:	2201      	movs	r2, #1
 8000f7a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f7e:	4858      	ldr	r0, [pc, #352]	; (80010e0 <Display7Seg2+0x35c>)
 8000f80:	f001 f979 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 8000f84:	2200      	movs	r2, #0
 8000f86:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f8a:	4855      	ldr	r0, [pc, #340]	; (80010e0 <Display7Seg2+0x35c>)
 8000f8c:	f001 f973 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_RESET);
 8000f90:	2200      	movs	r2, #0
 8000f92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f96:	4852      	ldr	r0, [pc, #328]	; (80010e0 <Display7Seg2+0x35c>)
 8000f98:	f001 f96d 	bl	8002276 <HAL_GPIO_WritePin>
		}
	if(x == 6){
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2b06      	cmp	r3, #6
 8000fa0:	d128      	bne.n	8000ff4 <Display7Seg2+0x270>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	2180      	movs	r1, #128	; 0x80
 8000fa6:	484e      	ldr	r0, [pc, #312]	; (80010e0 <Display7Seg2+0x35c>)
 8000fa8:	f001 f965 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000fac:	2201      	movs	r2, #1
 8000fae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fb2:	484b      	ldr	r0, [pc, #300]	; (80010e0 <Display7Seg2+0x35c>)
 8000fb4:	f001 f95f 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fbe:	4848      	ldr	r0, [pc, #288]	; (80010e0 <Display7Seg2+0x35c>)
 8000fc0:	f001 f959 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fca:	4845      	ldr	r0, [pc, #276]	; (80010e0 <Display7Seg2+0x35c>)
 8000fcc:	f001 f953 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_RESET);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fd6:	4842      	ldr	r0, [pc, #264]	; (80010e0 <Display7Seg2+0x35c>)
 8000fd8:	f001 f94d 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fe2:	483f      	ldr	r0, [pc, #252]	; (80010e0 <Display7Seg2+0x35c>)
 8000fe4:	f001 f947 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_RESET);
 8000fe8:	2200      	movs	r2, #0
 8000fea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fee:	483c      	ldr	r0, [pc, #240]	; (80010e0 <Display7Seg2+0x35c>)
 8000ff0:	f001 f941 	bl	8002276 <HAL_GPIO_WritePin>
		}
	if(x == 7){
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2b07      	cmp	r3, #7
 8000ff8:	d128      	bne.n	800104c <Display7Seg2+0x2c8>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	2180      	movs	r1, #128	; 0x80
 8000ffe:	4838      	ldr	r0, [pc, #224]	; (80010e0 <Display7Seg2+0x35c>)
 8001000:	f001 f939 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8001004:	2200      	movs	r2, #0
 8001006:	f44f 7180 	mov.w	r1, #256	; 0x100
 800100a:	4835      	ldr	r0, [pc, #212]	; (80010e0 <Display7Seg2+0x35c>)
 800100c:	f001 f933 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8001010:	2200      	movs	r2, #0
 8001012:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001016:	4832      	ldr	r0, [pc, #200]	; (80010e0 <Display7Seg2+0x35c>)
 8001018:	f001 f92d 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 800101c:	2201      	movs	r2, #1
 800101e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001022:	482f      	ldr	r0, [pc, #188]	; (80010e0 <Display7Seg2+0x35c>)
 8001024:	f001 f927 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_SET);
 8001028:	2201      	movs	r2, #1
 800102a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800102e:	482c      	ldr	r0, [pc, #176]	; (80010e0 <Display7Seg2+0x35c>)
 8001030:	f001 f921 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_SET);
 8001034:	2201      	movs	r2, #1
 8001036:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800103a:	4829      	ldr	r0, [pc, #164]	; (80010e0 <Display7Seg2+0x35c>)
 800103c:	f001 f91b 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_SET);
 8001040:	2201      	movs	r2, #1
 8001042:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001046:	4826      	ldr	r0, [pc, #152]	; (80010e0 <Display7Seg2+0x35c>)
 8001048:	f001 f915 	bl	8002276 <HAL_GPIO_WritePin>
		}
	if(x == 8){
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2b08      	cmp	r3, #8
 8001050:	d128      	bne.n	80010a4 <Display7Seg2+0x320>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001052:	2200      	movs	r2, #0
 8001054:	2180      	movs	r1, #128	; 0x80
 8001056:	4822      	ldr	r0, [pc, #136]	; (80010e0 <Display7Seg2+0x35c>)
 8001058:	f001 f90d 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 800105c:	2200      	movs	r2, #0
 800105e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001062:	481f      	ldr	r0, [pc, #124]	; (80010e0 <Display7Seg2+0x35c>)
 8001064:	f001 f907 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8001068:	2200      	movs	r2, #0
 800106a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800106e:	481c      	ldr	r0, [pc, #112]	; (80010e0 <Display7Seg2+0x35c>)
 8001070:	f001 f901 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8001074:	2200      	movs	r2, #0
 8001076:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800107a:	4819      	ldr	r0, [pc, #100]	; (80010e0 <Display7Seg2+0x35c>)
 800107c:	f001 f8fb 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_RESET);
 8001080:	2200      	movs	r2, #0
 8001082:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001086:	4816      	ldr	r0, [pc, #88]	; (80010e0 <Display7Seg2+0x35c>)
 8001088:	f001 f8f5 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 800108c:	2200      	movs	r2, #0
 800108e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001092:	4813      	ldr	r0, [pc, #76]	; (80010e0 <Display7Seg2+0x35c>)
 8001094:	f001 f8ef 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_RESET);
 8001098:	2200      	movs	r2, #0
 800109a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800109e:	4810      	ldr	r0, [pc, #64]	; (80010e0 <Display7Seg2+0x35c>)
 80010a0:	f001 f8e9 	bl	8002276 <HAL_GPIO_WritePin>
			}
	if(x == 9){
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2b09      	cmp	r3, #9
 80010a8:	d12b      	bne.n	8001102 <Display7Seg2+0x37e>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80010aa:	2200      	movs	r2, #0
 80010ac:	2180      	movs	r1, #128	; 0x80
 80010ae:	480c      	ldr	r0, [pc, #48]	; (80010e0 <Display7Seg2+0x35c>)
 80010b0:	f001 f8e1 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80010b4:	2200      	movs	r2, #0
 80010b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010ba:	4809      	ldr	r0, [pc, #36]	; (80010e0 <Display7Seg2+0x35c>)
 80010bc:	f001 f8db 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 80010c0:	2200      	movs	r2, #0
 80010c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010c6:	4806      	ldr	r0, [pc, #24]	; (80010e0 <Display7Seg2+0x35c>)
 80010c8:	f001 f8d5 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 80010cc:	2200      	movs	r2, #0
 80010ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010d2:	4803      	ldr	r0, [pc, #12]	; (80010e0 <Display7Seg2+0x35c>)
 80010d4:	f001 f8cf 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_SET);
 80010d8:	2201      	movs	r2, #1
 80010da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010de:	e001      	b.n	80010e4 <Display7Seg2+0x360>
 80010e0:	40010800 	.word	0x40010800
 80010e4:	4809      	ldr	r0, [pc, #36]	; (800110c <Display7Seg2+0x388>)
 80010e6:	f001 f8c6 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 80010ea:	2200      	movs	r2, #0
 80010ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010f0:	4806      	ldr	r0, [pc, #24]	; (800110c <Display7Seg2+0x388>)
 80010f2:	f001 f8c0 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_RESET);
 80010f6:	2200      	movs	r2, #0
 80010f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010fc:	4803      	ldr	r0, [pc, #12]	; (800110c <Display7Seg2+0x388>)
 80010fe:	f001 f8ba 	bl	8002276 <HAL_GPIO_WritePin>
	}
}
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40010800 	.word	0x40010800

08001110 <Display7Seg3>:
void Display7Seg3(int x){
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
	if(x == 0){
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d129      	bne.n	8001172 <Display7Seg3+0x62>
		HAL_GPIO_WritePin(SEG2_1_GPIO_Port, SEG2_1_Pin, GPIO_PIN_RESET);
 800111e:	2200      	movs	r2, #0
 8001120:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001124:	48d3      	ldr	r0, [pc, #844]	; (8001474 <Display7Seg3+0x364>)
 8001126:	f001 f8a6 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_2_GPIO_Port, SEG2_2_Pin, GPIO_PIN_RESET);
 800112a:	2200      	movs	r2, #0
 800112c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001130:	48d0      	ldr	r0, [pc, #832]	; (8001474 <Display7Seg3+0x364>)
 8001132:	f001 f8a0 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_3_GPIO_Port, SEG2_3_Pin, GPIO_PIN_RESET);
 8001136:	2200      	movs	r2, #0
 8001138:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800113c:	48cd      	ldr	r0, [pc, #820]	; (8001474 <Display7Seg3+0x364>)
 800113e:	f001 f89a 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_4_GPIO_Port, SEG2_4_Pin, GPIO_PIN_RESET);
 8001142:	2200      	movs	r2, #0
 8001144:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001148:	48cb      	ldr	r0, [pc, #812]	; (8001478 <Display7Seg3+0x368>)
 800114a:	f001 f894 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_5_GPIO_Port, SEG2_5_Pin, GPIO_PIN_RESET);
 800114e:	2200      	movs	r2, #0
 8001150:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001154:	48c8      	ldr	r0, [pc, #800]	; (8001478 <Display7Seg3+0x368>)
 8001156:	f001 f88e 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_6_GPIO_Port, SEG2_6_Pin, GPIO_PIN_RESET);
 800115a:	2200      	movs	r2, #0
 800115c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001160:	48c6      	ldr	r0, [pc, #792]	; (800147c <Display7Seg3+0x36c>)
 8001162:	f001 f888 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_7_GPIO_Port, SEG2_7_Pin, GPIO_PIN_SET);
 8001166:	2201      	movs	r2, #1
 8001168:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800116c:	48c3      	ldr	r0, [pc, #780]	; (800147c <Display7Seg3+0x36c>)
 800116e:	f001 f882 	bl	8002276 <HAL_GPIO_WritePin>
	}
	if(x == 1){
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2b01      	cmp	r3, #1
 8001176:	d129      	bne.n	80011cc <Display7Seg3+0xbc>
		HAL_GPIO_WritePin(SEG2_1_GPIO_Port, SEG2_1_Pin, GPIO_PIN_SET);
 8001178:	2201      	movs	r2, #1
 800117a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800117e:	48bd      	ldr	r0, [pc, #756]	; (8001474 <Display7Seg3+0x364>)
 8001180:	f001 f879 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_2_GPIO_Port, SEG2_2_Pin, GPIO_PIN_RESET);
 8001184:	2200      	movs	r2, #0
 8001186:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800118a:	48ba      	ldr	r0, [pc, #744]	; (8001474 <Display7Seg3+0x364>)
 800118c:	f001 f873 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_3_GPIO_Port, SEG2_3_Pin, GPIO_PIN_RESET);
 8001190:	2200      	movs	r2, #0
 8001192:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001196:	48b7      	ldr	r0, [pc, #732]	; (8001474 <Display7Seg3+0x364>)
 8001198:	f001 f86d 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_4_GPIO_Port, SEG2_4_Pin, GPIO_PIN_SET);
 800119c:	2201      	movs	r2, #1
 800119e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011a2:	48b5      	ldr	r0, [pc, #724]	; (8001478 <Display7Seg3+0x368>)
 80011a4:	f001 f867 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_5_GPIO_Port, SEG2_5_Pin, GPIO_PIN_SET);
 80011a8:	2201      	movs	r2, #1
 80011aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011ae:	48b2      	ldr	r0, [pc, #712]	; (8001478 <Display7Seg3+0x368>)
 80011b0:	f001 f861 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_6_GPIO_Port, SEG2_6_Pin, GPIO_PIN_SET);
 80011b4:	2201      	movs	r2, #1
 80011b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011ba:	48b0      	ldr	r0, [pc, #704]	; (800147c <Display7Seg3+0x36c>)
 80011bc:	f001 f85b 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_7_GPIO_Port, SEG2_7_Pin, GPIO_PIN_SET);
 80011c0:	2201      	movs	r2, #1
 80011c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011c6:	48ad      	ldr	r0, [pc, #692]	; (800147c <Display7Seg3+0x36c>)
 80011c8:	f001 f855 	bl	8002276 <HAL_GPIO_WritePin>
		}
	if(x == 2){
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2b02      	cmp	r3, #2
 80011d0:	d129      	bne.n	8001226 <Display7Seg3+0x116>
		HAL_GPIO_WritePin(SEG2_1_GPIO_Port, SEG2_1_Pin, GPIO_PIN_RESET);
 80011d2:	2200      	movs	r2, #0
 80011d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011d8:	48a6      	ldr	r0, [pc, #664]	; (8001474 <Display7Seg3+0x364>)
 80011da:	f001 f84c 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_2_GPIO_Port, SEG2_2_Pin, GPIO_PIN_RESET);
 80011de:	2200      	movs	r2, #0
 80011e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011e4:	48a3      	ldr	r0, [pc, #652]	; (8001474 <Display7Seg3+0x364>)
 80011e6:	f001 f846 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_3_GPIO_Port, SEG2_3_Pin, GPIO_PIN_SET);
 80011ea:	2201      	movs	r2, #1
 80011ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011f0:	48a0      	ldr	r0, [pc, #640]	; (8001474 <Display7Seg3+0x364>)
 80011f2:	f001 f840 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_4_GPIO_Port, SEG2_4_Pin, GPIO_PIN_RESET);
 80011f6:	2200      	movs	r2, #0
 80011f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011fc:	489e      	ldr	r0, [pc, #632]	; (8001478 <Display7Seg3+0x368>)
 80011fe:	f001 f83a 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_5_GPIO_Port, SEG2_5_Pin, GPIO_PIN_RESET);
 8001202:	2200      	movs	r2, #0
 8001204:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001208:	489b      	ldr	r0, [pc, #620]	; (8001478 <Display7Seg3+0x368>)
 800120a:	f001 f834 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_6_GPIO_Port, SEG2_6_Pin, GPIO_PIN_SET);
 800120e:	2201      	movs	r2, #1
 8001210:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001214:	4899      	ldr	r0, [pc, #612]	; (800147c <Display7Seg3+0x36c>)
 8001216:	f001 f82e 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_7_GPIO_Port, SEG2_7_Pin, GPIO_PIN_RESET);
 800121a:	2200      	movs	r2, #0
 800121c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001220:	4896      	ldr	r0, [pc, #600]	; (800147c <Display7Seg3+0x36c>)
 8001222:	f001 f828 	bl	8002276 <HAL_GPIO_WritePin>
		}
	if(x == 3){
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2b03      	cmp	r3, #3
 800122a:	d129      	bne.n	8001280 <Display7Seg3+0x170>
		HAL_GPIO_WritePin(SEG2_1_GPIO_Port, SEG2_1_Pin, GPIO_PIN_RESET);
 800122c:	2200      	movs	r2, #0
 800122e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001232:	4890      	ldr	r0, [pc, #576]	; (8001474 <Display7Seg3+0x364>)
 8001234:	f001 f81f 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_2_GPIO_Port, SEG2_2_Pin, GPIO_PIN_RESET);
 8001238:	2200      	movs	r2, #0
 800123a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800123e:	488d      	ldr	r0, [pc, #564]	; (8001474 <Display7Seg3+0x364>)
 8001240:	f001 f819 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_3_GPIO_Port, SEG2_3_Pin, GPIO_PIN_RESET);
 8001244:	2200      	movs	r2, #0
 8001246:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800124a:	488a      	ldr	r0, [pc, #552]	; (8001474 <Display7Seg3+0x364>)
 800124c:	f001 f813 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_4_GPIO_Port, SEG2_4_Pin, GPIO_PIN_SET);
 8001250:	2201      	movs	r2, #1
 8001252:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001256:	4888      	ldr	r0, [pc, #544]	; (8001478 <Display7Seg3+0x368>)
 8001258:	f001 f80d 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_5_GPIO_Port, SEG2_5_Pin, GPIO_PIN_RESET);
 800125c:	2200      	movs	r2, #0
 800125e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001262:	4885      	ldr	r0, [pc, #532]	; (8001478 <Display7Seg3+0x368>)
 8001264:	f001 f807 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_6_GPIO_Port, SEG2_6_Pin, GPIO_PIN_SET);
 8001268:	2201      	movs	r2, #1
 800126a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800126e:	4883      	ldr	r0, [pc, #524]	; (800147c <Display7Seg3+0x36c>)
 8001270:	f001 f801 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_7_GPIO_Port, SEG2_7_Pin, GPIO_PIN_RESET);
 8001274:	2200      	movs	r2, #0
 8001276:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800127a:	4880      	ldr	r0, [pc, #512]	; (800147c <Display7Seg3+0x36c>)
 800127c:	f000 fffb 	bl	8002276 <HAL_GPIO_WritePin>
		}
	if(x == 4){
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2b04      	cmp	r3, #4
 8001284:	d129      	bne.n	80012da <Display7Seg3+0x1ca>
		HAL_GPIO_WritePin(SEG2_1_GPIO_Port, SEG2_1_Pin, GPIO_PIN_SET);
 8001286:	2201      	movs	r2, #1
 8001288:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800128c:	4879      	ldr	r0, [pc, #484]	; (8001474 <Display7Seg3+0x364>)
 800128e:	f000 fff2 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_2_GPIO_Port, SEG2_2_Pin, GPIO_PIN_RESET);
 8001292:	2200      	movs	r2, #0
 8001294:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001298:	4876      	ldr	r0, [pc, #472]	; (8001474 <Display7Seg3+0x364>)
 800129a:	f000 ffec 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_3_GPIO_Port, SEG2_3_Pin, GPIO_PIN_RESET);
 800129e:	2200      	movs	r2, #0
 80012a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012a4:	4873      	ldr	r0, [pc, #460]	; (8001474 <Display7Seg3+0x364>)
 80012a6:	f000 ffe6 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_4_GPIO_Port, SEG2_4_Pin, GPIO_PIN_SET);
 80012aa:	2201      	movs	r2, #1
 80012ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012b0:	4871      	ldr	r0, [pc, #452]	; (8001478 <Display7Seg3+0x368>)
 80012b2:	f000 ffe0 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_5_GPIO_Port, SEG2_5_Pin, GPIO_PIN_SET);
 80012b6:	2201      	movs	r2, #1
 80012b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012bc:	486e      	ldr	r0, [pc, #440]	; (8001478 <Display7Seg3+0x368>)
 80012be:	f000 ffda 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_6_GPIO_Port, SEG2_6_Pin, GPIO_PIN_RESET);
 80012c2:	2200      	movs	r2, #0
 80012c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012c8:	486c      	ldr	r0, [pc, #432]	; (800147c <Display7Seg3+0x36c>)
 80012ca:	f000 ffd4 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_7_GPIO_Port, SEG2_7_Pin, GPIO_PIN_RESET);
 80012ce:	2200      	movs	r2, #0
 80012d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012d4:	4869      	ldr	r0, [pc, #420]	; (800147c <Display7Seg3+0x36c>)
 80012d6:	f000 ffce 	bl	8002276 <HAL_GPIO_WritePin>
		}
	if(x == 5){
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2b05      	cmp	r3, #5
 80012de:	d129      	bne.n	8001334 <Display7Seg3+0x224>
		HAL_GPIO_WritePin(SEG2_1_GPIO_Port, SEG2_1_Pin, GPIO_PIN_RESET);
 80012e0:	2200      	movs	r2, #0
 80012e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012e6:	4863      	ldr	r0, [pc, #396]	; (8001474 <Display7Seg3+0x364>)
 80012e8:	f000 ffc5 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_2_GPIO_Port, SEG2_2_Pin, GPIO_PIN_SET);
 80012ec:	2201      	movs	r2, #1
 80012ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012f2:	4860      	ldr	r0, [pc, #384]	; (8001474 <Display7Seg3+0x364>)
 80012f4:	f000 ffbf 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_3_GPIO_Port, SEG2_3_Pin, GPIO_PIN_RESET);
 80012f8:	2200      	movs	r2, #0
 80012fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012fe:	485d      	ldr	r0, [pc, #372]	; (8001474 <Display7Seg3+0x364>)
 8001300:	f000 ffb9 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_4_GPIO_Port, SEG2_4_Pin, GPIO_PIN_SET);
 8001304:	2201      	movs	r2, #1
 8001306:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800130a:	485b      	ldr	r0, [pc, #364]	; (8001478 <Display7Seg3+0x368>)
 800130c:	f000 ffb3 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_5_GPIO_Port, SEG2_5_Pin, GPIO_PIN_RESET);
 8001310:	2200      	movs	r2, #0
 8001312:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001316:	4858      	ldr	r0, [pc, #352]	; (8001478 <Display7Seg3+0x368>)
 8001318:	f000 ffad 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_6_GPIO_Port, SEG2_6_Pin, GPIO_PIN_RESET);
 800131c:	2200      	movs	r2, #0
 800131e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001322:	4856      	ldr	r0, [pc, #344]	; (800147c <Display7Seg3+0x36c>)
 8001324:	f000 ffa7 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_7_GPIO_Port, SEG2_7_Pin, GPIO_PIN_RESET);
 8001328:	2200      	movs	r2, #0
 800132a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800132e:	4853      	ldr	r0, [pc, #332]	; (800147c <Display7Seg3+0x36c>)
 8001330:	f000 ffa1 	bl	8002276 <HAL_GPIO_WritePin>
		}
	if(x == 6){
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2b06      	cmp	r3, #6
 8001338:	d129      	bne.n	800138e <Display7Seg3+0x27e>
		HAL_GPIO_WritePin(SEG2_1_GPIO_Port, SEG2_1_Pin, GPIO_PIN_RESET);
 800133a:	2200      	movs	r2, #0
 800133c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001340:	484c      	ldr	r0, [pc, #304]	; (8001474 <Display7Seg3+0x364>)
 8001342:	f000 ff98 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_2_GPIO_Port, SEG2_2_Pin, GPIO_PIN_SET);
 8001346:	2201      	movs	r2, #1
 8001348:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800134c:	4849      	ldr	r0, [pc, #292]	; (8001474 <Display7Seg3+0x364>)
 800134e:	f000 ff92 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_3_GPIO_Port, SEG2_3_Pin, GPIO_PIN_RESET);
 8001352:	2200      	movs	r2, #0
 8001354:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001358:	4846      	ldr	r0, [pc, #280]	; (8001474 <Display7Seg3+0x364>)
 800135a:	f000 ff8c 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_4_GPIO_Port, SEG2_4_Pin, GPIO_PIN_RESET);
 800135e:	2200      	movs	r2, #0
 8001360:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001364:	4844      	ldr	r0, [pc, #272]	; (8001478 <Display7Seg3+0x368>)
 8001366:	f000 ff86 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_5_GPIO_Port, SEG2_5_Pin, GPIO_PIN_RESET);
 800136a:	2200      	movs	r2, #0
 800136c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001370:	4841      	ldr	r0, [pc, #260]	; (8001478 <Display7Seg3+0x368>)
 8001372:	f000 ff80 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_6_GPIO_Port, SEG2_6_Pin, GPIO_PIN_RESET);
 8001376:	2200      	movs	r2, #0
 8001378:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800137c:	483f      	ldr	r0, [pc, #252]	; (800147c <Display7Seg3+0x36c>)
 800137e:	f000 ff7a 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_7_GPIO_Port, SEG2_7_Pin, GPIO_PIN_RESET);
 8001382:	2200      	movs	r2, #0
 8001384:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001388:	483c      	ldr	r0, [pc, #240]	; (800147c <Display7Seg3+0x36c>)
 800138a:	f000 ff74 	bl	8002276 <HAL_GPIO_WritePin>
		}
	if(x == 7){
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2b07      	cmp	r3, #7
 8001392:	d129      	bne.n	80013e8 <Display7Seg3+0x2d8>
		HAL_GPIO_WritePin(SEG2_1_GPIO_Port, SEG2_1_Pin, GPIO_PIN_RESET);
 8001394:	2200      	movs	r2, #0
 8001396:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800139a:	4836      	ldr	r0, [pc, #216]	; (8001474 <Display7Seg3+0x364>)
 800139c:	f000 ff6b 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_2_GPIO_Port, SEG2_2_Pin, GPIO_PIN_RESET);
 80013a0:	2200      	movs	r2, #0
 80013a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013a6:	4833      	ldr	r0, [pc, #204]	; (8001474 <Display7Seg3+0x364>)
 80013a8:	f000 ff65 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_3_GPIO_Port, SEG2_3_Pin, GPIO_PIN_RESET);
 80013ac:	2200      	movs	r2, #0
 80013ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013b2:	4830      	ldr	r0, [pc, #192]	; (8001474 <Display7Seg3+0x364>)
 80013b4:	f000 ff5f 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_4_GPIO_Port, SEG2_4_Pin, GPIO_PIN_SET);
 80013b8:	2201      	movs	r2, #1
 80013ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013be:	482e      	ldr	r0, [pc, #184]	; (8001478 <Display7Seg3+0x368>)
 80013c0:	f000 ff59 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_5_GPIO_Port, SEG2_5_Pin, GPIO_PIN_SET);
 80013c4:	2201      	movs	r2, #1
 80013c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013ca:	482b      	ldr	r0, [pc, #172]	; (8001478 <Display7Seg3+0x368>)
 80013cc:	f000 ff53 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_6_GPIO_Port, SEG2_6_Pin, GPIO_PIN_SET);
 80013d0:	2201      	movs	r2, #1
 80013d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013d6:	4829      	ldr	r0, [pc, #164]	; (800147c <Display7Seg3+0x36c>)
 80013d8:	f000 ff4d 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_7_GPIO_Port, SEG2_7_Pin, GPIO_PIN_SET);
 80013dc:	2201      	movs	r2, #1
 80013de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013e2:	4826      	ldr	r0, [pc, #152]	; (800147c <Display7Seg3+0x36c>)
 80013e4:	f000 ff47 	bl	8002276 <HAL_GPIO_WritePin>
		}
	if(x == 8){
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2b08      	cmp	r3, #8
 80013ec:	d129      	bne.n	8001442 <Display7Seg3+0x332>
		HAL_GPIO_WritePin(SEG2_1_GPIO_Port, SEG2_1_Pin, GPIO_PIN_RESET);
 80013ee:	2200      	movs	r2, #0
 80013f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013f4:	481f      	ldr	r0, [pc, #124]	; (8001474 <Display7Seg3+0x364>)
 80013f6:	f000 ff3e 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_2_GPIO_Port, SEG2_2_Pin, GPIO_PIN_RESET);
 80013fa:	2200      	movs	r2, #0
 80013fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001400:	481c      	ldr	r0, [pc, #112]	; (8001474 <Display7Seg3+0x364>)
 8001402:	f000 ff38 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_3_GPIO_Port, SEG2_3_Pin, GPIO_PIN_RESET);
 8001406:	2200      	movs	r2, #0
 8001408:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800140c:	4819      	ldr	r0, [pc, #100]	; (8001474 <Display7Seg3+0x364>)
 800140e:	f000 ff32 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_4_GPIO_Port, SEG2_4_Pin, GPIO_PIN_RESET);
 8001412:	2200      	movs	r2, #0
 8001414:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001418:	4817      	ldr	r0, [pc, #92]	; (8001478 <Display7Seg3+0x368>)
 800141a:	f000 ff2c 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_5_GPIO_Port, SEG2_5_Pin, GPIO_PIN_RESET);
 800141e:	2200      	movs	r2, #0
 8001420:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001424:	4814      	ldr	r0, [pc, #80]	; (8001478 <Display7Seg3+0x368>)
 8001426:	f000 ff26 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_6_GPIO_Port, SEG2_6_Pin, GPIO_PIN_RESET);
 800142a:	2200      	movs	r2, #0
 800142c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001430:	4812      	ldr	r0, [pc, #72]	; (800147c <Display7Seg3+0x36c>)
 8001432:	f000 ff20 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_7_GPIO_Port, SEG2_7_Pin, GPIO_PIN_RESET);
 8001436:	2200      	movs	r2, #0
 8001438:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800143c:	480f      	ldr	r0, [pc, #60]	; (800147c <Display7Seg3+0x36c>)
 800143e:	f000 ff1a 	bl	8002276 <HAL_GPIO_WritePin>
			}
	if(x == 9){
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2b09      	cmp	r3, #9
 8001446:	d130      	bne.n	80014aa <Display7Seg3+0x39a>
		HAL_GPIO_WritePin(SEG2_1_GPIO_Port, SEG2_1_Pin, GPIO_PIN_RESET);
 8001448:	2200      	movs	r2, #0
 800144a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800144e:	4809      	ldr	r0, [pc, #36]	; (8001474 <Display7Seg3+0x364>)
 8001450:	f000 ff11 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_2_GPIO_Port, SEG2_2_Pin, GPIO_PIN_RESET);
 8001454:	2200      	movs	r2, #0
 8001456:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800145a:	4806      	ldr	r0, [pc, #24]	; (8001474 <Display7Seg3+0x364>)
 800145c:	f000 ff0b 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_3_GPIO_Port, SEG2_3_Pin, GPIO_PIN_RESET);
 8001460:	2200      	movs	r2, #0
 8001462:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001466:	4803      	ldr	r0, [pc, #12]	; (8001474 <Display7Seg3+0x364>)
 8001468:	f000 ff05 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_4_GPIO_Port, SEG2_4_Pin, GPIO_PIN_SET);
 800146c:	2201      	movs	r2, #1
 800146e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001472:	e005      	b.n	8001480 <Display7Seg3+0x370>
 8001474:	40011000 	.word	0x40011000
 8001478:	40010c00 	.word	0x40010c00
 800147c:	40010800 	.word	0x40010800
 8001480:	480c      	ldr	r0, [pc, #48]	; (80014b4 <Display7Seg3+0x3a4>)
 8001482:	f000 fef8 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_5_GPIO_Port, SEG2_5_Pin, GPIO_PIN_RESET);
 8001486:	2200      	movs	r2, #0
 8001488:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800148c:	4809      	ldr	r0, [pc, #36]	; (80014b4 <Display7Seg3+0x3a4>)
 800148e:	f000 fef2 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_6_GPIO_Port, SEG2_6_Pin, GPIO_PIN_RESET);
 8001492:	2200      	movs	r2, #0
 8001494:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001498:	4807      	ldr	r0, [pc, #28]	; (80014b8 <Display7Seg3+0x3a8>)
 800149a:	f000 feec 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_7_GPIO_Port, SEG2_7_Pin, GPIO_PIN_RESET);
 800149e:	2200      	movs	r2, #0
 80014a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014a4:	4804      	ldr	r0, [pc, #16]	; (80014b8 <Display7Seg3+0x3a8>)
 80014a6:	f000 fee6 	bl	8002276 <HAL_GPIO_WritePin>
	}
}
 80014aa:	bf00      	nop
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40010c00 	.word	0x40010c00
 80014b8:	40010800 	.word	0x40010800

080014bc <DisplayClock>:
void DisplayClock(int x){
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
	switch(x){
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d003      	beq.n	80014d2 <DisplayClock+0x16>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d00d      	beq.n	80014ec <DisplayClock+0x30>
	case 1:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
		break;
	default:
		break;
 80014d0:	e019      	b.n	8001506 <DisplayClock+0x4a>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 80014d2:	2200      	movs	r2, #0
 80014d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014d8:	480d      	ldr	r0, [pc, #52]	; (8001510 <DisplayClock+0x54>)
 80014da:	f000 fecc 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 80014de:	2201      	movs	r2, #1
 80014e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014e4:	480a      	ldr	r0, [pc, #40]	; (8001510 <DisplayClock+0x54>)
 80014e6:	f000 fec6 	bl	8002276 <HAL_GPIO_WritePin>
		break;
 80014ea:	e00c      	b.n	8001506 <DisplayClock+0x4a>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 80014ec:	2201      	movs	r2, #1
 80014ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014f2:	4807      	ldr	r0, [pc, #28]	; (8001510 <DisplayClock+0x54>)
 80014f4:	f000 febf 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 80014f8:	2200      	movs	r2, #0
 80014fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014fe:	4804      	ldr	r0, [pc, #16]	; (8001510 <DisplayClock+0x54>)
 8001500:	f000 feb9 	bl	8002276 <HAL_GPIO_WritePin>
		break;
 8001504:	bf00      	nop
	}
}
 8001506:	bf00      	nop
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	40010c00 	.word	0x40010c00

08001514 <DisplayREDX>:
void DisplayREDX(void){
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_X_GPIO_Port, LED_RED_X_Pin, SET);
 8001518:	2201      	movs	r2, #1
 800151a:	2108      	movs	r1, #8
 800151c:	4807      	ldr	r0, [pc, #28]	; (800153c <DisplayREDX+0x28>)
 800151e:	f000 feaa 	bl	8002276 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_X_GPIO_Port, LED_GREEN_X_Pin, RESET);
 8001522:	2200      	movs	r2, #0
 8001524:	2120      	movs	r1, #32
 8001526:	4805      	ldr	r0, [pc, #20]	; (800153c <DisplayREDX+0x28>)
 8001528:	f000 fea5 	bl	8002276 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_X_GPIO_Port, LED_YELLOW_X_Pin, RESET);
 800152c:	2200      	movs	r2, #0
 800152e:	2110      	movs	r1, #16
 8001530:	4802      	ldr	r0, [pc, #8]	; (800153c <DisplayREDX+0x28>)
 8001532:	f000 fea0 	bl	8002276 <HAL_GPIO_WritePin>
}
 8001536:	bf00      	nop
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	40010c00 	.word	0x40010c00

08001540 <DisplayYELLOWX>:
void DisplayYELLOWX(void){
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_X_GPIO_Port, LED_RED_X_Pin, RESET);
 8001544:	2200      	movs	r2, #0
 8001546:	2108      	movs	r1, #8
 8001548:	4807      	ldr	r0, [pc, #28]	; (8001568 <DisplayYELLOWX+0x28>)
 800154a:	f000 fe94 	bl	8002276 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_X_GPIO_Port, LED_GREEN_X_Pin, RESET);
 800154e:	2200      	movs	r2, #0
 8001550:	2120      	movs	r1, #32
 8001552:	4805      	ldr	r0, [pc, #20]	; (8001568 <DisplayYELLOWX+0x28>)
 8001554:	f000 fe8f 	bl	8002276 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_X_GPIO_Port, LED_YELLOW_X_Pin, SET);
 8001558:	2201      	movs	r2, #1
 800155a:	2110      	movs	r1, #16
 800155c:	4802      	ldr	r0, [pc, #8]	; (8001568 <DisplayYELLOWX+0x28>)
 800155e:	f000 fe8a 	bl	8002276 <HAL_GPIO_WritePin>
}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	40010c00 	.word	0x40010c00

0800156c <DisplayGREENX>:
void DisplayGREENX(void){
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_X_GPIO_Port, LED_RED_X_Pin, RESET);
 8001570:	2200      	movs	r2, #0
 8001572:	2108      	movs	r1, #8
 8001574:	4807      	ldr	r0, [pc, #28]	; (8001594 <DisplayGREENX+0x28>)
 8001576:	f000 fe7e 	bl	8002276 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_X_GPIO_Port, LED_GREEN_X_Pin, SET);
 800157a:	2201      	movs	r2, #1
 800157c:	2120      	movs	r1, #32
 800157e:	4805      	ldr	r0, [pc, #20]	; (8001594 <DisplayGREENX+0x28>)
 8001580:	f000 fe79 	bl	8002276 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_X_GPIO_Port, LED_YELLOW_X_Pin, RESET);
 8001584:	2200      	movs	r2, #0
 8001586:	2110      	movs	r1, #16
 8001588:	4802      	ldr	r0, [pc, #8]	; (8001594 <DisplayGREENX+0x28>)
 800158a:	f000 fe74 	bl	8002276 <HAL_GPIO_WritePin>
}
 800158e:	bf00      	nop
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	40010c00 	.word	0x40010c00

08001598 <DisplayREDY>:
void DisplayREDY(void){
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_Y_GPIO_Port, LED_RED_Y_Pin, SET);
 800159c:	2201      	movs	r2, #1
 800159e:	2140      	movs	r1, #64	; 0x40
 80015a0:	4807      	ldr	r0, [pc, #28]	; (80015c0 <DisplayREDY+0x28>)
 80015a2:	f000 fe68 	bl	8002276 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_Y_GPIO_Port, LED_GREEN_Y_Pin, RESET);
 80015a6:	2200      	movs	r2, #0
 80015a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015ac:	4804      	ldr	r0, [pc, #16]	; (80015c0 <DisplayREDY+0x28>)
 80015ae:	f000 fe62 	bl	8002276 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_Y_GPIO_Port, LED_YELLOW_Y_Pin, RESET);
 80015b2:	2200      	movs	r2, #0
 80015b4:	2180      	movs	r1, #128	; 0x80
 80015b6:	4802      	ldr	r0, [pc, #8]	; (80015c0 <DisplayREDY+0x28>)
 80015b8:	f000 fe5d 	bl	8002276 <HAL_GPIO_WritePin>
}
 80015bc:	bf00      	nop
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	40010c00 	.word	0x40010c00

080015c4 <DisplayYELLOWY>:
void DisplayYELLOWY(void){
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_Y_GPIO_Port, LED_RED_Y_Pin, RESET);
 80015c8:	2200      	movs	r2, #0
 80015ca:	2140      	movs	r1, #64	; 0x40
 80015cc:	4807      	ldr	r0, [pc, #28]	; (80015ec <DisplayYELLOWY+0x28>)
 80015ce:	f000 fe52 	bl	8002276 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_Y_GPIO_Port, LED_GREEN_Y_Pin, RESET);
 80015d2:	2200      	movs	r2, #0
 80015d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015d8:	4804      	ldr	r0, [pc, #16]	; (80015ec <DisplayYELLOWY+0x28>)
 80015da:	f000 fe4c 	bl	8002276 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_Y_GPIO_Port, LED_YELLOW_Y_Pin, SET);
 80015de:	2201      	movs	r2, #1
 80015e0:	2180      	movs	r1, #128	; 0x80
 80015e2:	4802      	ldr	r0, [pc, #8]	; (80015ec <DisplayYELLOWY+0x28>)
 80015e4:	f000 fe47 	bl	8002276 <HAL_GPIO_WritePin>
}
 80015e8:	bf00      	nop
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	40010c00 	.word	0x40010c00

080015f0 <DisplayGREENY>:
void DisplayGREENY(void){
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_Y_GPIO_Port, LED_RED_Y_Pin, RESET);
 80015f4:	2200      	movs	r2, #0
 80015f6:	2140      	movs	r1, #64	; 0x40
 80015f8:	4807      	ldr	r0, [pc, #28]	; (8001618 <DisplayGREENY+0x28>)
 80015fa:	f000 fe3c 	bl	8002276 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_Y_GPIO_Port, LED_GREEN_Y_Pin, SET);
 80015fe:	2201      	movs	r2, #1
 8001600:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001604:	4804      	ldr	r0, [pc, #16]	; (8001618 <DisplayGREENY+0x28>)
 8001606:	f000 fe36 	bl	8002276 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_Y_GPIO_Port, LED_YELLOW_Y_Pin, RESET);
 800160a:	2200      	movs	r2, #0
 800160c:	2180      	movs	r1, #128	; 0x80
 800160e:	4802      	ldr	r0, [pc, #8]	; (8001618 <DisplayGREENY+0x28>)
 8001610:	f000 fe31 	bl	8002276 <HAL_GPIO_WritePin>
}
 8001614:	bf00      	nop
 8001616:	bd80      	pop	{r7, pc}
 8001618:	40010c00 	.word	0x40010c00

0800161c <DisplayMAN_RED>:
void DisplayMAN_RED(void){
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_RED_Y_GPIO_Port, LED_RED_Y_Pin);
 8001620:	2140      	movs	r1, #64	; 0x40
 8001622:	4804      	ldr	r0, [pc, #16]	; (8001634 <DisplayMAN_RED+0x18>)
 8001624:	f000 fe3f 	bl	80022a6 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_RED_X_GPIO_Port, LED_RED_X_Pin);
 8001628:	2108      	movs	r1, #8
 800162a:	4802      	ldr	r0, [pc, #8]	; (8001634 <DisplayMAN_RED+0x18>)
 800162c:	f000 fe3b 	bl	80022a6 <HAL_GPIO_TogglePin>
}
 8001630:	bf00      	nop
 8001632:	bd80      	pop	{r7, pc}
 8001634:	40010c00 	.word	0x40010c00

08001638 <DisplayMAN_GREEN>:
void DisplayMAN_GREEN(void){
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_GREEN_X_GPIO_Port, LED_GREEN_X_Pin);
 800163c:	2120      	movs	r1, #32
 800163e:	4805      	ldr	r0, [pc, #20]	; (8001654 <DisplayMAN_GREEN+0x1c>)
 8001640:	f000 fe31 	bl	80022a6 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_GREEN_Y_GPIO_Port, LED_GREEN_Y_Pin);
 8001644:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001648:	4802      	ldr	r0, [pc, #8]	; (8001654 <DisplayMAN_GREEN+0x1c>)
 800164a:	f000 fe2c 	bl	80022a6 <HAL_GPIO_TogglePin>
}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40010c00 	.word	0x40010c00

08001658 <DisplayMAN_YELLOW>:
void DisplayMAN_YELLOW(void){
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_YELLOW_Y_GPIO_Port, LED_YELLOW_Y_Pin);
 800165c:	2180      	movs	r1, #128	; 0x80
 800165e:	4804      	ldr	r0, [pc, #16]	; (8001670 <DisplayMAN_YELLOW+0x18>)
 8001660:	f000 fe21 	bl	80022a6 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_YELLOW_X_GPIO_Port, LED_YELLOW_X_Pin);
 8001664:	2110      	movs	r1, #16
 8001666:	4802      	ldr	r0, [pc, #8]	; (8001670 <DisplayMAN_YELLOW+0x18>)
 8001668:	f000 fe1d 	bl	80022a6 <HAL_GPIO_TogglePin>
}
 800166c:	bf00      	nop
 800166e:	bd80      	pop	{r7, pc}
 8001670:	40010c00 	.word	0x40010c00

08001674 <InitLED>:
void InitLED(void){
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_X_GPIO_Port, LED_RED_X_Pin, RESET);
 8001678:	2200      	movs	r2, #0
 800167a:	2108      	movs	r1, #8
 800167c:	480f      	ldr	r0, [pc, #60]	; (80016bc <InitLED+0x48>)
 800167e:	f000 fdfa 	bl	8002276 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_X_GPIO_Port, LED_GREEN_X_Pin, RESET);
 8001682:	2200      	movs	r2, #0
 8001684:	2120      	movs	r1, #32
 8001686:	480d      	ldr	r0, [pc, #52]	; (80016bc <InitLED+0x48>)
 8001688:	f000 fdf5 	bl	8002276 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_X_GPIO_Port, LED_YELLOW_X_Pin, RESET);
 800168c:	2200      	movs	r2, #0
 800168e:	2110      	movs	r1, #16
 8001690:	480a      	ldr	r0, [pc, #40]	; (80016bc <InitLED+0x48>)
 8001692:	f000 fdf0 	bl	8002276 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_Y_GPIO_Port, LED_RED_Y_Pin, RESET);
 8001696:	2200      	movs	r2, #0
 8001698:	2140      	movs	r1, #64	; 0x40
 800169a:	4808      	ldr	r0, [pc, #32]	; (80016bc <InitLED+0x48>)
 800169c:	f000 fdeb 	bl	8002276 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_Y_GPIO_Port, LED_GREEN_Y_Pin, RESET);
 80016a0:	2200      	movs	r2, #0
 80016a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016a6:	4805      	ldr	r0, [pc, #20]	; (80016bc <InitLED+0x48>)
 80016a8:	f000 fde5 	bl	8002276 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_Y_GPIO_Port, LED_YELLOW_Y_Pin, RESET);
 80016ac:	2200      	movs	r2, #0
 80016ae:	2180      	movs	r1, #128	; 0x80
 80016b0:	4802      	ldr	r0, [pc, #8]	; (80016bc <InitLED+0x48>)
 80016b2:	f000 fde0 	bl	8002276 <HAL_GPIO_WritePin>
}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	40010c00 	.word	0x40010c00

080016c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016c4:	f000 fad6 	bl	8001c74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016c8:	f000 f8aa 	bl	8001820 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016cc:	f000 f930 	bl	8001930 <MX_GPIO_Init>
  MX_TIM2_Init();
 80016d0:	f000 f8e2 	bl	8001898 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80016d4:	4848      	ldr	r0, [pc, #288]	; (80017f8 <main+0x138>)
 80016d6:	f001 fa2b 	bl	8002b30 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80016da:	2201      	movs	r2, #1
 80016dc:	2180      	movs	r1, #128	; 0x80
 80016de:	4847      	ldr	r0, [pc, #284]	; (80017fc <main+0x13c>)
 80016e0:	f000 fdc9 	bl	8002276 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80016e4:	2201      	movs	r2, #1
 80016e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016ea:	4844      	ldr	r0, [pc, #272]	; (80017fc <main+0x13c>)
 80016ec:	f000 fdc3 	bl	8002276 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 80016f0:	2201      	movs	r2, #1
 80016f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016f6:	4841      	ldr	r0, [pc, #260]	; (80017fc <main+0x13c>)
 80016f8:	f000 fdbd 	bl	8002276 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 80016fc:	2201      	movs	r2, #1
 80016fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001702:	483e      	ldr	r0, [pc, #248]	; (80017fc <main+0x13c>)
 8001704:	f000 fdb7 	bl	8002276 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_SET);
 8001708:	2201      	movs	r2, #1
 800170a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800170e:	483b      	ldr	r0, [pc, #236]	; (80017fc <main+0x13c>)
 8001710:	f000 fdb1 	bl	8002276 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_SET);
 8001714:	2201      	movs	r2, #1
 8001716:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800171a:	4838      	ldr	r0, [pc, #224]	; (80017fc <main+0x13c>)
 800171c:	f000 fdab 	bl	8002276 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_SET);
 8001720:	2201      	movs	r2, #1
 8001722:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001726:	4835      	ldr	r0, [pc, #212]	; (80017fc <main+0x13c>)
 8001728:	f000 fda5 	bl	8002276 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG2_1_GPIO_Port, SEG2_1_Pin, GPIO_PIN_SET);
 800172c:	2201      	movs	r2, #1
 800172e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001732:	4833      	ldr	r0, [pc, #204]	; (8001800 <main+0x140>)
 8001734:	f000 fd9f 	bl	8002276 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG2_2_GPIO_Port, SEG2_2_Pin, GPIO_PIN_SET);
 8001738:	2201      	movs	r2, #1
 800173a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800173e:	4830      	ldr	r0, [pc, #192]	; (8001800 <main+0x140>)
 8001740:	f000 fd99 	bl	8002276 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG2_3_GPIO_Port, SEG2_3_Pin, GPIO_PIN_SET);
 8001744:	2201      	movs	r2, #1
 8001746:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800174a:	482d      	ldr	r0, [pc, #180]	; (8001800 <main+0x140>)
 800174c:	f000 fd93 	bl	8002276 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG2_4_GPIO_Port, SEG2_4_Pin, GPIO_PIN_SET);
 8001750:	2201      	movs	r2, #1
 8001752:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001756:	482b      	ldr	r0, [pc, #172]	; (8001804 <main+0x144>)
 8001758:	f000 fd8d 	bl	8002276 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG2_5_GPIO_Port, SEG2_5_Pin, GPIO_PIN_SET);
 800175c:	2201      	movs	r2, #1
 800175e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001762:	4828      	ldr	r0, [pc, #160]	; (8001804 <main+0x144>)
 8001764:	f000 fd87 	bl	8002276 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG2_6_GPIO_Port, SEG2_6_Pin, GPIO_PIN_SET);
 8001768:	2201      	movs	r2, #1
 800176a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800176e:	4823      	ldr	r0, [pc, #140]	; (80017fc <main+0x13c>)
 8001770:	f000 fd81 	bl	8002276 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG2_7_GPIO_Port, SEG2_7_Pin, GPIO_PIN_SET);
 8001774:	2201      	movs	r2, #1
 8001776:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800177a:	4820      	ldr	r0, [pc, #128]	; (80017fc <main+0x13c>)
 800177c:	f000 fd7b 	bl	8002276 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8001780:	2201      	movs	r2, #1
 8001782:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001786:	481f      	ldr	r0, [pc, #124]	; (8001804 <main+0x144>)
 8001788:	f000 fd75 	bl	8002276 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 800178c:	2201      	movs	r2, #1
 800178e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001792:	481c      	ldr	r0, [pc, #112]	; (8001804 <main+0x144>)
 8001794:	f000 fd6f 	bl	8002276 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8001798:	2201      	movs	r2, #1
 800179a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800179e:	4819      	ldr	r0, [pc, #100]	; (8001804 <main+0x144>)
 80017a0:	f000 fd69 	bl	8002276 <HAL_GPIO_WritePin>
	statusx = INITX;
 80017a4:	4b18      	ldr	r3, [pc, #96]	; (8001808 <main+0x148>)
 80017a6:	2201      	movs	r2, #1
 80017a8:	601a      	str	r2, [r3, #0]
	statusy = INITY;
 80017aa:	4b18      	ldr	r3, [pc, #96]	; (800180c <main+0x14c>)
 80017ac:	2205      	movs	r2, #5
 80017ae:	601a      	str	r2, [r3, #0]
	counterMode = 1;
 80017b0:	4b17      	ldr	r3, [pc, #92]	; (8001810 <main+0x150>)
 80017b2:	2201      	movs	r2, #1
 80017b4:	601a      	str	r2, [r3, #0]
	counterTimeSet = 0;
 80017b6:	4b17      	ldr	r3, [pc, #92]	; (8001814 <main+0x154>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
	statusMode = NORMAL_MODE;
 80017bc:	4b16      	ldr	r3, [pc, #88]	; (8001818 <main+0x158>)
 80017be:	220c      	movs	r2, #12
 80017c0:	601a      	str	r2, [r3, #0]
	setTimer(5, 10);
 80017c2:	210a      	movs	r1, #10
 80017c4:	2005      	movs	r0, #5
 80017c6:	f000 f9cd 	bl	8001b64 <setTimer>
	setTimer(4, 500);
 80017ca:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80017ce:	2004      	movs	r0, #4
 80017d0:	f000 f9c8 	bl	8001b64 <setTimer>
	Mode3_flag = 0;
 80017d4:	4b11      	ldr	r3, [pc, #68]	; (800181c <main+0x15c>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	601a      	str	r2, [r3, #0]
  while (1)
  {
	  fsm_automatic_runx();
 80017da:	f7fe fd2d 	bl	8000238 <fsm_automatic_runx>
	  fsm_automatic_runy();
 80017de:	f7fe fe3f 	bl	8000460 <fsm_automatic_runy>
	  fsm_clock();
 80017e2:	f7fe fcb3 	bl	800014c <fsm_clock>
	  fsm_manual_run();
 80017e6:	f7fe fea7 	bl	8000538 <fsm_manual_run>
	  fsm_for_input_processing1();
 80017ea:	f7fe ff19 	bl	8000620 <fsm_for_input_processing1>
	  fsm_for_input_processing2();
 80017ee:	f7fe ff6d 	bl	80006cc <fsm_for_input_processing2>
	  fsm_for_input_processing3();
 80017f2:	f7fe ffc1 	bl	8000778 <fsm_for_input_processing3>
	  fsm_automatic_runx();
 80017f6:	e7f0      	b.n	80017da <main+0x11a>
 80017f8:	20000074 	.word	0x20000074
 80017fc:	40010800 	.word	0x40010800
 8001800:	40011000 	.word	0x40011000
 8001804:	40010c00 	.word	0x40010c00
 8001808:	2000002c 	.word	0x2000002c
 800180c:	20000030 	.word	0x20000030
 8001810:	20000044 	.word	0x20000044
 8001814:	20000048 	.word	0x20000048
 8001818:	20000034 	.word	0x20000034
 800181c:	2000004c 	.word	0x2000004c

08001820 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b090      	sub	sp, #64	; 0x40
 8001824:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001826:	f107 0318 	add.w	r3, r7, #24
 800182a:	2228      	movs	r2, #40	; 0x28
 800182c:	2100      	movs	r1, #0
 800182e:	4618      	mov	r0, r3
 8001830:	f001 fd2e 	bl	8003290 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001834:	1d3b      	adds	r3, r7, #4
 8001836:	2200      	movs	r2, #0
 8001838:	601a      	str	r2, [r3, #0]
 800183a:	605a      	str	r2, [r3, #4]
 800183c:	609a      	str	r2, [r3, #8]
 800183e:	60da      	str	r2, [r3, #12]
 8001840:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001842:	2302      	movs	r3, #2
 8001844:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001846:	2301      	movs	r3, #1
 8001848:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800184a:	2310      	movs	r3, #16
 800184c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800184e:	2300      	movs	r3, #0
 8001850:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001852:	f107 0318 	add.w	r3, r7, #24
 8001856:	4618      	mov	r0, r3
 8001858:	f000 fd3e 	bl	80022d8 <HAL_RCC_OscConfig>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001862:	f000 f8eb 	bl	8001a3c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001866:	230f      	movs	r3, #15
 8001868:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800186a:	2300      	movs	r3, #0
 800186c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800186e:	2300      	movs	r3, #0
 8001870:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001872:	2300      	movs	r3, #0
 8001874:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001876:	2300      	movs	r3, #0
 8001878:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800187a:	1d3b      	adds	r3, r7, #4
 800187c:	2100      	movs	r1, #0
 800187e:	4618      	mov	r0, r3
 8001880:	f000 ffaa 	bl	80027d8 <HAL_RCC_ClockConfig>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800188a:	f000 f8d7 	bl	8001a3c <Error_Handler>
  }
}
 800188e:	bf00      	nop
 8001890:	3740      	adds	r7, #64	; 0x40
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
	...

08001898 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b086      	sub	sp, #24
 800189c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800189e:	f107 0308 	add.w	r3, r7, #8
 80018a2:	2200      	movs	r2, #0
 80018a4:	601a      	str	r2, [r3, #0]
 80018a6:	605a      	str	r2, [r3, #4]
 80018a8:	609a      	str	r2, [r3, #8]
 80018aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018ac:	463b      	mov	r3, r7
 80018ae:	2200      	movs	r2, #0
 80018b0:	601a      	str	r2, [r3, #0]
 80018b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018b4:	4b1d      	ldr	r3, [pc, #116]	; (800192c <MX_TIM2_Init+0x94>)
 80018b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018ba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80018bc:	4b1b      	ldr	r3, [pc, #108]	; (800192c <MX_TIM2_Init+0x94>)
 80018be:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80018c2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018c4:	4b19      	ldr	r3, [pc, #100]	; (800192c <MX_TIM2_Init+0x94>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80018ca:	4b18      	ldr	r3, [pc, #96]	; (800192c <MX_TIM2_Init+0x94>)
 80018cc:	2209      	movs	r2, #9
 80018ce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018d0:	4b16      	ldr	r3, [pc, #88]	; (800192c <MX_TIM2_Init+0x94>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018d6:	4b15      	ldr	r3, [pc, #84]	; (800192c <MX_TIM2_Init+0x94>)
 80018d8:	2200      	movs	r2, #0
 80018da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80018dc:	4813      	ldr	r0, [pc, #76]	; (800192c <MX_TIM2_Init+0x94>)
 80018de:	f001 f8d7 	bl	8002a90 <HAL_TIM_Base_Init>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80018e8:	f000 f8a8 	bl	8001a3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80018f2:	f107 0308 	add.w	r3, r7, #8
 80018f6:	4619      	mov	r1, r3
 80018f8:	480c      	ldr	r0, [pc, #48]	; (800192c <MX_TIM2_Init+0x94>)
 80018fa:	f001 fa55 	bl	8002da8 <HAL_TIM_ConfigClockSource>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001904:	f000 f89a 	bl	8001a3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001908:	2300      	movs	r3, #0
 800190a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800190c:	2300      	movs	r3, #0
 800190e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001910:	463b      	mov	r3, r7
 8001912:	4619      	mov	r1, r3
 8001914:	4805      	ldr	r0, [pc, #20]	; (800192c <MX_TIM2_Init+0x94>)
 8001916:	f001 fc2d 	bl	8003174 <HAL_TIMEx_MasterConfigSynchronization>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001920:	f000 f88c 	bl	8001a3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001924:	bf00      	nop
 8001926:	3718      	adds	r7, #24
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	20000074 	.word	0x20000074

08001930 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b088      	sub	sp, #32
 8001934:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001936:	f107 0310 	add.w	r3, r7, #16
 800193a:	2200      	movs	r2, #0
 800193c:	601a      	str	r2, [r3, #0]
 800193e:	605a      	str	r2, [r3, #4]
 8001940:	609a      	str	r2, [r3, #8]
 8001942:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001944:	4b39      	ldr	r3, [pc, #228]	; (8001a2c <MX_GPIO_Init+0xfc>)
 8001946:	699b      	ldr	r3, [r3, #24]
 8001948:	4a38      	ldr	r2, [pc, #224]	; (8001a2c <MX_GPIO_Init+0xfc>)
 800194a:	f043 0310 	orr.w	r3, r3, #16
 800194e:	6193      	str	r3, [r2, #24]
 8001950:	4b36      	ldr	r3, [pc, #216]	; (8001a2c <MX_GPIO_Init+0xfc>)
 8001952:	699b      	ldr	r3, [r3, #24]
 8001954:	f003 0310 	and.w	r3, r3, #16
 8001958:	60fb      	str	r3, [r7, #12]
 800195a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800195c:	4b33      	ldr	r3, [pc, #204]	; (8001a2c <MX_GPIO_Init+0xfc>)
 800195e:	699b      	ldr	r3, [r3, #24]
 8001960:	4a32      	ldr	r2, [pc, #200]	; (8001a2c <MX_GPIO_Init+0xfc>)
 8001962:	f043 0304 	orr.w	r3, r3, #4
 8001966:	6193      	str	r3, [r2, #24]
 8001968:	4b30      	ldr	r3, [pc, #192]	; (8001a2c <MX_GPIO_Init+0xfc>)
 800196a:	699b      	ldr	r3, [r3, #24]
 800196c:	f003 0304 	and.w	r3, r3, #4
 8001970:	60bb      	str	r3, [r7, #8]
 8001972:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001974:	4b2d      	ldr	r3, [pc, #180]	; (8001a2c <MX_GPIO_Init+0xfc>)
 8001976:	699b      	ldr	r3, [r3, #24]
 8001978:	4a2c      	ldr	r2, [pc, #176]	; (8001a2c <MX_GPIO_Init+0xfc>)
 800197a:	f043 0308 	orr.w	r3, r3, #8
 800197e:	6193      	str	r3, [r2, #24]
 8001980:	4b2a      	ldr	r3, [pc, #168]	; (8001a2c <MX_GPIO_Init+0xfc>)
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	f003 0308 	and.w	r3, r3, #8
 8001988:	607b      	str	r3, [r7, #4]
 800198a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SEG2_1_Pin|SEG2_2_Pin|SEG2_3_Pin, GPIO_PIN_RESET);
 800198c:	2200      	movs	r2, #0
 800198e:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001992:	4827      	ldr	r0, [pc, #156]	; (8001a30 <MX_GPIO_Init+0x100>)
 8001994:	f000 fc6f 	bl	8002276 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SEG1_1_Pin|SEG1_2_Pin|SEG1_3_Pin|SEG1_4_Pin
 8001998:	2200      	movs	r2, #0
 800199a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800199e:	4825      	ldr	r0, [pc, #148]	; (8001a34 <MX_GPIO_Init+0x104>)
 80019a0:	f000 fc69 	bl	8002276 <HAL_GPIO_WritePin>
                          |SEG1_5_Pin|SEG1_6_Pin|SEG1_7_Pin|LED1_Pin
                          |LED2_Pin|LED3_Pin|LED4_Pin|LED5_Pin
                          |LED6_Pin|LED7_Pin|SEG2_6_Pin|SEG2_7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN1_Pin|EN2_Pin|TEST_Pin|SEG2_5_Pin
 80019a4:	2200      	movs	r2, #0
 80019a6:	f64d 71f8 	movw	r1, #57336	; 0xdff8
 80019aa:	4823      	ldr	r0, [pc, #140]	; (8001a38 <MX_GPIO_Init+0x108>)
 80019ac:	f000 fc63 	bl	8002276 <HAL_GPIO_WritePin>
                          |SEG2_4_Pin|LED_RED_X_Pin|LED_YELLOW_X_Pin|LED_GREEN_X_Pin
                          |LED_RED_Y_Pin|LED_YELLOW_Y_Pin|LED_GREEN_Y_Pin|EN0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SEG2_1_Pin SEG2_2_Pin SEG2_3_Pin */
  GPIO_InitStruct.Pin = SEG2_1_Pin|SEG2_2_Pin|SEG2_3_Pin;
 80019b0:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80019b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019b6:	2301      	movs	r3, #1
 80019b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ba:	2300      	movs	r3, #0
 80019bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019be:	2302      	movs	r3, #2
 80019c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019c2:	f107 0310 	add.w	r3, r7, #16
 80019c6:	4619      	mov	r1, r3
 80019c8:	4819      	ldr	r0, [pc, #100]	; (8001a30 <MX_GPIO_Init+0x100>)
 80019ca:	f000 fac3 	bl	8001f54 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG1_1_Pin SEG1_2_Pin SEG1_3_Pin SEG1_4_Pin
                           SEG1_5_Pin SEG1_6_Pin SEG1_7_Pin LED1_Pin
                           LED2_Pin LED3_Pin LED4_Pin LED5_Pin
                           LED6_Pin LED7_Pin SEG2_6_Pin SEG2_7_Pin */
  GPIO_InitStruct.Pin = SEG1_1_Pin|SEG1_2_Pin|SEG1_3_Pin|SEG1_4_Pin
 80019ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019d2:	613b      	str	r3, [r7, #16]
                          |SEG1_5_Pin|SEG1_6_Pin|SEG1_7_Pin|LED1_Pin
                          |LED2_Pin|LED3_Pin|LED4_Pin|LED5_Pin
                          |LED6_Pin|LED7_Pin|SEG2_6_Pin|SEG2_7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019d4:	2301      	movs	r3, #1
 80019d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d8:	2300      	movs	r3, #0
 80019da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019dc:	2302      	movs	r3, #2
 80019de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e0:	f107 0310 	add.w	r3, r7, #16
 80019e4:	4619      	mov	r1, r3
 80019e6:	4813      	ldr	r0, [pc, #76]	; (8001a34 <MX_GPIO_Init+0x104>)
 80019e8:	f000 fab4 	bl	8001f54 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button_Pin Button1_Pin Button2_Pin */
  GPIO_InitStruct.Pin = Button_Pin|Button1_Pin|Button2_Pin;
 80019ec:	2307      	movs	r3, #7
 80019ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019f0:	2300      	movs	r3, #0
 80019f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019f4:	2301      	movs	r3, #1
 80019f6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019f8:	f107 0310 	add.w	r3, r7, #16
 80019fc:	4619      	mov	r1, r3
 80019fe:	480e      	ldr	r0, [pc, #56]	; (8001a38 <MX_GPIO_Init+0x108>)
 8001a00:	f000 faa8 	bl	8001f54 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN1_Pin EN2_Pin TEST_Pin SEG2_5_Pin
                           SEG2_4_Pin LED_RED_X_Pin LED_YELLOW_X_Pin LED_GREEN_X_Pin
                           LED_RED_Y_Pin LED_YELLOW_Y_Pin LED_GREEN_Y_Pin EN0_Pin */
  GPIO_InitStruct.Pin = EN1_Pin|EN2_Pin|TEST_Pin|SEG2_5_Pin
 8001a04:	f64d 73f8 	movw	r3, #57336	; 0xdff8
 8001a08:	613b      	str	r3, [r7, #16]
                          |SEG2_4_Pin|LED_RED_X_Pin|LED_YELLOW_X_Pin|LED_GREEN_X_Pin
                          |LED_RED_Y_Pin|LED_YELLOW_Y_Pin|LED_GREEN_Y_Pin|EN0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a12:	2302      	movs	r3, #2
 8001a14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a16:	f107 0310 	add.w	r3, r7, #16
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4806      	ldr	r0, [pc, #24]	; (8001a38 <MX_GPIO_Init+0x108>)
 8001a1e:	f000 fa99 	bl	8001f54 <HAL_GPIO_Init>

}
 8001a22:	bf00      	nop
 8001a24:	3720      	adds	r7, #32
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	40011000 	.word	0x40011000
 8001a34:	40010800 	.word	0x40010800
 8001a38:	40010c00 	.word	0x40010c00

08001a3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a40:	b672      	cpsid	i
}
 8001a42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a44:	e7fe      	b.n	8001a44 <Error_Handler+0x8>
	...

08001a48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b085      	sub	sp, #20
 8001a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a4e:	4b15      	ldr	r3, [pc, #84]	; (8001aa4 <HAL_MspInit+0x5c>)
 8001a50:	699b      	ldr	r3, [r3, #24]
 8001a52:	4a14      	ldr	r2, [pc, #80]	; (8001aa4 <HAL_MspInit+0x5c>)
 8001a54:	f043 0301 	orr.w	r3, r3, #1
 8001a58:	6193      	str	r3, [r2, #24]
 8001a5a:	4b12      	ldr	r3, [pc, #72]	; (8001aa4 <HAL_MspInit+0x5c>)
 8001a5c:	699b      	ldr	r3, [r3, #24]
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	60bb      	str	r3, [r7, #8]
 8001a64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a66:	4b0f      	ldr	r3, [pc, #60]	; (8001aa4 <HAL_MspInit+0x5c>)
 8001a68:	69db      	ldr	r3, [r3, #28]
 8001a6a:	4a0e      	ldr	r2, [pc, #56]	; (8001aa4 <HAL_MspInit+0x5c>)
 8001a6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a70:	61d3      	str	r3, [r2, #28]
 8001a72:	4b0c      	ldr	r3, [pc, #48]	; (8001aa4 <HAL_MspInit+0x5c>)
 8001a74:	69db      	ldr	r3, [r3, #28]
 8001a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a7a:	607b      	str	r3, [r7, #4]
 8001a7c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001a7e:	4b0a      	ldr	r3, [pc, #40]	; (8001aa8 <HAL_MspInit+0x60>)
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	60fb      	str	r3, [r7, #12]
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001a8a:	60fb      	str	r3, [r7, #12]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001a92:	60fb      	str	r3, [r7, #12]
 8001a94:	4a04      	ldr	r2, [pc, #16]	; (8001aa8 <HAL_MspInit+0x60>)
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	3714      	adds	r7, #20
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bc80      	pop	{r7}
 8001aa2:	4770      	bx	lr
 8001aa4:	40021000 	.word	0x40021000
 8001aa8:	40010000 	.word	0x40010000

08001aac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001abc:	d113      	bne.n	8001ae6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001abe:	4b0c      	ldr	r3, [pc, #48]	; (8001af0 <HAL_TIM_Base_MspInit+0x44>)
 8001ac0:	69db      	ldr	r3, [r3, #28]
 8001ac2:	4a0b      	ldr	r2, [pc, #44]	; (8001af0 <HAL_TIM_Base_MspInit+0x44>)
 8001ac4:	f043 0301 	orr.w	r3, r3, #1
 8001ac8:	61d3      	str	r3, [r2, #28]
 8001aca:	4b09      	ldr	r3, [pc, #36]	; (8001af0 <HAL_TIM_Base_MspInit+0x44>)
 8001acc:	69db      	ldr	r3, [r3, #28]
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	60fb      	str	r3, [r7, #12]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	2100      	movs	r1, #0
 8001ada:	201c      	movs	r0, #28
 8001adc:	f000 fa03 	bl	8001ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ae0:	201c      	movs	r0, #28
 8001ae2:	f000 fa1c 	bl	8001f1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001ae6:	bf00      	nop
 8001ae8:	3710      	adds	r7, #16
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	40021000 	.word	0x40021000

08001af4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001af8:	e7fe      	b.n	8001af8 <NMI_Handler+0x4>

08001afa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001afa:	b480      	push	{r7}
 8001afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001afe:	e7fe      	b.n	8001afe <HardFault_Handler+0x4>

08001b00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b04:	e7fe      	b.n	8001b04 <MemManage_Handler+0x4>

08001b06 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b06:	b480      	push	{r7}
 8001b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b0a:	e7fe      	b.n	8001b0a <BusFault_Handler+0x4>

08001b0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b10:	e7fe      	b.n	8001b10 <UsageFault_Handler+0x4>

08001b12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b12:	b480      	push	{r7}
 8001b14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b16:	bf00      	nop
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bc80      	pop	{r7}
 8001b1c:	4770      	bx	lr

08001b1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b22:	bf00      	nop
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bc80      	pop	{r7}
 8001b28:	4770      	bx	lr

08001b2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b2e:	bf00      	nop
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bc80      	pop	{r7}
 8001b34:	4770      	bx	lr

08001b36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b3a:	f000 f8e1 	bl	8001d00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b3e:	bf00      	nop
 8001b40:	bd80      	pop	{r7, pc}
	...

08001b44 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b48:	4802      	ldr	r0, [pc, #8]	; (8001b54 <TIM2_IRQHandler+0x10>)
 8001b4a:	f001 f83d 	bl	8002bc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b4e:	bf00      	nop
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	20000074 	.word	0x20000074

08001b58 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b5c:	bf00      	nop
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bc80      	pop	{r7}
 8001b62:	4770      	bx	lr

08001b64 <setTimer>:
#include "input_reading.h"
#define TIME_CYCLE 10
#define MAX_COUNTER 10
int timer_counter[MAX_COUNTER];
int timer_flag[MAX_COUNTER];
void setTimer(int index, int duration){
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
	timer_counter[index] = duration/TIME_CYCLE;
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	4a09      	ldr	r2, [pc, #36]	; (8001b98 <setTimer+0x34>)
 8001b72:	fb82 1203 	smull	r1, r2, r2, r3
 8001b76:	1092      	asrs	r2, r2, #2
 8001b78:	17db      	asrs	r3, r3, #31
 8001b7a:	1ad2      	subs	r2, r2, r3
 8001b7c:	4907      	ldr	r1, [pc, #28]	; (8001b9c <setTimer+0x38>)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[index] = 0;
 8001b84:	4a06      	ldr	r2, [pc, #24]	; (8001ba0 <setTimer+0x3c>)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2100      	movs	r1, #0
 8001b8a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001b8e:	bf00      	nop
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bc80      	pop	{r7}
 8001b96:	4770      	bx	lr
 8001b98:	66666667 	.word	0x66666667
 8001b9c:	200000bc 	.word	0x200000bc
 8001ba0:	200000e4 	.word	0x200000e4

08001ba4 <timerRun>:
void timerRun(void){
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
	for(int i = 0; i < MAX_COUNTER; i++){
 8001baa:	2300      	movs	r3, #0
 8001bac:	607b      	str	r3, [r7, #4]
 8001bae:	e01c      	b.n	8001bea <timerRun+0x46>
		if(timer_counter[i] > 0){
 8001bb0:	4a12      	ldr	r2, [pc, #72]	; (8001bfc <timerRun+0x58>)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	dd13      	ble.n	8001be4 <timerRun+0x40>
			timer_counter[i]--;
 8001bbc:	4a0f      	ldr	r2, [pc, #60]	; (8001bfc <timerRun+0x58>)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bc4:	1e5a      	subs	r2, r3, #1
 8001bc6:	490d      	ldr	r1, [pc, #52]	; (8001bfc <timerRun+0x58>)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(timer_counter[i] <= 0){
 8001bce:	4a0b      	ldr	r2, [pc, #44]	; (8001bfc <timerRun+0x58>)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	dc04      	bgt.n	8001be4 <timerRun+0x40>
				timer_flag[i] = 1;
 8001bda:	4a09      	ldr	r2, [pc, #36]	; (8001c00 <timerRun+0x5c>)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2101      	movs	r1, #1
 8001be0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < MAX_COUNTER; i++){
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	3301      	adds	r3, #1
 8001be8:	607b      	str	r3, [r7, #4]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2b09      	cmp	r3, #9
 8001bee:	dddf      	ble.n	8001bb0 <timerRun+0xc>
			}
		}
	}
}
 8001bf0:	bf00      	nop
 8001bf2:	bf00      	nop
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bc80      	pop	{r7}
 8001bfa:	4770      	bx	lr
 8001bfc:	200000bc 	.word	0x200000bc
 8001c00:	200000e4 	.word	0x200000e4

08001c04 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM2){
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c14:	d103      	bne.n	8001c1e <HAL_TIM_PeriodElapsedCallback+0x1a>
		button_reading() ;
 8001c16:	f7fe fe53 	bl	80008c0 <button_reading>
		timerRun();
 8001c1a:	f7ff ffc3 	bl	8001ba4 <timerRun>
	}
}
 8001c1e:	bf00      	nop
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
	...

08001c28 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c28:	f7ff ff96 	bl	8001b58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c2c:	480b      	ldr	r0, [pc, #44]	; (8001c5c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001c2e:	490c      	ldr	r1, [pc, #48]	; (8001c60 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001c30:	4a0c      	ldr	r2, [pc, #48]	; (8001c64 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001c32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c34:	e002      	b.n	8001c3c <LoopCopyDataInit>

08001c36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c3a:	3304      	adds	r3, #4

08001c3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c40:	d3f9      	bcc.n	8001c36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c42:	4a09      	ldr	r2, [pc, #36]	; (8001c68 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001c44:	4c09      	ldr	r4, [pc, #36]	; (8001c6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c48:	e001      	b.n	8001c4e <LoopFillZerobss>

08001c4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c4c:	3204      	adds	r2, #4

08001c4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c50:	d3fb      	bcc.n	8001c4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c52:	f001 faf9 	bl	8003248 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c56:	f7ff fd33 	bl	80016c0 <main>
  bx lr
 8001c5a:	4770      	bx	lr
  ldr r0, =_sdata
 8001c5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c60:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001c64:	080032e4 	.word	0x080032e4
  ldr r2, =_sbss
 8001c68:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001c6c:	20000110 	.word	0x20000110

08001c70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c70:	e7fe      	b.n	8001c70 <ADC1_2_IRQHandler>
	...

08001c74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c78:	4b08      	ldr	r3, [pc, #32]	; (8001c9c <HAL_Init+0x28>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a07      	ldr	r2, [pc, #28]	; (8001c9c <HAL_Init+0x28>)
 8001c7e:	f043 0310 	orr.w	r3, r3, #16
 8001c82:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c84:	2003      	movs	r0, #3
 8001c86:	f000 f923 	bl	8001ed0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c8a:	200f      	movs	r0, #15
 8001c8c:	f000 f808 	bl	8001ca0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c90:	f7ff feda 	bl	8001a48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40022000 	.word	0x40022000

08001ca0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ca8:	4b12      	ldr	r3, [pc, #72]	; (8001cf4 <HAL_InitTick+0x54>)
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	4b12      	ldr	r3, [pc, #72]	; (8001cf8 <HAL_InitTick+0x58>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f000 f93b 	bl	8001f3a <HAL_SYSTICK_Config>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e00e      	b.n	8001cec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2b0f      	cmp	r3, #15
 8001cd2:	d80a      	bhi.n	8001cea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	6879      	ldr	r1, [r7, #4]
 8001cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cdc:	f000 f903 	bl	8001ee6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ce0:	4a06      	ldr	r2, [pc, #24]	; (8001cfc <HAL_InitTick+0x5c>)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	e000      	b.n	8001cec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3708      	adds	r7, #8
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	20000000 	.word	0x20000000
 8001cf8:	20000008 	.word	0x20000008
 8001cfc:	20000004 	.word	0x20000004

08001d00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d04:	4b05      	ldr	r3, [pc, #20]	; (8001d1c <HAL_IncTick+0x1c>)
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	461a      	mov	r2, r3
 8001d0a:	4b05      	ldr	r3, [pc, #20]	; (8001d20 <HAL_IncTick+0x20>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4413      	add	r3, r2
 8001d10:	4a03      	ldr	r2, [pc, #12]	; (8001d20 <HAL_IncTick+0x20>)
 8001d12:	6013      	str	r3, [r2, #0]
}
 8001d14:	bf00      	nop
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bc80      	pop	{r7}
 8001d1a:	4770      	bx	lr
 8001d1c:	20000008 	.word	0x20000008
 8001d20:	2000010c 	.word	0x2000010c

08001d24 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  return uwTick;
 8001d28:	4b02      	ldr	r3, [pc, #8]	; (8001d34 <HAL_GetTick+0x10>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bc80      	pop	{r7}
 8001d32:	4770      	bx	lr
 8001d34:	2000010c 	.word	0x2000010c

08001d38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b085      	sub	sp, #20
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	f003 0307 	and.w	r3, r3, #7
 8001d46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d48:	4b0c      	ldr	r3, [pc, #48]	; (8001d7c <__NVIC_SetPriorityGrouping+0x44>)
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d4e:	68ba      	ldr	r2, [r7, #8]
 8001d50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d54:	4013      	ands	r3, r2
 8001d56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d6a:	4a04      	ldr	r2, [pc, #16]	; (8001d7c <__NVIC_SetPriorityGrouping+0x44>)
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	60d3      	str	r3, [r2, #12]
}
 8001d70:	bf00      	nop
 8001d72:	3714      	adds	r7, #20
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bc80      	pop	{r7}
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	e000ed00 	.word	0xe000ed00

08001d80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d84:	4b04      	ldr	r3, [pc, #16]	; (8001d98 <__NVIC_GetPriorityGrouping+0x18>)
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	0a1b      	lsrs	r3, r3, #8
 8001d8a:	f003 0307 	and.w	r3, r3, #7
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bc80      	pop	{r7}
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	e000ed00 	.word	0xe000ed00

08001d9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	4603      	mov	r3, r0
 8001da4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	db0b      	blt.n	8001dc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dae:	79fb      	ldrb	r3, [r7, #7]
 8001db0:	f003 021f 	and.w	r2, r3, #31
 8001db4:	4906      	ldr	r1, [pc, #24]	; (8001dd0 <__NVIC_EnableIRQ+0x34>)
 8001db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dba:	095b      	lsrs	r3, r3, #5
 8001dbc:	2001      	movs	r0, #1
 8001dbe:	fa00 f202 	lsl.w	r2, r0, r2
 8001dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dc6:	bf00      	nop
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bc80      	pop	{r7}
 8001dce:	4770      	bx	lr
 8001dd0:	e000e100 	.word	0xe000e100

08001dd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	4603      	mov	r3, r0
 8001ddc:	6039      	str	r1, [r7, #0]
 8001dde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	db0a      	blt.n	8001dfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	b2da      	uxtb	r2, r3
 8001dec:	490c      	ldr	r1, [pc, #48]	; (8001e20 <__NVIC_SetPriority+0x4c>)
 8001dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df2:	0112      	lsls	r2, r2, #4
 8001df4:	b2d2      	uxtb	r2, r2
 8001df6:	440b      	add	r3, r1
 8001df8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dfc:	e00a      	b.n	8001e14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	b2da      	uxtb	r2, r3
 8001e02:	4908      	ldr	r1, [pc, #32]	; (8001e24 <__NVIC_SetPriority+0x50>)
 8001e04:	79fb      	ldrb	r3, [r7, #7]
 8001e06:	f003 030f 	and.w	r3, r3, #15
 8001e0a:	3b04      	subs	r3, #4
 8001e0c:	0112      	lsls	r2, r2, #4
 8001e0e:	b2d2      	uxtb	r2, r2
 8001e10:	440b      	add	r3, r1
 8001e12:	761a      	strb	r2, [r3, #24]
}
 8001e14:	bf00      	nop
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bc80      	pop	{r7}
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	e000e100 	.word	0xe000e100
 8001e24:	e000ed00 	.word	0xe000ed00

08001e28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b089      	sub	sp, #36	; 0x24
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	60b9      	str	r1, [r7, #8]
 8001e32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	f003 0307 	and.w	r3, r3, #7
 8001e3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	f1c3 0307 	rsb	r3, r3, #7
 8001e42:	2b04      	cmp	r3, #4
 8001e44:	bf28      	it	cs
 8001e46:	2304      	movcs	r3, #4
 8001e48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	3304      	adds	r3, #4
 8001e4e:	2b06      	cmp	r3, #6
 8001e50:	d902      	bls.n	8001e58 <NVIC_EncodePriority+0x30>
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	3b03      	subs	r3, #3
 8001e56:	e000      	b.n	8001e5a <NVIC_EncodePriority+0x32>
 8001e58:	2300      	movs	r3, #0
 8001e5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	fa02 f303 	lsl.w	r3, r2, r3
 8001e66:	43da      	mvns	r2, r3
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	401a      	ands	r2, r3
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e70:	f04f 31ff 	mov.w	r1, #4294967295
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	fa01 f303 	lsl.w	r3, r1, r3
 8001e7a:	43d9      	mvns	r1, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e80:	4313      	orrs	r3, r2
         );
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3724      	adds	r7, #36	; 0x24
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bc80      	pop	{r7}
 8001e8a:	4770      	bx	lr

08001e8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	3b01      	subs	r3, #1
 8001e98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e9c:	d301      	bcc.n	8001ea2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e00f      	b.n	8001ec2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ea2:	4a0a      	ldr	r2, [pc, #40]	; (8001ecc <SysTick_Config+0x40>)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eaa:	210f      	movs	r1, #15
 8001eac:	f04f 30ff 	mov.w	r0, #4294967295
 8001eb0:	f7ff ff90 	bl	8001dd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001eb4:	4b05      	ldr	r3, [pc, #20]	; (8001ecc <SysTick_Config+0x40>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eba:	4b04      	ldr	r3, [pc, #16]	; (8001ecc <SysTick_Config+0x40>)
 8001ebc:	2207      	movs	r2, #7
 8001ebe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ec0:	2300      	movs	r3, #0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	e000e010 	.word	0xe000e010

08001ed0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f7ff ff2d 	bl	8001d38 <__NVIC_SetPriorityGrouping>
}
 8001ede:	bf00      	nop
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}

08001ee6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ee6:	b580      	push	{r7, lr}
 8001ee8:	b086      	sub	sp, #24
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	4603      	mov	r3, r0
 8001eee:	60b9      	str	r1, [r7, #8]
 8001ef0:	607a      	str	r2, [r7, #4]
 8001ef2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ef8:	f7ff ff42 	bl	8001d80 <__NVIC_GetPriorityGrouping>
 8001efc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	68b9      	ldr	r1, [r7, #8]
 8001f02:	6978      	ldr	r0, [r7, #20]
 8001f04:	f7ff ff90 	bl	8001e28 <NVIC_EncodePriority>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f0e:	4611      	mov	r1, r2
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7ff ff5f 	bl	8001dd4 <__NVIC_SetPriority>
}
 8001f16:	bf00      	nop
 8001f18:	3718      	adds	r7, #24
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b082      	sub	sp, #8
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	4603      	mov	r3, r0
 8001f26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7ff ff35 	bl	8001d9c <__NVIC_EnableIRQ>
}
 8001f32:	bf00      	nop
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b082      	sub	sp, #8
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f7ff ffa2 	bl	8001e8c <SysTick_Config>
 8001f48:	4603      	mov	r3, r0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
	...

08001f54 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b08b      	sub	sp, #44	; 0x2c
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f62:	2300      	movs	r3, #0
 8001f64:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f66:	e148      	b.n	80021fa <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f68:	2201      	movs	r2, #1
 8001f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	69fa      	ldr	r2, [r7, #28]
 8001f78:	4013      	ands	r3, r2
 8001f7a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	f040 8137 	bne.w	80021f4 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	4aa3      	ldr	r2, [pc, #652]	; (8002218 <HAL_GPIO_Init+0x2c4>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d05e      	beq.n	800204e <HAL_GPIO_Init+0xfa>
 8001f90:	4aa1      	ldr	r2, [pc, #644]	; (8002218 <HAL_GPIO_Init+0x2c4>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d875      	bhi.n	8002082 <HAL_GPIO_Init+0x12e>
 8001f96:	4aa1      	ldr	r2, [pc, #644]	; (800221c <HAL_GPIO_Init+0x2c8>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d058      	beq.n	800204e <HAL_GPIO_Init+0xfa>
 8001f9c:	4a9f      	ldr	r2, [pc, #636]	; (800221c <HAL_GPIO_Init+0x2c8>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d86f      	bhi.n	8002082 <HAL_GPIO_Init+0x12e>
 8001fa2:	4a9f      	ldr	r2, [pc, #636]	; (8002220 <HAL_GPIO_Init+0x2cc>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d052      	beq.n	800204e <HAL_GPIO_Init+0xfa>
 8001fa8:	4a9d      	ldr	r2, [pc, #628]	; (8002220 <HAL_GPIO_Init+0x2cc>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d869      	bhi.n	8002082 <HAL_GPIO_Init+0x12e>
 8001fae:	4a9d      	ldr	r2, [pc, #628]	; (8002224 <HAL_GPIO_Init+0x2d0>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d04c      	beq.n	800204e <HAL_GPIO_Init+0xfa>
 8001fb4:	4a9b      	ldr	r2, [pc, #620]	; (8002224 <HAL_GPIO_Init+0x2d0>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d863      	bhi.n	8002082 <HAL_GPIO_Init+0x12e>
 8001fba:	4a9b      	ldr	r2, [pc, #620]	; (8002228 <HAL_GPIO_Init+0x2d4>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d046      	beq.n	800204e <HAL_GPIO_Init+0xfa>
 8001fc0:	4a99      	ldr	r2, [pc, #612]	; (8002228 <HAL_GPIO_Init+0x2d4>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d85d      	bhi.n	8002082 <HAL_GPIO_Init+0x12e>
 8001fc6:	2b12      	cmp	r3, #18
 8001fc8:	d82a      	bhi.n	8002020 <HAL_GPIO_Init+0xcc>
 8001fca:	2b12      	cmp	r3, #18
 8001fcc:	d859      	bhi.n	8002082 <HAL_GPIO_Init+0x12e>
 8001fce:	a201      	add	r2, pc, #4	; (adr r2, 8001fd4 <HAL_GPIO_Init+0x80>)
 8001fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fd4:	0800204f 	.word	0x0800204f
 8001fd8:	08002029 	.word	0x08002029
 8001fdc:	0800203b 	.word	0x0800203b
 8001fe0:	0800207d 	.word	0x0800207d
 8001fe4:	08002083 	.word	0x08002083
 8001fe8:	08002083 	.word	0x08002083
 8001fec:	08002083 	.word	0x08002083
 8001ff0:	08002083 	.word	0x08002083
 8001ff4:	08002083 	.word	0x08002083
 8001ff8:	08002083 	.word	0x08002083
 8001ffc:	08002083 	.word	0x08002083
 8002000:	08002083 	.word	0x08002083
 8002004:	08002083 	.word	0x08002083
 8002008:	08002083 	.word	0x08002083
 800200c:	08002083 	.word	0x08002083
 8002010:	08002083 	.word	0x08002083
 8002014:	08002083 	.word	0x08002083
 8002018:	08002031 	.word	0x08002031
 800201c:	08002045 	.word	0x08002045
 8002020:	4a82      	ldr	r2, [pc, #520]	; (800222c <HAL_GPIO_Init+0x2d8>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d013      	beq.n	800204e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002026:	e02c      	b.n	8002082 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	623b      	str	r3, [r7, #32]
          break;
 800202e:	e029      	b.n	8002084 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	3304      	adds	r3, #4
 8002036:	623b      	str	r3, [r7, #32]
          break;
 8002038:	e024      	b.n	8002084 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	3308      	adds	r3, #8
 8002040:	623b      	str	r3, [r7, #32]
          break;
 8002042:	e01f      	b.n	8002084 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	330c      	adds	r3, #12
 800204a:	623b      	str	r3, [r7, #32]
          break;
 800204c:	e01a      	b.n	8002084 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d102      	bne.n	800205c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002056:	2304      	movs	r3, #4
 8002058:	623b      	str	r3, [r7, #32]
          break;
 800205a:	e013      	b.n	8002084 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	2b01      	cmp	r3, #1
 8002062:	d105      	bne.n	8002070 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002064:	2308      	movs	r3, #8
 8002066:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	69fa      	ldr	r2, [r7, #28]
 800206c:	611a      	str	r2, [r3, #16]
          break;
 800206e:	e009      	b.n	8002084 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002070:	2308      	movs	r3, #8
 8002072:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	69fa      	ldr	r2, [r7, #28]
 8002078:	615a      	str	r2, [r3, #20]
          break;
 800207a:	e003      	b.n	8002084 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800207c:	2300      	movs	r3, #0
 800207e:	623b      	str	r3, [r7, #32]
          break;
 8002080:	e000      	b.n	8002084 <HAL_GPIO_Init+0x130>
          break;
 8002082:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	2bff      	cmp	r3, #255	; 0xff
 8002088:	d801      	bhi.n	800208e <HAL_GPIO_Init+0x13a>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	e001      	b.n	8002092 <HAL_GPIO_Init+0x13e>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	3304      	adds	r3, #4
 8002092:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	2bff      	cmp	r3, #255	; 0xff
 8002098:	d802      	bhi.n	80020a0 <HAL_GPIO_Init+0x14c>
 800209a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	e002      	b.n	80020a6 <HAL_GPIO_Init+0x152>
 80020a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a2:	3b08      	subs	r3, #8
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	210f      	movs	r1, #15
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	fa01 f303 	lsl.w	r3, r1, r3
 80020b4:	43db      	mvns	r3, r3
 80020b6:	401a      	ands	r2, r3
 80020b8:	6a39      	ldr	r1, [r7, #32]
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	fa01 f303 	lsl.w	r3, r1, r3
 80020c0:	431a      	orrs	r2, r3
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	f000 8090 	beq.w	80021f4 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80020d4:	4b56      	ldr	r3, [pc, #344]	; (8002230 <HAL_GPIO_Init+0x2dc>)
 80020d6:	699b      	ldr	r3, [r3, #24]
 80020d8:	4a55      	ldr	r2, [pc, #340]	; (8002230 <HAL_GPIO_Init+0x2dc>)
 80020da:	f043 0301 	orr.w	r3, r3, #1
 80020de:	6193      	str	r3, [r2, #24]
 80020e0:	4b53      	ldr	r3, [pc, #332]	; (8002230 <HAL_GPIO_Init+0x2dc>)
 80020e2:	699b      	ldr	r3, [r3, #24]
 80020e4:	f003 0301 	and.w	r3, r3, #1
 80020e8:	60bb      	str	r3, [r7, #8]
 80020ea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80020ec:	4a51      	ldr	r2, [pc, #324]	; (8002234 <HAL_GPIO_Init+0x2e0>)
 80020ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f0:	089b      	lsrs	r3, r3, #2
 80020f2:	3302      	adds	r3, #2
 80020f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020f8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80020fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fc:	f003 0303 	and.w	r3, r3, #3
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	220f      	movs	r2, #15
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	43db      	mvns	r3, r3
 800210a:	68fa      	ldr	r2, [r7, #12]
 800210c:	4013      	ands	r3, r2
 800210e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	4a49      	ldr	r2, [pc, #292]	; (8002238 <HAL_GPIO_Init+0x2e4>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d00d      	beq.n	8002134 <HAL_GPIO_Init+0x1e0>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	4a48      	ldr	r2, [pc, #288]	; (800223c <HAL_GPIO_Init+0x2e8>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d007      	beq.n	8002130 <HAL_GPIO_Init+0x1dc>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	4a47      	ldr	r2, [pc, #284]	; (8002240 <HAL_GPIO_Init+0x2ec>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d101      	bne.n	800212c <HAL_GPIO_Init+0x1d8>
 8002128:	2302      	movs	r3, #2
 800212a:	e004      	b.n	8002136 <HAL_GPIO_Init+0x1e2>
 800212c:	2303      	movs	r3, #3
 800212e:	e002      	b.n	8002136 <HAL_GPIO_Init+0x1e2>
 8002130:	2301      	movs	r3, #1
 8002132:	e000      	b.n	8002136 <HAL_GPIO_Init+0x1e2>
 8002134:	2300      	movs	r3, #0
 8002136:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002138:	f002 0203 	and.w	r2, r2, #3
 800213c:	0092      	lsls	r2, r2, #2
 800213e:	4093      	lsls	r3, r2
 8002140:	68fa      	ldr	r2, [r7, #12]
 8002142:	4313      	orrs	r3, r2
 8002144:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002146:	493b      	ldr	r1, [pc, #236]	; (8002234 <HAL_GPIO_Init+0x2e0>)
 8002148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214a:	089b      	lsrs	r3, r3, #2
 800214c:	3302      	adds	r3, #2
 800214e:	68fa      	ldr	r2, [r7, #12]
 8002150:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800215c:	2b00      	cmp	r3, #0
 800215e:	d006      	beq.n	800216e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002160:	4b38      	ldr	r3, [pc, #224]	; (8002244 <HAL_GPIO_Init+0x2f0>)
 8002162:	689a      	ldr	r2, [r3, #8]
 8002164:	4937      	ldr	r1, [pc, #220]	; (8002244 <HAL_GPIO_Init+0x2f0>)
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	4313      	orrs	r3, r2
 800216a:	608b      	str	r3, [r1, #8]
 800216c:	e006      	b.n	800217c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800216e:	4b35      	ldr	r3, [pc, #212]	; (8002244 <HAL_GPIO_Init+0x2f0>)
 8002170:	689a      	ldr	r2, [r3, #8]
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	43db      	mvns	r3, r3
 8002176:	4933      	ldr	r1, [pc, #204]	; (8002244 <HAL_GPIO_Init+0x2f0>)
 8002178:	4013      	ands	r3, r2
 800217a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d006      	beq.n	8002196 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002188:	4b2e      	ldr	r3, [pc, #184]	; (8002244 <HAL_GPIO_Init+0x2f0>)
 800218a:	68da      	ldr	r2, [r3, #12]
 800218c:	492d      	ldr	r1, [pc, #180]	; (8002244 <HAL_GPIO_Init+0x2f0>)
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	4313      	orrs	r3, r2
 8002192:	60cb      	str	r3, [r1, #12]
 8002194:	e006      	b.n	80021a4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002196:	4b2b      	ldr	r3, [pc, #172]	; (8002244 <HAL_GPIO_Init+0x2f0>)
 8002198:	68da      	ldr	r2, [r3, #12]
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	43db      	mvns	r3, r3
 800219e:	4929      	ldr	r1, [pc, #164]	; (8002244 <HAL_GPIO_Init+0x2f0>)
 80021a0:	4013      	ands	r3, r2
 80021a2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d006      	beq.n	80021be <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80021b0:	4b24      	ldr	r3, [pc, #144]	; (8002244 <HAL_GPIO_Init+0x2f0>)
 80021b2:	685a      	ldr	r2, [r3, #4]
 80021b4:	4923      	ldr	r1, [pc, #140]	; (8002244 <HAL_GPIO_Init+0x2f0>)
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	604b      	str	r3, [r1, #4]
 80021bc:	e006      	b.n	80021cc <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80021be:	4b21      	ldr	r3, [pc, #132]	; (8002244 <HAL_GPIO_Init+0x2f0>)
 80021c0:	685a      	ldr	r2, [r3, #4]
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	43db      	mvns	r3, r3
 80021c6:	491f      	ldr	r1, [pc, #124]	; (8002244 <HAL_GPIO_Init+0x2f0>)
 80021c8:	4013      	ands	r3, r2
 80021ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d006      	beq.n	80021e6 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80021d8:	4b1a      	ldr	r3, [pc, #104]	; (8002244 <HAL_GPIO_Init+0x2f0>)
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	4919      	ldr	r1, [pc, #100]	; (8002244 <HAL_GPIO_Init+0x2f0>)
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	600b      	str	r3, [r1, #0]
 80021e4:	e006      	b.n	80021f4 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80021e6:	4b17      	ldr	r3, [pc, #92]	; (8002244 <HAL_GPIO_Init+0x2f0>)
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	69bb      	ldr	r3, [r7, #24]
 80021ec:	43db      	mvns	r3, r3
 80021ee:	4915      	ldr	r1, [pc, #84]	; (8002244 <HAL_GPIO_Init+0x2f0>)
 80021f0:	4013      	ands	r3, r2
 80021f2:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80021f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f6:	3301      	adds	r3, #1
 80021f8:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002200:	fa22 f303 	lsr.w	r3, r2, r3
 8002204:	2b00      	cmp	r3, #0
 8002206:	f47f aeaf 	bne.w	8001f68 <HAL_GPIO_Init+0x14>
  }
}
 800220a:	bf00      	nop
 800220c:	bf00      	nop
 800220e:	372c      	adds	r7, #44	; 0x2c
 8002210:	46bd      	mov	sp, r7
 8002212:	bc80      	pop	{r7}
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	10320000 	.word	0x10320000
 800221c:	10310000 	.word	0x10310000
 8002220:	10220000 	.word	0x10220000
 8002224:	10210000 	.word	0x10210000
 8002228:	10120000 	.word	0x10120000
 800222c:	10110000 	.word	0x10110000
 8002230:	40021000 	.word	0x40021000
 8002234:	40010000 	.word	0x40010000
 8002238:	40010800 	.word	0x40010800
 800223c:	40010c00 	.word	0x40010c00
 8002240:	40011000 	.word	0x40011000
 8002244:	40010400 	.word	0x40010400

08002248 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002248:	b480      	push	{r7}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	460b      	mov	r3, r1
 8002252:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	689a      	ldr	r2, [r3, #8]
 8002258:	887b      	ldrh	r3, [r7, #2]
 800225a:	4013      	ands	r3, r2
 800225c:	2b00      	cmp	r3, #0
 800225e:	d002      	beq.n	8002266 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002260:	2301      	movs	r3, #1
 8002262:	73fb      	strb	r3, [r7, #15]
 8002264:	e001      	b.n	800226a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002266:	2300      	movs	r3, #0
 8002268:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800226a:	7bfb      	ldrb	r3, [r7, #15]
}
 800226c:	4618      	mov	r0, r3
 800226e:	3714      	adds	r7, #20
 8002270:	46bd      	mov	sp, r7
 8002272:	bc80      	pop	{r7}
 8002274:	4770      	bx	lr

08002276 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002276:	b480      	push	{r7}
 8002278:	b083      	sub	sp, #12
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
 800227e:	460b      	mov	r3, r1
 8002280:	807b      	strh	r3, [r7, #2]
 8002282:	4613      	mov	r3, r2
 8002284:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002286:	787b      	ldrb	r3, [r7, #1]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d003      	beq.n	8002294 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800228c:	887a      	ldrh	r2, [r7, #2]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002292:	e003      	b.n	800229c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002294:	887b      	ldrh	r3, [r7, #2]
 8002296:	041a      	lsls	r2, r3, #16
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	611a      	str	r2, [r3, #16]
}
 800229c:	bf00      	nop
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bc80      	pop	{r7}
 80022a4:	4770      	bx	lr

080022a6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80022a6:	b480      	push	{r7}
 80022a8:	b085      	sub	sp, #20
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
 80022ae:	460b      	mov	r3, r1
 80022b0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80022b8:	887a      	ldrh	r2, [r7, #2]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	4013      	ands	r3, r2
 80022be:	041a      	lsls	r2, r3, #16
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	43d9      	mvns	r1, r3
 80022c4:	887b      	ldrh	r3, [r7, #2]
 80022c6:	400b      	ands	r3, r1
 80022c8:	431a      	orrs	r2, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	611a      	str	r2, [r3, #16]
}
 80022ce:	bf00      	nop
 80022d0:	3714      	adds	r7, #20
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bc80      	pop	{r7}
 80022d6:	4770      	bx	lr

080022d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b086      	sub	sp, #24
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d101      	bne.n	80022ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e26c      	b.n	80027c4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0301 	and.w	r3, r3, #1
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	f000 8087 	beq.w	8002406 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022f8:	4b92      	ldr	r3, [pc, #584]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f003 030c 	and.w	r3, r3, #12
 8002300:	2b04      	cmp	r3, #4
 8002302:	d00c      	beq.n	800231e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002304:	4b8f      	ldr	r3, [pc, #572]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f003 030c 	and.w	r3, r3, #12
 800230c:	2b08      	cmp	r3, #8
 800230e:	d112      	bne.n	8002336 <HAL_RCC_OscConfig+0x5e>
 8002310:	4b8c      	ldr	r3, [pc, #560]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002318:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800231c:	d10b      	bne.n	8002336 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800231e:	4b89      	ldr	r3, [pc, #548]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d06c      	beq.n	8002404 <HAL_RCC_OscConfig+0x12c>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d168      	bne.n	8002404 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e246      	b.n	80027c4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800233e:	d106      	bne.n	800234e <HAL_RCC_OscConfig+0x76>
 8002340:	4b80      	ldr	r3, [pc, #512]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a7f      	ldr	r2, [pc, #508]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 8002346:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800234a:	6013      	str	r3, [r2, #0]
 800234c:	e02e      	b.n	80023ac <HAL_RCC_OscConfig+0xd4>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d10c      	bne.n	8002370 <HAL_RCC_OscConfig+0x98>
 8002356:	4b7b      	ldr	r3, [pc, #492]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a7a      	ldr	r2, [pc, #488]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 800235c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002360:	6013      	str	r3, [r2, #0]
 8002362:	4b78      	ldr	r3, [pc, #480]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a77      	ldr	r2, [pc, #476]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 8002368:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800236c:	6013      	str	r3, [r2, #0]
 800236e:	e01d      	b.n	80023ac <HAL_RCC_OscConfig+0xd4>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002378:	d10c      	bne.n	8002394 <HAL_RCC_OscConfig+0xbc>
 800237a:	4b72      	ldr	r3, [pc, #456]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a71      	ldr	r2, [pc, #452]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 8002380:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002384:	6013      	str	r3, [r2, #0]
 8002386:	4b6f      	ldr	r3, [pc, #444]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a6e      	ldr	r2, [pc, #440]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 800238c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002390:	6013      	str	r3, [r2, #0]
 8002392:	e00b      	b.n	80023ac <HAL_RCC_OscConfig+0xd4>
 8002394:	4b6b      	ldr	r3, [pc, #428]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a6a      	ldr	r2, [pc, #424]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 800239a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800239e:	6013      	str	r3, [r2, #0]
 80023a0:	4b68      	ldr	r3, [pc, #416]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a67      	ldr	r2, [pc, #412]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 80023a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023aa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d013      	beq.n	80023dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b4:	f7ff fcb6 	bl	8001d24 <HAL_GetTick>
 80023b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ba:	e008      	b.n	80023ce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023bc:	f7ff fcb2 	bl	8001d24 <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b64      	cmp	r3, #100	; 0x64
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e1fa      	b.n	80027c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ce:	4b5d      	ldr	r3, [pc, #372]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d0f0      	beq.n	80023bc <HAL_RCC_OscConfig+0xe4>
 80023da:	e014      	b.n	8002406 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023dc:	f7ff fca2 	bl	8001d24 <HAL_GetTick>
 80023e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023e2:	e008      	b.n	80023f6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023e4:	f7ff fc9e 	bl	8001d24 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	2b64      	cmp	r3, #100	; 0x64
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e1e6      	b.n	80027c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023f6:	4b53      	ldr	r3, [pc, #332]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d1f0      	bne.n	80023e4 <HAL_RCC_OscConfig+0x10c>
 8002402:	e000      	b.n	8002406 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002404:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0302 	and.w	r3, r3, #2
 800240e:	2b00      	cmp	r3, #0
 8002410:	d063      	beq.n	80024da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002412:	4b4c      	ldr	r3, [pc, #304]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f003 030c 	and.w	r3, r3, #12
 800241a:	2b00      	cmp	r3, #0
 800241c:	d00b      	beq.n	8002436 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800241e:	4b49      	ldr	r3, [pc, #292]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f003 030c 	and.w	r3, r3, #12
 8002426:	2b08      	cmp	r3, #8
 8002428:	d11c      	bne.n	8002464 <HAL_RCC_OscConfig+0x18c>
 800242a:	4b46      	ldr	r3, [pc, #280]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d116      	bne.n	8002464 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002436:	4b43      	ldr	r3, [pc, #268]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d005      	beq.n	800244e <HAL_RCC_OscConfig+0x176>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	2b01      	cmp	r3, #1
 8002448:	d001      	beq.n	800244e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e1ba      	b.n	80027c4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800244e:	4b3d      	ldr	r3, [pc, #244]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	695b      	ldr	r3, [r3, #20]
 800245a:	00db      	lsls	r3, r3, #3
 800245c:	4939      	ldr	r1, [pc, #228]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 800245e:	4313      	orrs	r3, r2
 8002460:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002462:	e03a      	b.n	80024da <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	691b      	ldr	r3, [r3, #16]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d020      	beq.n	80024ae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800246c:	4b36      	ldr	r3, [pc, #216]	; (8002548 <HAL_RCC_OscConfig+0x270>)
 800246e:	2201      	movs	r2, #1
 8002470:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002472:	f7ff fc57 	bl	8001d24 <HAL_GetTick>
 8002476:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002478:	e008      	b.n	800248c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800247a:	f7ff fc53 	bl	8001d24 <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	2b02      	cmp	r3, #2
 8002486:	d901      	bls.n	800248c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	e19b      	b.n	80027c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800248c:	4b2d      	ldr	r3, [pc, #180]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0302 	and.w	r3, r3, #2
 8002494:	2b00      	cmp	r3, #0
 8002496:	d0f0      	beq.n	800247a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002498:	4b2a      	ldr	r3, [pc, #168]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	695b      	ldr	r3, [r3, #20]
 80024a4:	00db      	lsls	r3, r3, #3
 80024a6:	4927      	ldr	r1, [pc, #156]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 80024a8:	4313      	orrs	r3, r2
 80024aa:	600b      	str	r3, [r1, #0]
 80024ac:	e015      	b.n	80024da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024ae:	4b26      	ldr	r3, [pc, #152]	; (8002548 <HAL_RCC_OscConfig+0x270>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b4:	f7ff fc36 	bl	8001d24 <HAL_GetTick>
 80024b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ba:	e008      	b.n	80024ce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024bc:	f7ff fc32 	bl	8001d24 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d901      	bls.n	80024ce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e17a      	b.n	80027c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ce:	4b1d      	ldr	r3, [pc, #116]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d1f0      	bne.n	80024bc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0308 	and.w	r3, r3, #8
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d03a      	beq.n	800255c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	699b      	ldr	r3, [r3, #24]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d019      	beq.n	8002522 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024ee:	4b17      	ldr	r3, [pc, #92]	; (800254c <HAL_RCC_OscConfig+0x274>)
 80024f0:	2201      	movs	r2, #1
 80024f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024f4:	f7ff fc16 	bl	8001d24 <HAL_GetTick>
 80024f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024fa:	e008      	b.n	800250e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024fc:	f7ff fc12 	bl	8001d24 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b02      	cmp	r3, #2
 8002508:	d901      	bls.n	800250e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e15a      	b.n	80027c4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800250e:	4b0d      	ldr	r3, [pc, #52]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 8002510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d0f0      	beq.n	80024fc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800251a:	2001      	movs	r0, #1
 800251c:	f000 fa9a 	bl	8002a54 <RCC_Delay>
 8002520:	e01c      	b.n	800255c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002522:	4b0a      	ldr	r3, [pc, #40]	; (800254c <HAL_RCC_OscConfig+0x274>)
 8002524:	2200      	movs	r2, #0
 8002526:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002528:	f7ff fbfc 	bl	8001d24 <HAL_GetTick>
 800252c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800252e:	e00f      	b.n	8002550 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002530:	f7ff fbf8 	bl	8001d24 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	2b02      	cmp	r3, #2
 800253c:	d908      	bls.n	8002550 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e140      	b.n	80027c4 <HAL_RCC_OscConfig+0x4ec>
 8002542:	bf00      	nop
 8002544:	40021000 	.word	0x40021000
 8002548:	42420000 	.word	0x42420000
 800254c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002550:	4b9e      	ldr	r3, [pc, #632]	; (80027cc <HAL_RCC_OscConfig+0x4f4>)
 8002552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002554:	f003 0302 	and.w	r3, r3, #2
 8002558:	2b00      	cmp	r3, #0
 800255a:	d1e9      	bne.n	8002530 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0304 	and.w	r3, r3, #4
 8002564:	2b00      	cmp	r3, #0
 8002566:	f000 80a6 	beq.w	80026b6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800256a:	2300      	movs	r3, #0
 800256c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800256e:	4b97      	ldr	r3, [pc, #604]	; (80027cc <HAL_RCC_OscConfig+0x4f4>)
 8002570:	69db      	ldr	r3, [r3, #28]
 8002572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d10d      	bne.n	8002596 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800257a:	4b94      	ldr	r3, [pc, #592]	; (80027cc <HAL_RCC_OscConfig+0x4f4>)
 800257c:	69db      	ldr	r3, [r3, #28]
 800257e:	4a93      	ldr	r2, [pc, #588]	; (80027cc <HAL_RCC_OscConfig+0x4f4>)
 8002580:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002584:	61d3      	str	r3, [r2, #28]
 8002586:	4b91      	ldr	r3, [pc, #580]	; (80027cc <HAL_RCC_OscConfig+0x4f4>)
 8002588:	69db      	ldr	r3, [r3, #28]
 800258a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800258e:	60bb      	str	r3, [r7, #8]
 8002590:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002592:	2301      	movs	r3, #1
 8002594:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002596:	4b8e      	ldr	r3, [pc, #568]	; (80027d0 <HAL_RCC_OscConfig+0x4f8>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d118      	bne.n	80025d4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025a2:	4b8b      	ldr	r3, [pc, #556]	; (80027d0 <HAL_RCC_OscConfig+0x4f8>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a8a      	ldr	r2, [pc, #552]	; (80027d0 <HAL_RCC_OscConfig+0x4f8>)
 80025a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025ae:	f7ff fbb9 	bl	8001d24 <HAL_GetTick>
 80025b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025b4:	e008      	b.n	80025c8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025b6:	f7ff fbb5 	bl	8001d24 <HAL_GetTick>
 80025ba:	4602      	mov	r2, r0
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	2b64      	cmp	r3, #100	; 0x64
 80025c2:	d901      	bls.n	80025c8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	e0fd      	b.n	80027c4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025c8:	4b81      	ldr	r3, [pc, #516]	; (80027d0 <HAL_RCC_OscConfig+0x4f8>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d0f0      	beq.n	80025b6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d106      	bne.n	80025ea <HAL_RCC_OscConfig+0x312>
 80025dc:	4b7b      	ldr	r3, [pc, #492]	; (80027cc <HAL_RCC_OscConfig+0x4f4>)
 80025de:	6a1b      	ldr	r3, [r3, #32]
 80025e0:	4a7a      	ldr	r2, [pc, #488]	; (80027cc <HAL_RCC_OscConfig+0x4f4>)
 80025e2:	f043 0301 	orr.w	r3, r3, #1
 80025e6:	6213      	str	r3, [r2, #32]
 80025e8:	e02d      	b.n	8002646 <HAL_RCC_OscConfig+0x36e>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d10c      	bne.n	800260c <HAL_RCC_OscConfig+0x334>
 80025f2:	4b76      	ldr	r3, [pc, #472]	; (80027cc <HAL_RCC_OscConfig+0x4f4>)
 80025f4:	6a1b      	ldr	r3, [r3, #32]
 80025f6:	4a75      	ldr	r2, [pc, #468]	; (80027cc <HAL_RCC_OscConfig+0x4f4>)
 80025f8:	f023 0301 	bic.w	r3, r3, #1
 80025fc:	6213      	str	r3, [r2, #32]
 80025fe:	4b73      	ldr	r3, [pc, #460]	; (80027cc <HAL_RCC_OscConfig+0x4f4>)
 8002600:	6a1b      	ldr	r3, [r3, #32]
 8002602:	4a72      	ldr	r2, [pc, #456]	; (80027cc <HAL_RCC_OscConfig+0x4f4>)
 8002604:	f023 0304 	bic.w	r3, r3, #4
 8002608:	6213      	str	r3, [r2, #32]
 800260a:	e01c      	b.n	8002646 <HAL_RCC_OscConfig+0x36e>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	2b05      	cmp	r3, #5
 8002612:	d10c      	bne.n	800262e <HAL_RCC_OscConfig+0x356>
 8002614:	4b6d      	ldr	r3, [pc, #436]	; (80027cc <HAL_RCC_OscConfig+0x4f4>)
 8002616:	6a1b      	ldr	r3, [r3, #32]
 8002618:	4a6c      	ldr	r2, [pc, #432]	; (80027cc <HAL_RCC_OscConfig+0x4f4>)
 800261a:	f043 0304 	orr.w	r3, r3, #4
 800261e:	6213      	str	r3, [r2, #32]
 8002620:	4b6a      	ldr	r3, [pc, #424]	; (80027cc <HAL_RCC_OscConfig+0x4f4>)
 8002622:	6a1b      	ldr	r3, [r3, #32]
 8002624:	4a69      	ldr	r2, [pc, #420]	; (80027cc <HAL_RCC_OscConfig+0x4f4>)
 8002626:	f043 0301 	orr.w	r3, r3, #1
 800262a:	6213      	str	r3, [r2, #32]
 800262c:	e00b      	b.n	8002646 <HAL_RCC_OscConfig+0x36e>
 800262e:	4b67      	ldr	r3, [pc, #412]	; (80027cc <HAL_RCC_OscConfig+0x4f4>)
 8002630:	6a1b      	ldr	r3, [r3, #32]
 8002632:	4a66      	ldr	r2, [pc, #408]	; (80027cc <HAL_RCC_OscConfig+0x4f4>)
 8002634:	f023 0301 	bic.w	r3, r3, #1
 8002638:	6213      	str	r3, [r2, #32]
 800263a:	4b64      	ldr	r3, [pc, #400]	; (80027cc <HAL_RCC_OscConfig+0x4f4>)
 800263c:	6a1b      	ldr	r3, [r3, #32]
 800263e:	4a63      	ldr	r2, [pc, #396]	; (80027cc <HAL_RCC_OscConfig+0x4f4>)
 8002640:	f023 0304 	bic.w	r3, r3, #4
 8002644:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d015      	beq.n	800267a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800264e:	f7ff fb69 	bl	8001d24 <HAL_GetTick>
 8002652:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002654:	e00a      	b.n	800266c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002656:	f7ff fb65 	bl	8001d24 <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	f241 3288 	movw	r2, #5000	; 0x1388
 8002664:	4293      	cmp	r3, r2
 8002666:	d901      	bls.n	800266c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	e0ab      	b.n	80027c4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800266c:	4b57      	ldr	r3, [pc, #348]	; (80027cc <HAL_RCC_OscConfig+0x4f4>)
 800266e:	6a1b      	ldr	r3, [r3, #32]
 8002670:	f003 0302 	and.w	r3, r3, #2
 8002674:	2b00      	cmp	r3, #0
 8002676:	d0ee      	beq.n	8002656 <HAL_RCC_OscConfig+0x37e>
 8002678:	e014      	b.n	80026a4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800267a:	f7ff fb53 	bl	8001d24 <HAL_GetTick>
 800267e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002680:	e00a      	b.n	8002698 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002682:	f7ff fb4f 	bl	8001d24 <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002690:	4293      	cmp	r3, r2
 8002692:	d901      	bls.n	8002698 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	e095      	b.n	80027c4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002698:	4b4c      	ldr	r3, [pc, #304]	; (80027cc <HAL_RCC_OscConfig+0x4f4>)
 800269a:	6a1b      	ldr	r3, [r3, #32]
 800269c:	f003 0302 	and.w	r3, r3, #2
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d1ee      	bne.n	8002682 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80026a4:	7dfb      	ldrb	r3, [r7, #23]
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d105      	bne.n	80026b6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026aa:	4b48      	ldr	r3, [pc, #288]	; (80027cc <HAL_RCC_OscConfig+0x4f4>)
 80026ac:	69db      	ldr	r3, [r3, #28]
 80026ae:	4a47      	ldr	r2, [pc, #284]	; (80027cc <HAL_RCC_OscConfig+0x4f4>)
 80026b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026b4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	69db      	ldr	r3, [r3, #28]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	f000 8081 	beq.w	80027c2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026c0:	4b42      	ldr	r3, [pc, #264]	; (80027cc <HAL_RCC_OscConfig+0x4f4>)
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f003 030c 	and.w	r3, r3, #12
 80026c8:	2b08      	cmp	r3, #8
 80026ca:	d061      	beq.n	8002790 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	69db      	ldr	r3, [r3, #28]
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d146      	bne.n	8002762 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026d4:	4b3f      	ldr	r3, [pc, #252]	; (80027d4 <HAL_RCC_OscConfig+0x4fc>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026da:	f7ff fb23 	bl	8001d24 <HAL_GetTick>
 80026de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026e0:	e008      	b.n	80026f4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026e2:	f7ff fb1f 	bl	8001d24 <HAL_GetTick>
 80026e6:	4602      	mov	r2, r0
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d901      	bls.n	80026f4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	e067      	b.n	80027c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026f4:	4b35      	ldr	r3, [pc, #212]	; (80027cc <HAL_RCC_OscConfig+0x4f4>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d1f0      	bne.n	80026e2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6a1b      	ldr	r3, [r3, #32]
 8002704:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002708:	d108      	bne.n	800271c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800270a:	4b30      	ldr	r3, [pc, #192]	; (80027cc <HAL_RCC_OscConfig+0x4f4>)
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	492d      	ldr	r1, [pc, #180]	; (80027cc <HAL_RCC_OscConfig+0x4f4>)
 8002718:	4313      	orrs	r3, r2
 800271a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800271c:	4b2b      	ldr	r3, [pc, #172]	; (80027cc <HAL_RCC_OscConfig+0x4f4>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6a19      	ldr	r1, [r3, #32]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272c:	430b      	orrs	r3, r1
 800272e:	4927      	ldr	r1, [pc, #156]	; (80027cc <HAL_RCC_OscConfig+0x4f4>)
 8002730:	4313      	orrs	r3, r2
 8002732:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002734:	4b27      	ldr	r3, [pc, #156]	; (80027d4 <HAL_RCC_OscConfig+0x4fc>)
 8002736:	2201      	movs	r2, #1
 8002738:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800273a:	f7ff faf3 	bl	8001d24 <HAL_GetTick>
 800273e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002740:	e008      	b.n	8002754 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002742:	f7ff faef 	bl	8001d24 <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	2b02      	cmp	r3, #2
 800274e:	d901      	bls.n	8002754 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e037      	b.n	80027c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002754:	4b1d      	ldr	r3, [pc, #116]	; (80027cc <HAL_RCC_OscConfig+0x4f4>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d0f0      	beq.n	8002742 <HAL_RCC_OscConfig+0x46a>
 8002760:	e02f      	b.n	80027c2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002762:	4b1c      	ldr	r3, [pc, #112]	; (80027d4 <HAL_RCC_OscConfig+0x4fc>)
 8002764:	2200      	movs	r2, #0
 8002766:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002768:	f7ff fadc 	bl	8001d24 <HAL_GetTick>
 800276c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800276e:	e008      	b.n	8002782 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002770:	f7ff fad8 	bl	8001d24 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b02      	cmp	r3, #2
 800277c:	d901      	bls.n	8002782 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e020      	b.n	80027c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002782:	4b12      	ldr	r3, [pc, #72]	; (80027cc <HAL_RCC_OscConfig+0x4f4>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d1f0      	bne.n	8002770 <HAL_RCC_OscConfig+0x498>
 800278e:	e018      	b.n	80027c2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	69db      	ldr	r3, [r3, #28]
 8002794:	2b01      	cmp	r3, #1
 8002796:	d101      	bne.n	800279c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e013      	b.n	80027c4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800279c:	4b0b      	ldr	r3, [pc, #44]	; (80027cc <HAL_RCC_OscConfig+0x4f4>)
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a1b      	ldr	r3, [r3, #32]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d106      	bne.n	80027be <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d001      	beq.n	80027c2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e000      	b.n	80027c4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80027c2:	2300      	movs	r3, #0
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3718      	adds	r7, #24
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	40021000 	.word	0x40021000
 80027d0:	40007000 	.word	0x40007000
 80027d4:	42420060 	.word	0x42420060

080027d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d101      	bne.n	80027ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e0d0      	b.n	800298e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027ec:	4b6a      	ldr	r3, [pc, #424]	; (8002998 <HAL_RCC_ClockConfig+0x1c0>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0307 	and.w	r3, r3, #7
 80027f4:	683a      	ldr	r2, [r7, #0]
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d910      	bls.n	800281c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027fa:	4b67      	ldr	r3, [pc, #412]	; (8002998 <HAL_RCC_ClockConfig+0x1c0>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f023 0207 	bic.w	r2, r3, #7
 8002802:	4965      	ldr	r1, [pc, #404]	; (8002998 <HAL_RCC_ClockConfig+0x1c0>)
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	4313      	orrs	r3, r2
 8002808:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800280a:	4b63      	ldr	r3, [pc, #396]	; (8002998 <HAL_RCC_ClockConfig+0x1c0>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0307 	and.w	r3, r3, #7
 8002812:	683a      	ldr	r2, [r7, #0]
 8002814:	429a      	cmp	r2, r3
 8002816:	d001      	beq.n	800281c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e0b8      	b.n	800298e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0302 	and.w	r3, r3, #2
 8002824:	2b00      	cmp	r3, #0
 8002826:	d020      	beq.n	800286a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0304 	and.w	r3, r3, #4
 8002830:	2b00      	cmp	r3, #0
 8002832:	d005      	beq.n	8002840 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002834:	4b59      	ldr	r3, [pc, #356]	; (800299c <HAL_RCC_ClockConfig+0x1c4>)
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	4a58      	ldr	r2, [pc, #352]	; (800299c <HAL_RCC_ClockConfig+0x1c4>)
 800283a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800283e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0308 	and.w	r3, r3, #8
 8002848:	2b00      	cmp	r3, #0
 800284a:	d005      	beq.n	8002858 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800284c:	4b53      	ldr	r3, [pc, #332]	; (800299c <HAL_RCC_ClockConfig+0x1c4>)
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	4a52      	ldr	r2, [pc, #328]	; (800299c <HAL_RCC_ClockConfig+0x1c4>)
 8002852:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002856:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002858:	4b50      	ldr	r3, [pc, #320]	; (800299c <HAL_RCC_ClockConfig+0x1c4>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	494d      	ldr	r1, [pc, #308]	; (800299c <HAL_RCC_ClockConfig+0x1c4>)
 8002866:	4313      	orrs	r3, r2
 8002868:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0301 	and.w	r3, r3, #1
 8002872:	2b00      	cmp	r3, #0
 8002874:	d040      	beq.n	80028f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	2b01      	cmp	r3, #1
 800287c:	d107      	bne.n	800288e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800287e:	4b47      	ldr	r3, [pc, #284]	; (800299c <HAL_RCC_ClockConfig+0x1c4>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d115      	bne.n	80028b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e07f      	b.n	800298e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	2b02      	cmp	r3, #2
 8002894:	d107      	bne.n	80028a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002896:	4b41      	ldr	r3, [pc, #260]	; (800299c <HAL_RCC_ClockConfig+0x1c4>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d109      	bne.n	80028b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e073      	b.n	800298e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028a6:	4b3d      	ldr	r3, [pc, #244]	; (800299c <HAL_RCC_ClockConfig+0x1c4>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0302 	and.w	r3, r3, #2
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d101      	bne.n	80028b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e06b      	b.n	800298e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028b6:	4b39      	ldr	r3, [pc, #228]	; (800299c <HAL_RCC_ClockConfig+0x1c4>)
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f023 0203 	bic.w	r2, r3, #3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	4936      	ldr	r1, [pc, #216]	; (800299c <HAL_RCC_ClockConfig+0x1c4>)
 80028c4:	4313      	orrs	r3, r2
 80028c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028c8:	f7ff fa2c 	bl	8001d24 <HAL_GetTick>
 80028cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ce:	e00a      	b.n	80028e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028d0:	f7ff fa28 	bl	8001d24 <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	f241 3288 	movw	r2, #5000	; 0x1388
 80028de:	4293      	cmp	r3, r2
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e053      	b.n	800298e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028e6:	4b2d      	ldr	r3, [pc, #180]	; (800299c <HAL_RCC_ClockConfig+0x1c4>)
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f003 020c 	and.w	r2, r3, #12
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d1eb      	bne.n	80028d0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028f8:	4b27      	ldr	r3, [pc, #156]	; (8002998 <HAL_RCC_ClockConfig+0x1c0>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0307 	and.w	r3, r3, #7
 8002900:	683a      	ldr	r2, [r7, #0]
 8002902:	429a      	cmp	r2, r3
 8002904:	d210      	bcs.n	8002928 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002906:	4b24      	ldr	r3, [pc, #144]	; (8002998 <HAL_RCC_ClockConfig+0x1c0>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f023 0207 	bic.w	r2, r3, #7
 800290e:	4922      	ldr	r1, [pc, #136]	; (8002998 <HAL_RCC_ClockConfig+0x1c0>)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	4313      	orrs	r3, r2
 8002914:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002916:	4b20      	ldr	r3, [pc, #128]	; (8002998 <HAL_RCC_ClockConfig+0x1c0>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0307 	and.w	r3, r3, #7
 800291e:	683a      	ldr	r2, [r7, #0]
 8002920:	429a      	cmp	r2, r3
 8002922:	d001      	beq.n	8002928 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e032      	b.n	800298e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0304 	and.w	r3, r3, #4
 8002930:	2b00      	cmp	r3, #0
 8002932:	d008      	beq.n	8002946 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002934:	4b19      	ldr	r3, [pc, #100]	; (800299c <HAL_RCC_ClockConfig+0x1c4>)
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	4916      	ldr	r1, [pc, #88]	; (800299c <HAL_RCC_ClockConfig+0x1c4>)
 8002942:	4313      	orrs	r3, r2
 8002944:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0308 	and.w	r3, r3, #8
 800294e:	2b00      	cmp	r3, #0
 8002950:	d009      	beq.n	8002966 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002952:	4b12      	ldr	r3, [pc, #72]	; (800299c <HAL_RCC_ClockConfig+0x1c4>)
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	00db      	lsls	r3, r3, #3
 8002960:	490e      	ldr	r1, [pc, #56]	; (800299c <HAL_RCC_ClockConfig+0x1c4>)
 8002962:	4313      	orrs	r3, r2
 8002964:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002966:	f000 f821 	bl	80029ac <HAL_RCC_GetSysClockFreq>
 800296a:	4602      	mov	r2, r0
 800296c:	4b0b      	ldr	r3, [pc, #44]	; (800299c <HAL_RCC_ClockConfig+0x1c4>)
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	091b      	lsrs	r3, r3, #4
 8002972:	f003 030f 	and.w	r3, r3, #15
 8002976:	490a      	ldr	r1, [pc, #40]	; (80029a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002978:	5ccb      	ldrb	r3, [r1, r3]
 800297a:	fa22 f303 	lsr.w	r3, r2, r3
 800297e:	4a09      	ldr	r2, [pc, #36]	; (80029a4 <HAL_RCC_ClockConfig+0x1cc>)
 8002980:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002982:	4b09      	ldr	r3, [pc, #36]	; (80029a8 <HAL_RCC_ClockConfig+0x1d0>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4618      	mov	r0, r3
 8002988:	f7ff f98a 	bl	8001ca0 <HAL_InitTick>

  return HAL_OK;
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	3710      	adds	r7, #16
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	40022000 	.word	0x40022000
 800299c:	40021000 	.word	0x40021000
 80029a0:	080032b8 	.word	0x080032b8
 80029a4:	20000000 	.word	0x20000000
 80029a8:	20000004 	.word	0x20000004

080029ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b087      	sub	sp, #28
 80029b0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80029b2:	2300      	movs	r3, #0
 80029b4:	60fb      	str	r3, [r7, #12]
 80029b6:	2300      	movs	r3, #0
 80029b8:	60bb      	str	r3, [r7, #8]
 80029ba:	2300      	movs	r3, #0
 80029bc:	617b      	str	r3, [r7, #20]
 80029be:	2300      	movs	r3, #0
 80029c0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80029c2:	2300      	movs	r3, #0
 80029c4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80029c6:	4b1e      	ldr	r3, [pc, #120]	; (8002a40 <HAL_RCC_GetSysClockFreq+0x94>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f003 030c 	and.w	r3, r3, #12
 80029d2:	2b04      	cmp	r3, #4
 80029d4:	d002      	beq.n	80029dc <HAL_RCC_GetSysClockFreq+0x30>
 80029d6:	2b08      	cmp	r3, #8
 80029d8:	d003      	beq.n	80029e2 <HAL_RCC_GetSysClockFreq+0x36>
 80029da:	e027      	b.n	8002a2c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80029dc:	4b19      	ldr	r3, [pc, #100]	; (8002a44 <HAL_RCC_GetSysClockFreq+0x98>)
 80029de:	613b      	str	r3, [r7, #16]
      break;
 80029e0:	e027      	b.n	8002a32 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	0c9b      	lsrs	r3, r3, #18
 80029e6:	f003 030f 	and.w	r3, r3, #15
 80029ea:	4a17      	ldr	r2, [pc, #92]	; (8002a48 <HAL_RCC_GetSysClockFreq+0x9c>)
 80029ec:	5cd3      	ldrb	r3, [r2, r3]
 80029ee:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d010      	beq.n	8002a1c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80029fa:	4b11      	ldr	r3, [pc, #68]	; (8002a40 <HAL_RCC_GetSysClockFreq+0x94>)
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	0c5b      	lsrs	r3, r3, #17
 8002a00:	f003 0301 	and.w	r3, r3, #1
 8002a04:	4a11      	ldr	r2, [pc, #68]	; (8002a4c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002a06:	5cd3      	ldrb	r3, [r2, r3]
 8002a08:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a0d      	ldr	r2, [pc, #52]	; (8002a44 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a0e:	fb02 f203 	mul.w	r2, r2, r3
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a18:	617b      	str	r3, [r7, #20]
 8002a1a:	e004      	b.n	8002a26 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	4a0c      	ldr	r2, [pc, #48]	; (8002a50 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002a20:	fb02 f303 	mul.w	r3, r2, r3
 8002a24:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	613b      	str	r3, [r7, #16]
      break;
 8002a2a:	e002      	b.n	8002a32 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a2c:	4b05      	ldr	r3, [pc, #20]	; (8002a44 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a2e:	613b      	str	r3, [r7, #16]
      break;
 8002a30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a32:	693b      	ldr	r3, [r7, #16]
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	371c      	adds	r7, #28
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bc80      	pop	{r7}
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	40021000 	.word	0x40021000
 8002a44:	007a1200 	.word	0x007a1200
 8002a48:	080032c8 	.word	0x080032c8
 8002a4c:	080032d8 	.word	0x080032d8
 8002a50:	003d0900 	.word	0x003d0900

08002a54 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b085      	sub	sp, #20
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a5c:	4b0a      	ldr	r3, [pc, #40]	; (8002a88 <RCC_Delay+0x34>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a0a      	ldr	r2, [pc, #40]	; (8002a8c <RCC_Delay+0x38>)
 8002a62:	fba2 2303 	umull	r2, r3, r2, r3
 8002a66:	0a5b      	lsrs	r3, r3, #9
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	fb02 f303 	mul.w	r3, r2, r3
 8002a6e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a70:	bf00      	nop
  }
  while (Delay --);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	1e5a      	subs	r2, r3, #1
 8002a76:	60fa      	str	r2, [r7, #12]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d1f9      	bne.n	8002a70 <RCC_Delay+0x1c>
}
 8002a7c:	bf00      	nop
 8002a7e:	bf00      	nop
 8002a80:	3714      	adds	r7, #20
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bc80      	pop	{r7}
 8002a86:	4770      	bx	lr
 8002a88:	20000000 	.word	0x20000000
 8002a8c:	10624dd3 	.word	0x10624dd3

08002a90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d101      	bne.n	8002aa2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e041      	b.n	8002b26 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d106      	bne.n	8002abc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f7fe fff8 	bl	8001aac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2202      	movs	r2, #2
 8002ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	3304      	adds	r3, #4
 8002acc:	4619      	mov	r1, r3
 8002ace:	4610      	mov	r0, r2
 8002ad0:	f000 fa56 	bl	8002f80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3708      	adds	r7, #8
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
	...

08002b30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b085      	sub	sp, #20
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d001      	beq.n	8002b48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e035      	b.n	8002bb4 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2202      	movs	r2, #2
 8002b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68da      	ldr	r2, [r3, #12]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f042 0201 	orr.w	r2, r2, #1
 8002b5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a16      	ldr	r2, [pc, #88]	; (8002bc0 <HAL_TIM_Base_Start_IT+0x90>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d009      	beq.n	8002b7e <HAL_TIM_Base_Start_IT+0x4e>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b72:	d004      	beq.n	8002b7e <HAL_TIM_Base_Start_IT+0x4e>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a12      	ldr	r2, [pc, #72]	; (8002bc4 <HAL_TIM_Base_Start_IT+0x94>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d111      	bne.n	8002ba2 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f003 0307 	and.w	r3, r3, #7
 8002b88:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2b06      	cmp	r3, #6
 8002b8e:	d010      	beq.n	8002bb2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f042 0201 	orr.w	r2, r2, #1
 8002b9e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ba0:	e007      	b.n	8002bb2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f042 0201 	orr.w	r2, r2, #1
 8002bb0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002bb2:	2300      	movs	r3, #0
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3714      	adds	r7, #20
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bc80      	pop	{r7}
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	40012c00 	.word	0x40012c00
 8002bc4:	40000400 	.word	0x40000400

08002bc8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	691b      	ldr	r3, [r3, #16]
 8002bde:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d020      	beq.n	8002c2c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	f003 0302 	and.w	r3, r3, #2
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d01b      	beq.n	8002c2c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f06f 0202 	mvn.w	r2, #2
 8002bfc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2201      	movs	r2, #1
 8002c02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	699b      	ldr	r3, [r3, #24]
 8002c0a:	f003 0303 	and.w	r3, r3, #3
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d003      	beq.n	8002c1a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f000 f998 	bl	8002f48 <HAL_TIM_IC_CaptureCallback>
 8002c18:	e005      	b.n	8002c26 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f000 f98b 	bl	8002f36 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f000 f99a 	bl	8002f5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	f003 0304 	and.w	r3, r3, #4
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d020      	beq.n	8002c78 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	f003 0304 	and.w	r3, r3, #4
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d01b      	beq.n	8002c78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f06f 0204 	mvn.w	r2, #4
 8002c48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2202      	movs	r2, #2
 8002c4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	699b      	ldr	r3, [r3, #24]
 8002c56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d003      	beq.n	8002c66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f000 f972 	bl	8002f48 <HAL_TIM_IC_CaptureCallback>
 8002c64:	e005      	b.n	8002c72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f000 f965 	bl	8002f36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f000 f974 	bl	8002f5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	f003 0308 	and.w	r3, r3, #8
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d020      	beq.n	8002cc4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	f003 0308 	and.w	r3, r3, #8
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d01b      	beq.n	8002cc4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f06f 0208 	mvn.w	r2, #8
 8002c94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2204      	movs	r2, #4
 8002c9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	69db      	ldr	r3, [r3, #28]
 8002ca2:	f003 0303 	and.w	r3, r3, #3
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d003      	beq.n	8002cb2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f000 f94c 	bl	8002f48 <HAL_TIM_IC_CaptureCallback>
 8002cb0:	e005      	b.n	8002cbe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 f93f 	bl	8002f36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f000 f94e 	bl	8002f5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	f003 0310 	and.w	r3, r3, #16
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d020      	beq.n	8002d10 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	f003 0310 	and.w	r3, r3, #16
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d01b      	beq.n	8002d10 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f06f 0210 	mvn.w	r2, #16
 8002ce0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2208      	movs	r2, #8
 8002ce6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	69db      	ldr	r3, [r3, #28]
 8002cee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d003      	beq.n	8002cfe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f000 f926 	bl	8002f48 <HAL_TIM_IC_CaptureCallback>
 8002cfc:	e005      	b.n	8002d0a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 f919 	bl	8002f36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f000 f928 	bl	8002f5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	f003 0301 	and.w	r3, r3, #1
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d00c      	beq.n	8002d34 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	f003 0301 	and.w	r3, r3, #1
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d007      	beq.n	8002d34 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f06f 0201 	mvn.w	r2, #1
 8002d2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f7fe ff68 	bl	8001c04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d00c      	beq.n	8002d58 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d007      	beq.n	8002d58 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f000 fa6f 	bl	8003236 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d00c      	beq.n	8002d7c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d007      	beq.n	8002d7c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f000 f8f8 	bl	8002f6c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	f003 0320 	and.w	r3, r3, #32
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d00c      	beq.n	8002da0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f003 0320 	and.w	r3, r3, #32
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d007      	beq.n	8002da0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f06f 0220 	mvn.w	r2, #32
 8002d98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f000 fa42 	bl	8003224 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002da0:	bf00      	nop
 8002da2:	3710      	adds	r7, #16
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002db2:	2300      	movs	r3, #0
 8002db4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d101      	bne.n	8002dc4 <HAL_TIM_ConfigClockSource+0x1c>
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	e0b4      	b.n	8002f2e <HAL_TIM_ConfigClockSource+0x186>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2202      	movs	r2, #2
 8002dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002de2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002dea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	68ba      	ldr	r2, [r7, #8]
 8002df2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dfc:	d03e      	beq.n	8002e7c <HAL_TIM_ConfigClockSource+0xd4>
 8002dfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e02:	f200 8087 	bhi.w	8002f14 <HAL_TIM_ConfigClockSource+0x16c>
 8002e06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e0a:	f000 8086 	beq.w	8002f1a <HAL_TIM_ConfigClockSource+0x172>
 8002e0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e12:	d87f      	bhi.n	8002f14 <HAL_TIM_ConfigClockSource+0x16c>
 8002e14:	2b70      	cmp	r3, #112	; 0x70
 8002e16:	d01a      	beq.n	8002e4e <HAL_TIM_ConfigClockSource+0xa6>
 8002e18:	2b70      	cmp	r3, #112	; 0x70
 8002e1a:	d87b      	bhi.n	8002f14 <HAL_TIM_ConfigClockSource+0x16c>
 8002e1c:	2b60      	cmp	r3, #96	; 0x60
 8002e1e:	d050      	beq.n	8002ec2 <HAL_TIM_ConfigClockSource+0x11a>
 8002e20:	2b60      	cmp	r3, #96	; 0x60
 8002e22:	d877      	bhi.n	8002f14 <HAL_TIM_ConfigClockSource+0x16c>
 8002e24:	2b50      	cmp	r3, #80	; 0x50
 8002e26:	d03c      	beq.n	8002ea2 <HAL_TIM_ConfigClockSource+0xfa>
 8002e28:	2b50      	cmp	r3, #80	; 0x50
 8002e2a:	d873      	bhi.n	8002f14 <HAL_TIM_ConfigClockSource+0x16c>
 8002e2c:	2b40      	cmp	r3, #64	; 0x40
 8002e2e:	d058      	beq.n	8002ee2 <HAL_TIM_ConfigClockSource+0x13a>
 8002e30:	2b40      	cmp	r3, #64	; 0x40
 8002e32:	d86f      	bhi.n	8002f14 <HAL_TIM_ConfigClockSource+0x16c>
 8002e34:	2b30      	cmp	r3, #48	; 0x30
 8002e36:	d064      	beq.n	8002f02 <HAL_TIM_ConfigClockSource+0x15a>
 8002e38:	2b30      	cmp	r3, #48	; 0x30
 8002e3a:	d86b      	bhi.n	8002f14 <HAL_TIM_ConfigClockSource+0x16c>
 8002e3c:	2b20      	cmp	r3, #32
 8002e3e:	d060      	beq.n	8002f02 <HAL_TIM_ConfigClockSource+0x15a>
 8002e40:	2b20      	cmp	r3, #32
 8002e42:	d867      	bhi.n	8002f14 <HAL_TIM_ConfigClockSource+0x16c>
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d05c      	beq.n	8002f02 <HAL_TIM_ConfigClockSource+0x15a>
 8002e48:	2b10      	cmp	r3, #16
 8002e4a:	d05a      	beq.n	8002f02 <HAL_TIM_ConfigClockSource+0x15a>
 8002e4c:	e062      	b.n	8002f14 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6818      	ldr	r0, [r3, #0]
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	6899      	ldr	r1, [r3, #8]
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	685a      	ldr	r2, [r3, #4]
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	f000 f96a 	bl	8003136 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002e70:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68ba      	ldr	r2, [r7, #8]
 8002e78:	609a      	str	r2, [r3, #8]
      break;
 8002e7a:	e04f      	b.n	8002f1c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6818      	ldr	r0, [r3, #0]
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	6899      	ldr	r1, [r3, #8]
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	685a      	ldr	r2, [r3, #4]
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	f000 f953 	bl	8003136 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	689a      	ldr	r2, [r3, #8]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e9e:	609a      	str	r2, [r3, #8]
      break;
 8002ea0:	e03c      	b.n	8002f1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6818      	ldr	r0, [r3, #0]
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	6859      	ldr	r1, [r3, #4]
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	461a      	mov	r2, r3
 8002eb0:	f000 f8ca 	bl	8003048 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2150      	movs	r1, #80	; 0x50
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f000 f921 	bl	8003102 <TIM_ITRx_SetConfig>
      break;
 8002ec0:	e02c      	b.n	8002f1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6818      	ldr	r0, [r3, #0]
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	6859      	ldr	r1, [r3, #4]
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	461a      	mov	r2, r3
 8002ed0:	f000 f8e8 	bl	80030a4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2160      	movs	r1, #96	; 0x60
 8002eda:	4618      	mov	r0, r3
 8002edc:	f000 f911 	bl	8003102 <TIM_ITRx_SetConfig>
      break;
 8002ee0:	e01c      	b.n	8002f1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6818      	ldr	r0, [r3, #0]
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	6859      	ldr	r1, [r3, #4]
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	461a      	mov	r2, r3
 8002ef0:	f000 f8aa 	bl	8003048 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2140      	movs	r1, #64	; 0x40
 8002efa:	4618      	mov	r0, r3
 8002efc:	f000 f901 	bl	8003102 <TIM_ITRx_SetConfig>
      break;
 8002f00:	e00c      	b.n	8002f1c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	4610      	mov	r0, r2
 8002f0e:	f000 f8f8 	bl	8003102 <TIM_ITRx_SetConfig>
      break;
 8002f12:	e003      	b.n	8002f1c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	73fb      	strb	r3, [r7, #15]
      break;
 8002f18:	e000      	b.n	8002f1c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002f1a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3710      	adds	r7, #16
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}

08002f36 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f36:	b480      	push	{r7}
 8002f38:	b083      	sub	sp, #12
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f3e:	bf00      	nop
 8002f40:	370c      	adds	r7, #12
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bc80      	pop	{r7}
 8002f46:	4770      	bx	lr

08002f48 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f50:	bf00      	nop
 8002f52:	370c      	adds	r7, #12
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bc80      	pop	{r7}
 8002f58:	4770      	bx	lr

08002f5a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f5a:	b480      	push	{r7}
 8002f5c:	b083      	sub	sp, #12
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f62:	bf00      	nop
 8002f64:	370c      	adds	r7, #12
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bc80      	pop	{r7}
 8002f6a:	4770      	bx	lr

08002f6c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f74:	bf00      	nop
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bc80      	pop	{r7}
 8002f7c:	4770      	bx	lr
	...

08002f80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b085      	sub	sp, #20
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	4a2b      	ldr	r2, [pc, #172]	; (8003040 <TIM_Base_SetConfig+0xc0>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d007      	beq.n	8002fa8 <TIM_Base_SetConfig+0x28>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f9e:	d003      	beq.n	8002fa8 <TIM_Base_SetConfig+0x28>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	4a28      	ldr	r2, [pc, #160]	; (8003044 <TIM_Base_SetConfig+0xc4>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d108      	bne.n	8002fba <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	68fa      	ldr	r2, [r7, #12]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a20      	ldr	r2, [pc, #128]	; (8003040 <TIM_Base_SetConfig+0xc0>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d007      	beq.n	8002fd2 <TIM_Base_SetConfig+0x52>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fc8:	d003      	beq.n	8002fd2 <TIM_Base_SetConfig+0x52>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a1d      	ldr	r2, [pc, #116]	; (8003044 <TIM_Base_SetConfig+0xc4>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d108      	bne.n	8002fe4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	68fa      	ldr	r2, [r7, #12]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	68fa      	ldr	r2, [r7, #12]
 8002ff6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	689a      	ldr	r2, [r3, #8]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4a0d      	ldr	r2, [pc, #52]	; (8003040 <TIM_Base_SetConfig+0xc0>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d103      	bne.n	8003018 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	691a      	ldr	r2, [r3, #16]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	2b00      	cmp	r3, #0
 8003028:	d005      	beq.n	8003036 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	691b      	ldr	r3, [r3, #16]
 800302e:	f023 0201 	bic.w	r2, r3, #1
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	611a      	str	r2, [r3, #16]
  }
}
 8003036:	bf00      	nop
 8003038:	3714      	adds	r7, #20
 800303a:	46bd      	mov	sp, r7
 800303c:	bc80      	pop	{r7}
 800303e:	4770      	bx	lr
 8003040:	40012c00 	.word	0x40012c00
 8003044:	40000400 	.word	0x40000400

08003048 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003048:	b480      	push	{r7}
 800304a:	b087      	sub	sp, #28
 800304c:	af00      	add	r7, sp, #0
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	60b9      	str	r1, [r7, #8]
 8003052:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6a1b      	ldr	r3, [r3, #32]
 8003058:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6a1b      	ldr	r3, [r3, #32]
 800305e:	f023 0201 	bic.w	r2, r3, #1
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	699b      	ldr	r3, [r3, #24]
 800306a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003072:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	011b      	lsls	r3, r3, #4
 8003078:	693a      	ldr	r2, [r7, #16]
 800307a:	4313      	orrs	r3, r2
 800307c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	f023 030a 	bic.w	r3, r3, #10
 8003084:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003086:	697a      	ldr	r2, [r7, #20]
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	4313      	orrs	r3, r2
 800308c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	693a      	ldr	r2, [r7, #16]
 8003092:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	697a      	ldr	r2, [r7, #20]
 8003098:	621a      	str	r2, [r3, #32]
}
 800309a:	bf00      	nop
 800309c:	371c      	adds	r7, #28
 800309e:	46bd      	mov	sp, r7
 80030a0:	bc80      	pop	{r7}
 80030a2:	4770      	bx	lr

080030a4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b087      	sub	sp, #28
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	60b9      	str	r1, [r7, #8]
 80030ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6a1b      	ldr	r3, [r3, #32]
 80030b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6a1b      	ldr	r3, [r3, #32]
 80030ba:	f023 0210 	bic.w	r2, r3, #16
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	699b      	ldr	r3, [r3, #24]
 80030c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80030ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	031b      	lsls	r3, r3, #12
 80030d4:	693a      	ldr	r2, [r7, #16]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80030e0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	011b      	lsls	r3, r3, #4
 80030e6:	697a      	ldr	r2, [r7, #20]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	693a      	ldr	r2, [r7, #16]
 80030f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	697a      	ldr	r2, [r7, #20]
 80030f6:	621a      	str	r2, [r3, #32]
}
 80030f8:	bf00      	nop
 80030fa:	371c      	adds	r7, #28
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bc80      	pop	{r7}
 8003100:	4770      	bx	lr

08003102 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003102:	b480      	push	{r7}
 8003104:	b085      	sub	sp, #20
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]
 800310a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003118:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800311a:	683a      	ldr	r2, [r7, #0]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	4313      	orrs	r3, r2
 8003120:	f043 0307 	orr.w	r3, r3, #7
 8003124:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	68fa      	ldr	r2, [r7, #12]
 800312a:	609a      	str	r2, [r3, #8]
}
 800312c:	bf00      	nop
 800312e:	3714      	adds	r7, #20
 8003130:	46bd      	mov	sp, r7
 8003132:	bc80      	pop	{r7}
 8003134:	4770      	bx	lr

08003136 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003136:	b480      	push	{r7}
 8003138:	b087      	sub	sp, #28
 800313a:	af00      	add	r7, sp, #0
 800313c:	60f8      	str	r0, [r7, #12]
 800313e:	60b9      	str	r1, [r7, #8]
 8003140:	607a      	str	r2, [r7, #4]
 8003142:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003150:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	021a      	lsls	r2, r3, #8
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	431a      	orrs	r2, r3
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	4313      	orrs	r3, r2
 800315e:	697a      	ldr	r2, [r7, #20]
 8003160:	4313      	orrs	r3, r2
 8003162:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	697a      	ldr	r2, [r7, #20]
 8003168:	609a      	str	r2, [r3, #8]
}
 800316a:	bf00      	nop
 800316c:	371c      	adds	r7, #28
 800316e:	46bd      	mov	sp, r7
 8003170:	bc80      	pop	{r7}
 8003172:	4770      	bx	lr

08003174 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003174:	b480      	push	{r7}
 8003176:	b085      	sub	sp, #20
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003184:	2b01      	cmp	r3, #1
 8003186:	d101      	bne.n	800318c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003188:	2302      	movs	r3, #2
 800318a:	e041      	b.n	8003210 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2202      	movs	r2, #2
 8003198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	68fa      	ldr	r2, [r7, #12]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	68fa      	ldr	r2, [r7, #12]
 80031c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a14      	ldr	r2, [pc, #80]	; (800321c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d009      	beq.n	80031e4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031d8:	d004      	beq.n	80031e4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a10      	ldr	r2, [pc, #64]	; (8003220 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d10c      	bne.n	80031fe <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031ea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	68ba      	ldr	r2, [r7, #8]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	68ba      	ldr	r2, [r7, #8]
 80031fc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2201      	movs	r2, #1
 8003202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800320e:	2300      	movs	r3, #0
}
 8003210:	4618      	mov	r0, r3
 8003212:	3714      	adds	r7, #20
 8003214:	46bd      	mov	sp, r7
 8003216:	bc80      	pop	{r7}
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop
 800321c:	40012c00 	.word	0x40012c00
 8003220:	40000400 	.word	0x40000400

08003224 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003224:	b480      	push	{r7}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800322c:	bf00      	nop
 800322e:	370c      	adds	r7, #12
 8003230:	46bd      	mov	sp, r7
 8003232:	bc80      	pop	{r7}
 8003234:	4770      	bx	lr

08003236 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003236:	b480      	push	{r7}
 8003238:	b083      	sub	sp, #12
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800323e:	bf00      	nop
 8003240:	370c      	adds	r7, #12
 8003242:	46bd      	mov	sp, r7
 8003244:	bc80      	pop	{r7}
 8003246:	4770      	bx	lr

08003248 <__libc_init_array>:
 8003248:	b570      	push	{r4, r5, r6, lr}
 800324a:	2600      	movs	r6, #0
 800324c:	4d0c      	ldr	r5, [pc, #48]	; (8003280 <__libc_init_array+0x38>)
 800324e:	4c0d      	ldr	r4, [pc, #52]	; (8003284 <__libc_init_array+0x3c>)
 8003250:	1b64      	subs	r4, r4, r5
 8003252:	10a4      	asrs	r4, r4, #2
 8003254:	42a6      	cmp	r6, r4
 8003256:	d109      	bne.n	800326c <__libc_init_array+0x24>
 8003258:	f000 f822 	bl	80032a0 <_init>
 800325c:	2600      	movs	r6, #0
 800325e:	4d0a      	ldr	r5, [pc, #40]	; (8003288 <__libc_init_array+0x40>)
 8003260:	4c0a      	ldr	r4, [pc, #40]	; (800328c <__libc_init_array+0x44>)
 8003262:	1b64      	subs	r4, r4, r5
 8003264:	10a4      	asrs	r4, r4, #2
 8003266:	42a6      	cmp	r6, r4
 8003268:	d105      	bne.n	8003276 <__libc_init_array+0x2e>
 800326a:	bd70      	pop	{r4, r5, r6, pc}
 800326c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003270:	4798      	blx	r3
 8003272:	3601      	adds	r6, #1
 8003274:	e7ee      	b.n	8003254 <__libc_init_array+0xc>
 8003276:	f855 3b04 	ldr.w	r3, [r5], #4
 800327a:	4798      	blx	r3
 800327c:	3601      	adds	r6, #1
 800327e:	e7f2      	b.n	8003266 <__libc_init_array+0x1e>
 8003280:	080032dc 	.word	0x080032dc
 8003284:	080032dc 	.word	0x080032dc
 8003288:	080032dc 	.word	0x080032dc
 800328c:	080032e0 	.word	0x080032e0

08003290 <memset>:
 8003290:	4603      	mov	r3, r0
 8003292:	4402      	add	r2, r0
 8003294:	4293      	cmp	r3, r2
 8003296:	d100      	bne.n	800329a <memset+0xa>
 8003298:	4770      	bx	lr
 800329a:	f803 1b01 	strb.w	r1, [r3], #1
 800329e:	e7f9      	b.n	8003294 <memset+0x4>

080032a0 <_init>:
 80032a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032a2:	bf00      	nop
 80032a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032a6:	bc08      	pop	{r3}
 80032a8:	469e      	mov	lr, r3
 80032aa:	4770      	bx	lr

080032ac <_fini>:
 80032ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032ae:	bf00      	nop
 80032b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032b2:	bc08      	pop	{r3}
 80032b4:	469e      	mov	lr, r3
 80032b6:	4770      	bx	lr
