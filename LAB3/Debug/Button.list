
Button.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036ac  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080037b8  080037b8  000137b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037dc  080037dc  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080037dc  080037dc  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080037dc  080037dc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037dc  080037dc  000137dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080037e0  080037e0  000137e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080037e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  20000010  080037f4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  080037f4  00020120  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009bfc  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c2c  00000000  00000000  00029c35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b20  00000000  00000000  0002b868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a00  00000000  00000000  0002c388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001628a  00000000  00000000  0002cd88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c1b4  00000000  00000000  00043012  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082786  00000000  00000000  0004f1c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d194c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b28  00000000  00000000  000d19a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	080037a0 	.word	0x080037a0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	080037a0 	.word	0x080037a0

0800014c <SetMode>:
int mode1_flag = 0;
int mode2_flag = 0;
int mode3_flag = 0;
int mode4_flag = 0;
int save_counterTimeSet = 0;
void SetMode(void){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	if(ProcessButton3() == 1){
 8000150:	f001 f956 	bl	8001400 <ProcessButton3>
 8000154:	4603      	mov	r3, r0
 8000156:	2b01      	cmp	r3, #1
 8000158:	d135      	bne.n	80001c6 <SetMode+0x7a>
		if(counterMode == 2){
 800015a:	4b1c      	ldr	r3, [pc, #112]	; (80001cc <SetMode+0x80>)
 800015c:	681b      	ldr	r3, [r3, #0]
 800015e:	2b02      	cmp	r3, #2
 8000160:	d10c      	bne.n	800017c <SetMode+0x30>
			mode2_flag = 1;
 8000162:	4b1b      	ldr	r3, [pc, #108]	; (80001d0 <SetMode+0x84>)
 8000164:	2201      	movs	r2, #1
 8000166:	601a      	str	r2, [r3, #0]
			mode3_flag = 0;
 8000168:	4b1a      	ldr	r3, [pc, #104]	; (80001d4 <SetMode+0x88>)
 800016a:	2200      	movs	r2, #0
 800016c:	601a      	str	r2, [r3, #0]
			mode4_flag = 0;
 800016e:	4b1a      	ldr	r3, [pc, #104]	; (80001d8 <SetMode+0x8c>)
 8000170:	2200      	movs	r2, #0
 8000172:	601a      	str	r2, [r3, #0]
			save_counterTimeSet = counterTimeSet;
 8000174:	4b19      	ldr	r3, [pc, #100]	; (80001dc <SetMode+0x90>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4a19      	ldr	r2, [pc, #100]	; (80001e0 <SetMode+0x94>)
 800017a:	6013      	str	r3, [r2, #0]
		}
		if(counterMode == 3){
 800017c:	4b13      	ldr	r3, [pc, #76]	; (80001cc <SetMode+0x80>)
 800017e:	681b      	ldr	r3, [r3, #0]
 8000180:	2b03      	cmp	r3, #3
 8000182:	d10c      	bne.n	800019e <SetMode+0x52>
			mode2_flag = 0;
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <SetMode+0x84>)
 8000186:	2200      	movs	r2, #0
 8000188:	601a      	str	r2, [r3, #0]
			mode3_flag = 1;
 800018a:	4b12      	ldr	r3, [pc, #72]	; (80001d4 <SetMode+0x88>)
 800018c:	2201      	movs	r2, #1
 800018e:	601a      	str	r2, [r3, #0]
			mode4_flag = 0;
 8000190:	4b11      	ldr	r3, [pc, #68]	; (80001d8 <SetMode+0x8c>)
 8000192:	2200      	movs	r2, #0
 8000194:	601a      	str	r2, [r3, #0]
			save_counterTimeSet = counterTimeSet;
 8000196:	4b11      	ldr	r3, [pc, #68]	; (80001dc <SetMode+0x90>)
 8000198:	681b      	ldr	r3, [r3, #0]
 800019a:	4a11      	ldr	r2, [pc, #68]	; (80001e0 <SetMode+0x94>)
 800019c:	6013      	str	r3, [r2, #0]
		}
		if(counterMode == 4){
 800019e:	4b0b      	ldr	r3, [pc, #44]	; (80001cc <SetMode+0x80>)
 80001a0:	681b      	ldr	r3, [r3, #0]
 80001a2:	2b04      	cmp	r3, #4
 80001a4:	d10f      	bne.n	80001c6 <SetMode+0x7a>
			mode1_flag = 1;
 80001a6:	4b0f      	ldr	r3, [pc, #60]	; (80001e4 <SetMode+0x98>)
 80001a8:	2201      	movs	r2, #1
 80001aa:	601a      	str	r2, [r3, #0]
			mode2_flag = 0;
 80001ac:	4b08      	ldr	r3, [pc, #32]	; (80001d0 <SetMode+0x84>)
 80001ae:	2200      	movs	r2, #0
 80001b0:	601a      	str	r2, [r3, #0]
			mode3_flag = 0;
 80001b2:	4b08      	ldr	r3, [pc, #32]	; (80001d4 <SetMode+0x88>)
 80001b4:	2200      	movs	r2, #0
 80001b6:	601a      	str	r2, [r3, #0]
			mode4_flag = 1;
 80001b8:	4b07      	ldr	r3, [pc, #28]	; (80001d8 <SetMode+0x8c>)
 80001ba:	2201      	movs	r2, #1
 80001bc:	601a      	str	r2, [r3, #0]
			save_counterTimeSet = counterTimeSet;
 80001be:	4b07      	ldr	r3, [pc, #28]	; (80001dc <SetMode+0x90>)
 80001c0:	681b      	ldr	r3, [r3, #0]
 80001c2:	4a07      	ldr	r2, [pc, #28]	; (80001e0 <SetMode+0x94>)
 80001c4:	6013      	str	r3, [r2, #0]
		}
	}
}
 80001c6:	bf00      	nop
 80001c8:	bd80      	pop	{r7, pc}
 80001ca:	bf00      	nop
 80001cc:	20000058 	.word	0x20000058
 80001d0:	20000034 	.word	0x20000034
 80001d4:	20000038 	.word	0x20000038
 80001d8:	2000003c 	.word	0x2000003c
 80001dc:	2000005c 	.word	0x2000005c
 80001e0:	20000040 	.word	0x20000040
 80001e4:	20000030 	.word	0x20000030

080001e8 <ChangeModeX>:
void ChangeModeX(void){
 80001e8:	b580      	push	{r7, lr}
 80001ea:	af00      	add	r7, sp, #0
	if(counterMode == 1){
 80001ec:	4b1a      	ldr	r3, [pc, #104]	; (8000258 <ChangeModeX+0x70>)
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	2b01      	cmp	r3, #1
 80001f2:	d102      	bne.n	80001fa <ChangeModeX+0x12>
		mode4_flag = 0;
 80001f4:	4b19      	ldr	r3, [pc, #100]	; (800025c <ChangeModeX+0x74>)
 80001f6:	2200      	movs	r2, #0
 80001f8:	601a      	str	r2, [r3, #0]
	}
	if(counterMode == 2){
 80001fa:	4b17      	ldr	r3, [pc, #92]	; (8000258 <ChangeModeX+0x70>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	2b02      	cmp	r3, #2
 8000200:	d108      	bne.n	8000214 <ChangeModeX+0x2c>
		if(mode2_flag == 0){
 8000202:	4b17      	ldr	r3, [pc, #92]	; (8000260 <ChangeModeX+0x78>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	2b00      	cmp	r3, #0
 8000208:	d104      	bne.n	8000214 <ChangeModeX+0x2c>
			statusx = CONF_RED;
 800020a:	4b16      	ldr	r3, [pc, #88]	; (8000264 <ChangeModeX+0x7c>)
 800020c:	2208      	movs	r2, #8
 800020e:	601a      	str	r2, [r3, #0]
			InitLED();
 8000210:	f001 fcea 	bl	8001be8 <InitLED>
		}
	}
	if(counterMode == 3){
 8000214:	4b10      	ldr	r3, [pc, #64]	; (8000258 <ChangeModeX+0x70>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	2b03      	cmp	r3, #3
 800021a:	d10b      	bne.n	8000234 <ChangeModeX+0x4c>
		mode2_flag = 0;
 800021c:	4b10      	ldr	r3, [pc, #64]	; (8000260 <ChangeModeX+0x78>)
 800021e:	2200      	movs	r2, #0
 8000220:	601a      	str	r2, [r3, #0]
		if(mode3_flag == 0){
 8000222:	4b11      	ldr	r3, [pc, #68]	; (8000268 <ChangeModeX+0x80>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	2b00      	cmp	r3, #0
 8000228:	d104      	bne.n	8000234 <ChangeModeX+0x4c>
			statusx = CONF_GREEN;
 800022a:	4b0e      	ldr	r3, [pc, #56]	; (8000264 <ChangeModeX+0x7c>)
 800022c:	2209      	movs	r2, #9
 800022e:	601a      	str	r2, [r3, #0]
			InitLED();
 8000230:	f001 fcda 	bl	8001be8 <InitLED>
		}
	}
	if(counterMode == 4){
 8000234:	4b08      	ldr	r3, [pc, #32]	; (8000258 <ChangeModeX+0x70>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	2b04      	cmp	r3, #4
 800023a:	d10b      	bne.n	8000254 <ChangeModeX+0x6c>
		mode3_flag = 0;
 800023c:	4b0a      	ldr	r3, [pc, #40]	; (8000268 <ChangeModeX+0x80>)
 800023e:	2200      	movs	r2, #0
 8000240:	601a      	str	r2, [r3, #0]
		if(mode4_flag == 0){
 8000242:	4b06      	ldr	r3, [pc, #24]	; (800025c <ChangeModeX+0x74>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	2b00      	cmp	r3, #0
 8000248:	d104      	bne.n	8000254 <ChangeModeX+0x6c>
			statusx = CONF_YELLOW;
 800024a:	4b06      	ldr	r3, [pc, #24]	; (8000264 <ChangeModeX+0x7c>)
 800024c:	220a      	movs	r2, #10
 800024e:	601a      	str	r2, [r3, #0]
			InitLED();
 8000250:	f001 fcca 	bl	8001be8 <InitLED>
		}
	}
}
 8000254:	bf00      	nop
 8000256:	bd80      	pop	{r7, pc}
 8000258:	20000058 	.word	0x20000058
 800025c:	2000003c 	.word	0x2000003c
 8000260:	20000034 	.word	0x20000034
 8000264:	20000044 	.word	0x20000044
 8000268:	20000038 	.word	0x20000038

0800026c <ChangeModeY>:
void ChangeModeY(void){
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0
	if(counterMode == 1){
 8000270:	4b35      	ldr	r3, [pc, #212]	; (8000348 <ChangeModeY+0xdc>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	2b01      	cmp	r3, #1
 8000276:	d137      	bne.n	80002e8 <ChangeModeY+0x7c>
		mode4_flag = 0;
 8000278:	4b34      	ldr	r3, [pc, #208]	; (800034c <ChangeModeY+0xe0>)
 800027a:	2200      	movs	r2, #0
 800027c:	601a      	str	r2, [r3, #0]
		if(mode1_flag == 1){
 800027e:	4b34      	ldr	r3, [pc, #208]	; (8000350 <ChangeModeY+0xe4>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	2b01      	cmp	r3, #1
 8000284:	d130      	bne.n	80002e8 <ChangeModeY+0x7c>
			mode1_flag = 0;
 8000286:	4b32      	ldr	r3, [pc, #200]	; (8000350 <ChangeModeY+0xe4>)
 8000288:	2200      	movs	r2, #0
 800028a:	601a      	str	r2, [r3, #0]
			statusx = AUTO_RED;
 800028c:	4b31      	ldr	r3, [pc, #196]	; (8000354 <ChangeModeY+0xe8>)
 800028e:	2202      	movs	r2, #2
 8000290:	601a      	str	r2, [r3, #0]
			setTimer(0,5000);
 8000292:	f241 3188 	movw	r1, #5000	; 0x1388
 8000296:	2000      	movs	r0, #0
 8000298:	f001 fee6 	bl	8002068 <setTimer>
			setTimer(2,100);
 800029c:	2164      	movs	r1, #100	; 0x64
 800029e:	2002      	movs	r0, #2
 80002a0:	f001 fee2 	bl	8002068 <setTimer>
			number_clock1 = timer_counter[0]/100;
 80002a4:	4b2c      	ldr	r3, [pc, #176]	; (8000358 <ChangeModeY+0xec>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	4a2c      	ldr	r2, [pc, #176]	; (800035c <ChangeModeY+0xf0>)
 80002aa:	fb82 1203 	smull	r1, r2, r2, r3
 80002ae:	1152      	asrs	r2, r2, #5
 80002b0:	17db      	asrs	r3, r3, #31
 80002b2:	1ad3      	subs	r3, r2, r3
 80002b4:	4a2a      	ldr	r2, [pc, #168]	; (8000360 <ChangeModeY+0xf4>)
 80002b6:	6013      	str	r3, [r2, #0]
			statusy = AUTO_GREEN;
 80002b8:	4b2a      	ldr	r3, [pc, #168]	; (8000364 <ChangeModeY+0xf8>)
 80002ba:	2203      	movs	r2, #3
 80002bc:	601a      	str	r2, [r3, #0]
			setTimer(1,3000);
 80002be:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80002c2:	2001      	movs	r0, #1
 80002c4:	f001 fed0 	bl	8002068 <setTimer>
			setTimer(3,100);
 80002c8:	2164      	movs	r1, #100	; 0x64
 80002ca:	2003      	movs	r0, #3
 80002cc:	f001 fecc 	bl	8002068 <setTimer>
			number_clock2 = timer_counter[1]/100;
 80002d0:	4b21      	ldr	r3, [pc, #132]	; (8000358 <ChangeModeY+0xec>)
 80002d2:	685b      	ldr	r3, [r3, #4]
 80002d4:	4a21      	ldr	r2, [pc, #132]	; (800035c <ChangeModeY+0xf0>)
 80002d6:	fb82 1203 	smull	r1, r2, r2, r3
 80002da:	1152      	asrs	r2, r2, #5
 80002dc:	17db      	asrs	r3, r3, #31
 80002de:	1ad3      	subs	r3, r2, r3
 80002e0:	4a21      	ldr	r2, [pc, #132]	; (8000368 <ChangeModeY+0xfc>)
 80002e2:	6013      	str	r3, [r2, #0]
			InitLED();
 80002e4:	f001 fc80 	bl	8001be8 <InitLED>
		}
	}
	if(counterMode == 2){
 80002e8:	4b17      	ldr	r3, [pc, #92]	; (8000348 <ChangeModeY+0xdc>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	2b02      	cmp	r3, #2
 80002ee:	d108      	bne.n	8000302 <ChangeModeY+0x96>
		if(mode2_flag == 0){
 80002f0:	4b1e      	ldr	r3, [pc, #120]	; (800036c <ChangeModeY+0x100>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d104      	bne.n	8000302 <ChangeModeY+0x96>
			statusy = CONF_RED;
 80002f8:	4b1a      	ldr	r3, [pc, #104]	; (8000364 <ChangeModeY+0xf8>)
 80002fa:	2208      	movs	r2, #8
 80002fc:	601a      	str	r2, [r3, #0]
			InitLED();
 80002fe:	f001 fc73 	bl	8001be8 <InitLED>
		}
	}
	if(counterMode == 3){
 8000302:	4b11      	ldr	r3, [pc, #68]	; (8000348 <ChangeModeY+0xdc>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	2b03      	cmp	r3, #3
 8000308:	d10b      	bne.n	8000322 <ChangeModeY+0xb6>
		mode2_flag = 0;
 800030a:	4b18      	ldr	r3, [pc, #96]	; (800036c <ChangeModeY+0x100>)
 800030c:	2200      	movs	r2, #0
 800030e:	601a      	str	r2, [r3, #0]
		if(mode3_flag == 0){
 8000310:	4b17      	ldr	r3, [pc, #92]	; (8000370 <ChangeModeY+0x104>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	2b00      	cmp	r3, #0
 8000316:	d104      	bne.n	8000322 <ChangeModeY+0xb6>
			statusy = CONF_GREEN;
 8000318:	4b12      	ldr	r3, [pc, #72]	; (8000364 <ChangeModeY+0xf8>)
 800031a:	2209      	movs	r2, #9
 800031c:	601a      	str	r2, [r3, #0]
			InitLED();
 800031e:	f001 fc63 	bl	8001be8 <InitLED>
		}
	}
	if(counterMode == 4){
 8000322:	4b09      	ldr	r3, [pc, #36]	; (8000348 <ChangeModeY+0xdc>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	2b04      	cmp	r3, #4
 8000328:	d10b      	bne.n	8000342 <ChangeModeY+0xd6>
		mode3_flag = 0;
 800032a:	4b11      	ldr	r3, [pc, #68]	; (8000370 <ChangeModeY+0x104>)
 800032c:	2200      	movs	r2, #0
 800032e:	601a      	str	r2, [r3, #0]
		if(mode4_flag == 0){
 8000330:	4b06      	ldr	r3, [pc, #24]	; (800034c <ChangeModeY+0xe0>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	2b00      	cmp	r3, #0
 8000336:	d104      	bne.n	8000342 <ChangeModeY+0xd6>
			statusy = CONF_YELLOW;
 8000338:	4b0a      	ldr	r3, [pc, #40]	; (8000364 <ChangeModeY+0xf8>)
 800033a:	220a      	movs	r2, #10
 800033c:	601a      	str	r2, [r3, #0]
			InitLED();
 800033e:	f001 fc53 	bl	8001be8 <InitLED>
		}
	}
}
 8000342:	bf00      	nop
 8000344:	bd80      	pop	{r7, pc}
 8000346:	bf00      	nop
 8000348:	20000058 	.word	0x20000058
 800034c:	2000003c 	.word	0x2000003c
 8000350:	20000030 	.word	0x20000030
 8000354:	20000044 	.word	0x20000044
 8000358:	200000cc 	.word	0x200000cc
 800035c:	51eb851f 	.word	0x51eb851f
 8000360:	2000004c 	.word	0x2000004c
 8000364:	20000048 	.word	0x20000048
 8000368:	20000050 	.word	0x20000050
 800036c:	20000034 	.word	0x20000034
 8000370:	20000038 	.word	0x20000038

08000374 <fsm_clock>:
void fsm_clock(void){
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0
	if(timer_flag[2] == 1){
 8000378:	4b4e      	ldr	r3, [pc, #312]	; (80004b4 <fsm_clock+0x140>)
 800037a:	689b      	ldr	r3, [r3, #8]
 800037c:	2b01      	cmp	r3, #1
 800037e:	d118      	bne.n	80003b2 <fsm_clock+0x3e>
		number_clock1--;
 8000380:	4b4d      	ldr	r3, [pc, #308]	; (80004b8 <fsm_clock+0x144>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	3b01      	subs	r3, #1
 8000386:	4a4c      	ldr	r2, [pc, #304]	; (80004b8 <fsm_clock+0x144>)
 8000388:	6013      	str	r3, [r2, #0]
		if(number_clock1 <= 0){
 800038a:	4b4b      	ldr	r3, [pc, #300]	; (80004b8 <fsm_clock+0x144>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	2b00      	cmp	r3, #0
 8000390:	dc0a      	bgt.n	80003a8 <fsm_clock+0x34>
			number_clock1 = timer_counter[0]/100 + 1;
 8000392:	4b4a      	ldr	r3, [pc, #296]	; (80004bc <fsm_clock+0x148>)
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	4a4a      	ldr	r2, [pc, #296]	; (80004c0 <fsm_clock+0x14c>)
 8000398:	fb82 1203 	smull	r1, r2, r2, r3
 800039c:	1152      	asrs	r2, r2, #5
 800039e:	17db      	asrs	r3, r3, #31
 80003a0:	1ad3      	subs	r3, r2, r3
 80003a2:	3301      	adds	r3, #1
 80003a4:	4a44      	ldr	r2, [pc, #272]	; (80004b8 <fsm_clock+0x144>)
 80003a6:	6013      	str	r3, [r2, #0]
		}
		setTimer(2, 1000);
 80003a8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80003ac:	2002      	movs	r0, #2
 80003ae:	f001 fe5b 	bl	8002068 <setTimer>
	}
	if(timer_flag[3] == 1){
 80003b2:	4b40      	ldr	r3, [pc, #256]	; (80004b4 <fsm_clock+0x140>)
 80003b4:	68db      	ldr	r3, [r3, #12]
 80003b6:	2b01      	cmp	r3, #1
 80003b8:	d118      	bne.n	80003ec <fsm_clock+0x78>
		number_clock2--;
 80003ba:	4b42      	ldr	r3, [pc, #264]	; (80004c4 <fsm_clock+0x150>)
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	3b01      	subs	r3, #1
 80003c0:	4a40      	ldr	r2, [pc, #256]	; (80004c4 <fsm_clock+0x150>)
 80003c2:	6013      	str	r3, [r2, #0]
		if(number_clock2 <= 0){
 80003c4:	4b3f      	ldr	r3, [pc, #252]	; (80004c4 <fsm_clock+0x150>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	dc0a      	bgt.n	80003e2 <fsm_clock+0x6e>
			number_clock2 = timer_counter[1]/100 + 1;
 80003cc:	4b3b      	ldr	r3, [pc, #236]	; (80004bc <fsm_clock+0x148>)
 80003ce:	685b      	ldr	r3, [r3, #4]
 80003d0:	4a3b      	ldr	r2, [pc, #236]	; (80004c0 <fsm_clock+0x14c>)
 80003d2:	fb82 1203 	smull	r1, r2, r2, r3
 80003d6:	1152      	asrs	r2, r2, #5
 80003d8:	17db      	asrs	r3, r3, #31
 80003da:	1ad3      	subs	r3, r2, r3
 80003dc:	3301      	adds	r3, #1
 80003de:	4a39      	ldr	r2, [pc, #228]	; (80004c4 <fsm_clock+0x150>)
 80003e0:	6013      	str	r3, [r2, #0]
		}
		setTimer(3, 1000);
 80003e2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80003e6:	2003      	movs	r0, #3
 80003e8:	f001 fe3e 	bl	8002068 <setTimer>
	}
	if(timer_flag[6] == 1){
 80003ec:	4b31      	ldr	r3, [pc, #196]	; (80004b4 <fsm_clock+0x140>)
 80003ee:	699b      	ldr	r3, [r3, #24]
 80003f0:	2b01      	cmp	r3, #1
 80003f2:	d15d      	bne.n	80004b0 <fsm_clock+0x13c>
		if(DisplayCounter == 0){
 80003f4:	4b34      	ldr	r3, [pc, #208]	; (80004c8 <fsm_clock+0x154>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d10b      	bne.n	8000414 <fsm_clock+0xa0>
			Display7Seg(number_clock2/10);
 80003fc:	4b31      	ldr	r3, [pc, #196]	; (80004c4 <fsm_clock+0x150>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	4a32      	ldr	r2, [pc, #200]	; (80004cc <fsm_clock+0x158>)
 8000402:	fb82 1203 	smull	r1, r2, r2, r3
 8000406:	1092      	asrs	r2, r2, #2
 8000408:	17db      	asrs	r3, r3, #31
 800040a:	1ad3      	subs	r3, r2, r3
 800040c:	4618      	mov	r0, r3
 800040e:	f001 f8e5 	bl	80015dc <Display7Seg>
 8000412:	e038      	b.n	8000486 <fsm_clock+0x112>
		}
		else if(DisplayCounter == 1){
 8000414:	4b2c      	ldr	r3, [pc, #176]	; (80004c8 <fsm_clock+0x154>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	2b01      	cmp	r3, #1
 800041a:	d110      	bne.n	800043e <fsm_clock+0xca>
			Display7Seg(number_clock2%10);
 800041c:	4b29      	ldr	r3, [pc, #164]	; (80004c4 <fsm_clock+0x150>)
 800041e:	681a      	ldr	r2, [r3, #0]
 8000420:	4b2a      	ldr	r3, [pc, #168]	; (80004cc <fsm_clock+0x158>)
 8000422:	fb83 1302 	smull	r1, r3, r3, r2
 8000426:	1099      	asrs	r1, r3, #2
 8000428:	17d3      	asrs	r3, r2, #31
 800042a:	1ac9      	subs	r1, r1, r3
 800042c:	460b      	mov	r3, r1
 800042e:	009b      	lsls	r3, r3, #2
 8000430:	440b      	add	r3, r1
 8000432:	005b      	lsls	r3, r3, #1
 8000434:	1ad1      	subs	r1, r2, r3
 8000436:	4608      	mov	r0, r1
 8000438:	f001 f8d0 	bl	80015dc <Display7Seg>
 800043c:	e023      	b.n	8000486 <fsm_clock+0x112>
		}
		else if(DisplayCounter == 2){
 800043e:	4b22      	ldr	r3, [pc, #136]	; (80004c8 <fsm_clock+0x154>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	2b02      	cmp	r3, #2
 8000444:	d10b      	bne.n	800045e <fsm_clock+0xea>

			Display7Seg(number_clock1/10);
 8000446:	4b1c      	ldr	r3, [pc, #112]	; (80004b8 <fsm_clock+0x144>)
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	4a20      	ldr	r2, [pc, #128]	; (80004cc <fsm_clock+0x158>)
 800044c:	fb82 1203 	smull	r1, r2, r2, r3
 8000450:	1092      	asrs	r2, r2, #2
 8000452:	17db      	asrs	r3, r3, #31
 8000454:	1ad3      	subs	r3, r2, r3
 8000456:	4618      	mov	r0, r3
 8000458:	f001 f8c0 	bl	80015dc <Display7Seg>
 800045c:	e013      	b.n	8000486 <fsm_clock+0x112>
		}
		else if(DisplayCounter == 3){
 800045e:	4b1a      	ldr	r3, [pc, #104]	; (80004c8 <fsm_clock+0x154>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	2b03      	cmp	r3, #3
 8000464:	d10f      	bne.n	8000486 <fsm_clock+0x112>
			Display7Seg(number_clock1%10);
 8000466:	4b14      	ldr	r3, [pc, #80]	; (80004b8 <fsm_clock+0x144>)
 8000468:	681a      	ldr	r2, [r3, #0]
 800046a:	4b18      	ldr	r3, [pc, #96]	; (80004cc <fsm_clock+0x158>)
 800046c:	fb83 1302 	smull	r1, r3, r3, r2
 8000470:	1099      	asrs	r1, r3, #2
 8000472:	17d3      	asrs	r3, r2, #31
 8000474:	1ac9      	subs	r1, r1, r3
 8000476:	460b      	mov	r3, r1
 8000478:	009b      	lsls	r3, r3, #2
 800047a:	440b      	add	r3, r1
 800047c:	005b      	lsls	r3, r3, #1
 800047e:	1ad1      	subs	r1, r2, r3
 8000480:	4608      	mov	r0, r1
 8000482:	f001 f8ab 	bl	80015dc <Display7Seg>

		}
		Display(DisplayCounter);
 8000486:	4b10      	ldr	r3, [pc, #64]	; (80004c8 <fsm_clock+0x154>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	4618      	mov	r0, r3
 800048c:	f001 fa6c 	bl	8001968 <Display>
		DisplayCounter++;
 8000490:	4b0d      	ldr	r3, [pc, #52]	; (80004c8 <fsm_clock+0x154>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	3301      	adds	r3, #1
 8000496:	4a0c      	ldr	r2, [pc, #48]	; (80004c8 <fsm_clock+0x154>)
 8000498:	6013      	str	r3, [r2, #0]
		if(DisplayCounter > 4){
 800049a:	4b0b      	ldr	r3, [pc, #44]	; (80004c8 <fsm_clock+0x154>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	2b04      	cmp	r3, #4
 80004a0:	dd02      	ble.n	80004a8 <fsm_clock+0x134>
			DisplayCounter = 0;
 80004a2:	4b09      	ldr	r3, [pc, #36]	; (80004c8 <fsm_clock+0x154>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	601a      	str	r2, [r3, #0]
		}
		setTimer(6, 250);
 80004a8:	21fa      	movs	r1, #250	; 0xfa
 80004aa:	2006      	movs	r0, #6
 80004ac:	f001 fddc 	bl	8002068 <setTimer>
	}
}
 80004b0:	bf00      	nop
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	200000f4 	.word	0x200000f4
 80004b8:	2000004c 	.word	0x2000004c
 80004bc:	200000cc 	.word	0x200000cc
 80004c0:	51eb851f 	.word	0x51eb851f
 80004c4:	20000050 	.word	0x20000050
 80004c8:	2000002c 	.word	0x2000002c
 80004cc:	66666667 	.word	0x66666667

080004d0 <fsm_mode>:
void fsm_mode(void){
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
	if(timer_flag[6] == 1){
 80004d4:	4b28      	ldr	r3, [pc, #160]	; (8000578 <fsm_mode+0xa8>)
 80004d6:	699b      	ldr	r3, [r3, #24]
 80004d8:	2b01      	cmp	r3, #1
 80004da:	d14a      	bne.n	8000572 <fsm_mode+0xa2>
		Display(DisplayCounter);
 80004dc:	4b27      	ldr	r3, [pc, #156]	; (800057c <fsm_mode+0xac>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4618      	mov	r0, r3
 80004e2:	f001 fa41 	bl	8001968 <Display>
		if(DisplayCounter == 0){
 80004e6:	4b25      	ldr	r3, [pc, #148]	; (800057c <fsm_mode+0xac>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d103      	bne.n	80004f6 <fsm_mode+0x26>
			Display7Seg(0);
 80004ee:	2000      	movs	r0, #0
 80004f0:	f001 f874 	bl	80015dc <Display7Seg>
 80004f4:	e02d      	b.n	8000552 <fsm_mode+0x82>
		}
		else if(DisplayCounter == 1){
 80004f6:	4b21      	ldr	r3, [pc, #132]	; (800057c <fsm_mode+0xac>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	2b01      	cmp	r3, #1
 80004fc:	d105      	bne.n	800050a <fsm_mode+0x3a>
			Display7Seg(counterMode);
 80004fe:	4b20      	ldr	r3, [pc, #128]	; (8000580 <fsm_mode+0xb0>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	4618      	mov	r0, r3
 8000504:	f001 f86a 	bl	80015dc <Display7Seg>
 8000508:	e023      	b.n	8000552 <fsm_mode+0x82>
		}
		else if(DisplayCounter == 2){
 800050a:	4b1c      	ldr	r3, [pc, #112]	; (800057c <fsm_mode+0xac>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	2b02      	cmp	r3, #2
 8000510:	d10b      	bne.n	800052a <fsm_mode+0x5a>
			Display7Seg(counterTimeSet/10);
 8000512:	4b1c      	ldr	r3, [pc, #112]	; (8000584 <fsm_mode+0xb4>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	4a1c      	ldr	r2, [pc, #112]	; (8000588 <fsm_mode+0xb8>)
 8000518:	fb82 1203 	smull	r1, r2, r2, r3
 800051c:	1092      	asrs	r2, r2, #2
 800051e:	17db      	asrs	r3, r3, #31
 8000520:	1ad3      	subs	r3, r2, r3
 8000522:	4618      	mov	r0, r3
 8000524:	f001 f85a 	bl	80015dc <Display7Seg>
 8000528:	e013      	b.n	8000552 <fsm_mode+0x82>
		}
		else if(DisplayCounter == 3){
 800052a:	4b14      	ldr	r3, [pc, #80]	; (800057c <fsm_mode+0xac>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	2b03      	cmp	r3, #3
 8000530:	d10f      	bne.n	8000552 <fsm_mode+0x82>
			Display7Seg(counterTimeSet%10);
 8000532:	4b14      	ldr	r3, [pc, #80]	; (8000584 <fsm_mode+0xb4>)
 8000534:	681a      	ldr	r2, [r3, #0]
 8000536:	4b14      	ldr	r3, [pc, #80]	; (8000588 <fsm_mode+0xb8>)
 8000538:	fb83 1302 	smull	r1, r3, r3, r2
 800053c:	1099      	asrs	r1, r3, #2
 800053e:	17d3      	asrs	r3, r2, #31
 8000540:	1ac9      	subs	r1, r1, r3
 8000542:	460b      	mov	r3, r1
 8000544:	009b      	lsls	r3, r3, #2
 8000546:	440b      	add	r3, r1
 8000548:	005b      	lsls	r3, r3, #1
 800054a:	1ad1      	subs	r1, r2, r3
 800054c:	4608      	mov	r0, r1
 800054e:	f001 f845 	bl	80015dc <Display7Seg>
		}
		DisplayCounter++;
 8000552:	4b0a      	ldr	r3, [pc, #40]	; (800057c <fsm_mode+0xac>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	3301      	adds	r3, #1
 8000558:	4a08      	ldr	r2, [pc, #32]	; (800057c <fsm_mode+0xac>)
 800055a:	6013      	str	r3, [r2, #0]
		if(DisplayCounter > 4){
 800055c:	4b07      	ldr	r3, [pc, #28]	; (800057c <fsm_mode+0xac>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	2b04      	cmp	r3, #4
 8000562:	dd02      	ble.n	800056a <fsm_mode+0x9a>
			DisplayCounter = 0;
 8000564:	4b05      	ldr	r3, [pc, #20]	; (800057c <fsm_mode+0xac>)
 8000566:	2200      	movs	r2, #0
 8000568:	601a      	str	r2, [r3, #0]
		}
		setTimer(6, 100);
 800056a:	2164      	movs	r1, #100	; 0x64
 800056c:	2006      	movs	r0, #6
 800056e:	f001 fd7b 	bl	8002068 <setTimer>
	}
}
 8000572:	bf00      	nop
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	200000f4 	.word	0x200000f4
 800057c:	2000002c 	.word	0x2000002c
 8000580:	20000058 	.word	0x20000058
 8000584:	2000005c 	.word	0x2000005c
 8000588:	66666667 	.word	0x66666667

0800058c <fsm_automatic_runx>:
void fsm_automatic_runx(){
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
	switch(statusx){
 8000590:	4b89      	ldr	r3, [pc, #548]	; (80007b8 <fsm_automatic_runx+0x22c>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	3b01      	subs	r3, #1
 8000596:	2b03      	cmp	r3, #3
 8000598:	f200 8104 	bhi.w	80007a4 <fsm_automatic_runx+0x218>
 800059c:	a201      	add	r2, pc, #4	; (adr r2, 80005a4 <fsm_automatic_runx+0x18>)
 800059e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005a2:	bf00      	nop
 80005a4:	080005b5 	.word	0x080005b5
 80005a8:	080005e3 	.word	0x080005e3
 80005ac:	0800064f 	.word	0x0800064f
 80005b0:	080006bb 	.word	0x080006bb
	case INIT:
		statusx = AUTO_RED;
 80005b4:	4b80      	ldr	r3, [pc, #512]	; (80007b8 <fsm_automatic_runx+0x22c>)
 80005b6:	2202      	movs	r2, #2
 80005b8:	601a      	str	r2, [r3, #0]
		setTimer(0,5000);
 80005ba:	f241 3188 	movw	r1, #5000	; 0x1388
 80005be:	2000      	movs	r0, #0
 80005c0:	f001 fd52 	bl	8002068 <setTimer>
		setTimer(2,100);
 80005c4:	2164      	movs	r1, #100	; 0x64
 80005c6:	2002      	movs	r0, #2
 80005c8:	f001 fd4e 	bl	8002068 <setTimer>
		number_clock1 = timer_counter[0]/100;
 80005cc:	4b7b      	ldr	r3, [pc, #492]	; (80007bc <fsm_automatic_runx+0x230>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a7b      	ldr	r2, [pc, #492]	; (80007c0 <fsm_automatic_runx+0x234>)
 80005d2:	fb82 1203 	smull	r1, r2, r2, r3
 80005d6:	1152      	asrs	r2, r2, #5
 80005d8:	17db      	asrs	r3, r3, #31
 80005da:	1ad3      	subs	r3, r2, r3
 80005dc:	4a79      	ldr	r2, [pc, #484]	; (80007c4 <fsm_automatic_runx+0x238>)
 80005de:	6013      	str	r3, [r2, #0]
		break;
 80005e0:	e0e7      	b.n	80007b2 <fsm_automatic_runx+0x226>
	case AUTO_RED:
		DisplayREDX();
 80005e2:	f001 fa3f 	bl	8001a64 <DisplayREDX>
		fsm_clock();
 80005e6:	f7ff fec5 	bl	8000374 <fsm_clock>
		SetMode();
 80005ea:	f7ff fdaf 	bl	800014c <SetMode>
		ChangeModeX();
 80005ee:	f7ff fdfb 	bl	80001e8 <ChangeModeX>
		if(timer_flag[0] == 1){
 80005f2:	4b75      	ldr	r3, [pc, #468]	; (80007c8 <fsm_automatic_runx+0x23c>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	2b01      	cmp	r3, #1
 80005f8:	f040 80d6 	bne.w	80007a8 <fsm_automatic_runx+0x21c>
			if(mode3_flag == 1){
 80005fc:	4b73      	ldr	r3, [pc, #460]	; (80007cc <fsm_automatic_runx+0x240>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	2b01      	cmp	r3, #1
 8000602:	d119      	bne.n	8000638 <fsm_automatic_runx+0xac>
				InitLED();
 8000604:	f001 faf0 	bl	8001be8 <InitLED>
				statusx = MAN_GREEN;
 8000608:	4b6b      	ldr	r3, [pc, #428]	; (80007b8 <fsm_automatic_runx+0x22c>)
 800060a:	2206      	movs	r2, #6
 800060c:	601a      	str	r2, [r3, #0]
				setTimer(0, save_counterTimeSet*1000);
 800060e:	4b70      	ldr	r3, [pc, #448]	; (80007d0 <fsm_automatic_runx+0x244>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000616:	fb02 f303 	mul.w	r3, r2, r3
 800061a:	4619      	mov	r1, r3
 800061c:	2000      	movs	r0, #0
 800061e:	f001 fd23 	bl	8002068 <setTimer>
				number_clock1 = timer_counter[0]/100;
 8000622:	4b66      	ldr	r3, [pc, #408]	; (80007bc <fsm_automatic_runx+0x230>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	4a66      	ldr	r2, [pc, #408]	; (80007c0 <fsm_automatic_runx+0x234>)
 8000628:	fb82 1203 	smull	r1, r2, r2, r3
 800062c:	1152      	asrs	r2, r2, #5
 800062e:	17db      	asrs	r3, r3, #31
 8000630:	1ad3      	subs	r3, r2, r3
 8000632:	4a64      	ldr	r2, [pc, #400]	; (80007c4 <fsm_automatic_runx+0x238>)
 8000634:	6013      	str	r3, [r2, #0]
				InitLED();
				statusx = AUTO_GREEN;
				setTimer(0,3000);
			}
		}
		break;
 8000636:	e0b7      	b.n	80007a8 <fsm_automatic_runx+0x21c>
				InitLED();
 8000638:	f001 fad6 	bl	8001be8 <InitLED>
				statusx = AUTO_GREEN;
 800063c:	4b5e      	ldr	r3, [pc, #376]	; (80007b8 <fsm_automatic_runx+0x22c>)
 800063e:	2203      	movs	r2, #3
 8000640:	601a      	str	r2, [r3, #0]
				setTimer(0,3000);
 8000642:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8000646:	2000      	movs	r0, #0
 8000648:	f001 fd0e 	bl	8002068 <setTimer>
		break;
 800064c:	e0ac      	b.n	80007a8 <fsm_automatic_runx+0x21c>
	case AUTO_GREEN:
		DisplayGREENX();
 800064e:	f001 fa35 	bl	8001abc <DisplayGREENX>
		fsm_clock();
 8000652:	f7ff fe8f 	bl	8000374 <fsm_clock>
		SetMode();
 8000656:	f7ff fd79 	bl	800014c <SetMode>
		ChangeModeX();
 800065a:	f7ff fdc5 	bl	80001e8 <ChangeModeX>
		if(timer_flag[0] == 1){
 800065e:	4b5a      	ldr	r3, [pc, #360]	; (80007c8 <fsm_automatic_runx+0x23c>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	2b01      	cmp	r3, #1
 8000664:	f040 80a2 	bne.w	80007ac <fsm_automatic_runx+0x220>
			if(mode4_flag == 1){
 8000668:	4b5a      	ldr	r3, [pc, #360]	; (80007d4 <fsm_automatic_runx+0x248>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	2b01      	cmp	r3, #1
 800066e:	d119      	bne.n	80006a4 <fsm_automatic_runx+0x118>
				InitLED();
 8000670:	f001 faba 	bl	8001be8 <InitLED>
				statusx = MAN_YELLOW;
 8000674:	4b50      	ldr	r3, [pc, #320]	; (80007b8 <fsm_automatic_runx+0x22c>)
 8000676:	2207      	movs	r2, #7
 8000678:	601a      	str	r2, [r3, #0]
				setTimer(0, save_counterTimeSet*1000);
 800067a:	4b55      	ldr	r3, [pc, #340]	; (80007d0 <fsm_automatic_runx+0x244>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000682:	fb02 f303 	mul.w	r3, r2, r3
 8000686:	4619      	mov	r1, r3
 8000688:	2000      	movs	r0, #0
 800068a:	f001 fced 	bl	8002068 <setTimer>
				number_clock1 = timer_counter[0]/100;
 800068e:	4b4b      	ldr	r3, [pc, #300]	; (80007bc <fsm_automatic_runx+0x230>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	4a4b      	ldr	r2, [pc, #300]	; (80007c0 <fsm_automatic_runx+0x234>)
 8000694:	fb82 1203 	smull	r1, r2, r2, r3
 8000698:	1152      	asrs	r2, r2, #5
 800069a:	17db      	asrs	r3, r3, #31
 800069c:	1ad3      	subs	r3, r2, r3
 800069e:	4a49      	ldr	r2, [pc, #292]	; (80007c4 <fsm_automatic_runx+0x238>)
 80006a0:	6013      	str	r3, [r2, #0]
				InitLED();
				statusx = AUTO_YELLOW;
				setTimer(0,2000);
			}
		}
		break;
 80006a2:	e083      	b.n	80007ac <fsm_automatic_runx+0x220>
				InitLED();
 80006a4:	f001 faa0 	bl	8001be8 <InitLED>
				statusx = AUTO_YELLOW;
 80006a8:	4b43      	ldr	r3, [pc, #268]	; (80007b8 <fsm_automatic_runx+0x22c>)
 80006aa:	2204      	movs	r2, #4
 80006ac:	601a      	str	r2, [r3, #0]
				setTimer(0,2000);
 80006ae:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80006b2:	2000      	movs	r0, #0
 80006b4:	f001 fcd8 	bl	8002068 <setTimer>
		break;
 80006b8:	e078      	b.n	80007ac <fsm_automatic_runx+0x220>
	case AUTO_YELLOW:
		DisplayYELLOWX();
 80006ba:	f001 f9e9 	bl	8001a90 <DisplayYELLOWX>
		fsm_clock();
 80006be:	f7ff fe59 	bl	8000374 <fsm_clock>
		SetMode();
 80006c2:	f7ff fd43 	bl	800014c <SetMode>
		ChangeModeX();
 80006c6:	f7ff fd8f 	bl	80001e8 <ChangeModeX>
		if(timer_flag[0] == 1){
 80006ca:	4b3f      	ldr	r3, [pc, #252]	; (80007c8 <fsm_automatic_runx+0x23c>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	2b01      	cmp	r3, #1
 80006d0:	d16e      	bne.n	80007b0 <fsm_automatic_runx+0x224>
			if(mode2_flag == 1){
 80006d2:	4b41      	ldr	r3, [pc, #260]	; (80007d8 <fsm_automatic_runx+0x24c>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	2b01      	cmp	r3, #1
 80006d8:	d119      	bne.n	800070e <fsm_automatic_runx+0x182>
				InitLED();
 80006da:	f001 fa85 	bl	8001be8 <InitLED>
				statusx = MAN_RED;
 80006de:	4b36      	ldr	r3, [pc, #216]	; (80007b8 <fsm_automatic_runx+0x22c>)
 80006e0:	2205      	movs	r2, #5
 80006e2:	601a      	str	r2, [r3, #0]
				setTimer(0, save_counterTimeSet*1000);
 80006e4:	4b3a      	ldr	r3, [pc, #232]	; (80007d0 <fsm_automatic_runx+0x244>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006ec:	fb02 f303 	mul.w	r3, r2, r3
 80006f0:	4619      	mov	r1, r3
 80006f2:	2000      	movs	r0, #0
 80006f4:	f001 fcb8 	bl	8002068 <setTimer>
				number_clock1 = timer_counter[0]/100;
 80006f8:	4b30      	ldr	r3, [pc, #192]	; (80007bc <fsm_automatic_runx+0x230>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a30      	ldr	r2, [pc, #192]	; (80007c0 <fsm_automatic_runx+0x234>)
 80006fe:	fb82 1203 	smull	r1, r2, r2, r3
 8000702:	1152      	asrs	r2, r2, #5
 8000704:	17db      	asrs	r3, r3, #31
 8000706:	1ad3      	subs	r3, r2, r3
 8000708:	4a2e      	ldr	r2, [pc, #184]	; (80007c4 <fsm_automatic_runx+0x238>)
 800070a:	6013      	str	r3, [r2, #0]
				InitLED();
				statusx = AUTO_RED;
				setTimer(0,5000);
			}
		}
		break;
 800070c:	e050      	b.n	80007b0 <fsm_automatic_runx+0x224>
			else if(mode3_flag == 1){
 800070e:	4b2f      	ldr	r3, [pc, #188]	; (80007cc <fsm_automatic_runx+0x240>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	2b01      	cmp	r3, #1
 8000714:	d11b      	bne.n	800074e <fsm_automatic_runx+0x1c2>
				InitLED();
 8000716:	f001 fa67 	bl	8001be8 <InitLED>
				statusx = AUTO_RED;
 800071a:	4b27      	ldr	r3, [pc, #156]	; (80007b8 <fsm_automatic_runx+0x22c>)
 800071c:	2202      	movs	r2, #2
 800071e:	601a      	str	r2, [r3, #0]
				setTimer(0, save_counterTimeSet*1000 + 2000);
 8000720:	4b2b      	ldr	r3, [pc, #172]	; (80007d0 <fsm_automatic_runx+0x244>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000728:	fb02 f303 	mul.w	r3, r2, r3
 800072c:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000730:	4619      	mov	r1, r3
 8000732:	2000      	movs	r0, #0
 8000734:	f001 fc98 	bl	8002068 <setTimer>
				number_clock1 = timer_counter[0]/100;
 8000738:	4b20      	ldr	r3, [pc, #128]	; (80007bc <fsm_automatic_runx+0x230>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a20      	ldr	r2, [pc, #128]	; (80007c0 <fsm_automatic_runx+0x234>)
 800073e:	fb82 1203 	smull	r1, r2, r2, r3
 8000742:	1152      	asrs	r2, r2, #5
 8000744:	17db      	asrs	r3, r3, #31
 8000746:	1ad3      	subs	r3, r2, r3
 8000748:	4a1e      	ldr	r2, [pc, #120]	; (80007c4 <fsm_automatic_runx+0x238>)
 800074a:	6013      	str	r3, [r2, #0]
		break;
 800074c:	e030      	b.n	80007b0 <fsm_automatic_runx+0x224>
			else if(mode4_flag == 1){
 800074e:	4b21      	ldr	r3, [pc, #132]	; (80007d4 <fsm_automatic_runx+0x248>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	2b01      	cmp	r3, #1
 8000754:	d11b      	bne.n	800078e <fsm_automatic_runx+0x202>
				InitLED();
 8000756:	f001 fa47 	bl	8001be8 <InitLED>
				statusx = AUTO_RED;
 800075a:	4b17      	ldr	r3, [pc, #92]	; (80007b8 <fsm_automatic_runx+0x22c>)
 800075c:	2202      	movs	r2, #2
 800075e:	601a      	str	r2, [r3, #0]
				setTimer(0, save_counterTimeSet*1000 + 3000);
 8000760:	4b1b      	ldr	r3, [pc, #108]	; (80007d0 <fsm_automatic_runx+0x244>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000768:	fb02 f303 	mul.w	r3, r2, r3
 800076c:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 8000770:	4619      	mov	r1, r3
 8000772:	2000      	movs	r0, #0
 8000774:	f001 fc78 	bl	8002068 <setTimer>
				number_clock1 = timer_counter[0]/100;
 8000778:	4b10      	ldr	r3, [pc, #64]	; (80007bc <fsm_automatic_runx+0x230>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a10      	ldr	r2, [pc, #64]	; (80007c0 <fsm_automatic_runx+0x234>)
 800077e:	fb82 1203 	smull	r1, r2, r2, r3
 8000782:	1152      	asrs	r2, r2, #5
 8000784:	17db      	asrs	r3, r3, #31
 8000786:	1ad3      	subs	r3, r2, r3
 8000788:	4a0e      	ldr	r2, [pc, #56]	; (80007c4 <fsm_automatic_runx+0x238>)
 800078a:	6013      	str	r3, [r2, #0]
		break;
 800078c:	e010      	b.n	80007b0 <fsm_automatic_runx+0x224>
				InitLED();
 800078e:	f001 fa2b 	bl	8001be8 <InitLED>
				statusx = AUTO_RED;
 8000792:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <fsm_automatic_runx+0x22c>)
 8000794:	2202      	movs	r2, #2
 8000796:	601a      	str	r2, [r3, #0]
				setTimer(0,5000);
 8000798:	f241 3188 	movw	r1, #5000	; 0x1388
 800079c:	2000      	movs	r0, #0
 800079e:	f001 fc63 	bl	8002068 <setTimer>
		break;
 80007a2:	e005      	b.n	80007b0 <fsm_automatic_runx+0x224>
	default:
		break;
 80007a4:	bf00      	nop
 80007a6:	e004      	b.n	80007b2 <fsm_automatic_runx+0x226>
		break;
 80007a8:	bf00      	nop
 80007aa:	e002      	b.n	80007b2 <fsm_automatic_runx+0x226>
		break;
 80007ac:	bf00      	nop
 80007ae:	e000      	b.n	80007b2 <fsm_automatic_runx+0x226>
		break;
 80007b0:	bf00      	nop
	}
}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	20000044 	.word	0x20000044
 80007bc:	200000cc 	.word	0x200000cc
 80007c0:	51eb851f 	.word	0x51eb851f
 80007c4:	2000004c 	.word	0x2000004c
 80007c8:	200000f4 	.word	0x200000f4
 80007cc:	20000038 	.word	0x20000038
 80007d0:	20000040 	.word	0x20000040
 80007d4:	2000003c 	.word	0x2000003c
 80007d8:	20000034 	.word	0x20000034

080007dc <fsm_automatic_runy>:
void fsm_automatic_runy(){
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
	switch(statusy){
 80007e0:	4bb1      	ldr	r3, [pc, #708]	; (8000aa8 <fsm_automatic_runy+0x2cc>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	3b01      	subs	r3, #1
 80007e6:	2b03      	cmp	r3, #3
 80007e8:	f200 8155 	bhi.w	8000a96 <fsm_automatic_runy+0x2ba>
 80007ec:	a201      	add	r2, pc, #4	; (adr r2, 80007f4 <fsm_automatic_runy+0x18>)
 80007ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007f2:	bf00      	nop
 80007f4:	08000805 	.word	0x08000805
 80007f8:	08000837 	.word	0x08000837
 80007fc:	080008d9 	.word	0x080008d9
 8000800:	0800097b 	.word	0x0800097b
	case INIT:
		DisplayGREENY();
 8000804:	f001 f99c 	bl	8001b40 <DisplayGREENY>
		statusy = AUTO_GREEN;
 8000808:	4ba7      	ldr	r3, [pc, #668]	; (8000aa8 <fsm_automatic_runy+0x2cc>)
 800080a:	2203      	movs	r2, #3
 800080c:	601a      	str	r2, [r3, #0]
		setTimer(1,3000);
 800080e:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8000812:	2001      	movs	r0, #1
 8000814:	f001 fc28 	bl	8002068 <setTimer>
		setTimer(3,100);
 8000818:	2164      	movs	r1, #100	; 0x64
 800081a:	2003      	movs	r0, #3
 800081c:	f001 fc24 	bl	8002068 <setTimer>
		number_clock2 = timer_counter[1]/100;
 8000820:	4ba2      	ldr	r3, [pc, #648]	; (8000aac <fsm_automatic_runy+0x2d0>)
 8000822:	685b      	ldr	r3, [r3, #4]
 8000824:	4aa2      	ldr	r2, [pc, #648]	; (8000ab0 <fsm_automatic_runy+0x2d4>)
 8000826:	fb82 1203 	smull	r1, r2, r2, r3
 800082a:	1152      	asrs	r2, r2, #5
 800082c:	17db      	asrs	r3, r3, #31
 800082e:	1ad3      	subs	r3, r2, r3
 8000830:	4aa0      	ldr	r2, [pc, #640]	; (8000ab4 <fsm_automatic_runy+0x2d8>)
 8000832:	6013      	str	r3, [r2, #0]
		break;
 8000834:	e136      	b.n	8000aa4 <fsm_automatic_runy+0x2c8>
	case AUTO_RED:
		DisplayREDY();
 8000836:	f001 f957 	bl	8001ae8 <DisplayREDY>
		SetMode();
 800083a:	f7ff fc87 	bl	800014c <SetMode>
		ChangeModeY();
 800083e:	f7ff fd15 	bl	800026c <ChangeModeY>
		if(mode2_flag == 1){
 8000842:	4b9d      	ldr	r3, [pc, #628]	; (8000ab8 <fsm_automatic_runy+0x2dc>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	2b01      	cmp	r3, #1
 8000848:	d118      	bne.n	800087c <fsm_automatic_runy+0xa0>
			InitLED();
 800084a:	f001 f9cd 	bl	8001be8 <InitLED>
			statusy = MAN_RED;
 800084e:	4b96      	ldr	r3, [pc, #600]	; (8000aa8 <fsm_automatic_runy+0x2cc>)
 8000850:	2205      	movs	r2, #5
 8000852:	601a      	str	r2, [r3, #0]
			setTimer(1, save_counterTimeSet*1000);
 8000854:	4b99      	ldr	r3, [pc, #612]	; (8000abc <fsm_automatic_runy+0x2e0>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800085c:	fb02 f303 	mul.w	r3, r2, r3
 8000860:	4619      	mov	r1, r3
 8000862:	2001      	movs	r0, #1
 8000864:	f001 fc00 	bl	8002068 <setTimer>
			number_clock2 = timer_counter[1]/100;
 8000868:	4b90      	ldr	r3, [pc, #576]	; (8000aac <fsm_automatic_runy+0x2d0>)
 800086a:	685b      	ldr	r3, [r3, #4]
 800086c:	4a90      	ldr	r2, [pc, #576]	; (8000ab0 <fsm_automatic_runy+0x2d4>)
 800086e:	fb82 1203 	smull	r1, r2, r2, r3
 8000872:	1152      	asrs	r2, r2, #5
 8000874:	17db      	asrs	r3, r3, #31
 8000876:	1ad3      	subs	r3, r2, r3
 8000878:	4a8e      	ldr	r2, [pc, #568]	; (8000ab4 <fsm_automatic_runy+0x2d8>)
 800087a:	6013      	str	r3, [r2, #0]
		}
		if(timer_flag[1] == 1){
 800087c:	4b90      	ldr	r3, [pc, #576]	; (8000ac0 <fsm_automatic_runy+0x2e4>)
 800087e:	685b      	ldr	r3, [r3, #4]
 8000880:	2b01      	cmp	r3, #1
 8000882:	f040 810a 	bne.w	8000a9a <fsm_automatic_runy+0x2be>
			if(mode3_flag == 1){
 8000886:	4b8f      	ldr	r3, [pc, #572]	; (8000ac4 <fsm_automatic_runy+0x2e8>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	2b01      	cmp	r3, #1
 800088c:	d119      	bne.n	80008c2 <fsm_automatic_runy+0xe6>
				InitLED();
 800088e:	f001 f9ab 	bl	8001be8 <InitLED>
				statusy = MAN_GREEN;
 8000892:	4b85      	ldr	r3, [pc, #532]	; (8000aa8 <fsm_automatic_runy+0x2cc>)
 8000894:	2206      	movs	r2, #6
 8000896:	601a      	str	r2, [r3, #0]
				setTimer(1, save_counterTimeSet*1000);
 8000898:	4b88      	ldr	r3, [pc, #544]	; (8000abc <fsm_automatic_runy+0x2e0>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008a0:	fb02 f303 	mul.w	r3, r2, r3
 80008a4:	4619      	mov	r1, r3
 80008a6:	2001      	movs	r0, #1
 80008a8:	f001 fbde 	bl	8002068 <setTimer>
				number_clock2 = timer_counter[1]/100;
 80008ac:	4b7f      	ldr	r3, [pc, #508]	; (8000aac <fsm_automatic_runy+0x2d0>)
 80008ae:	685b      	ldr	r3, [r3, #4]
 80008b0:	4a7f      	ldr	r2, [pc, #508]	; (8000ab0 <fsm_automatic_runy+0x2d4>)
 80008b2:	fb82 1203 	smull	r1, r2, r2, r3
 80008b6:	1152      	asrs	r2, r2, #5
 80008b8:	17db      	asrs	r3, r3, #31
 80008ba:	1ad3      	subs	r3, r2, r3
 80008bc:	4a7d      	ldr	r2, [pc, #500]	; (8000ab4 <fsm_automatic_runy+0x2d8>)
 80008be:	6013      	str	r3, [r2, #0]
				InitLED();
				statusy = AUTO_GREEN;
				setTimer(1,3000);
			}
		}
		break;
 80008c0:	e0eb      	b.n	8000a9a <fsm_automatic_runy+0x2be>
				InitLED();
 80008c2:	f001 f991 	bl	8001be8 <InitLED>
				statusy = AUTO_GREEN;
 80008c6:	4b78      	ldr	r3, [pc, #480]	; (8000aa8 <fsm_automatic_runy+0x2cc>)
 80008c8:	2203      	movs	r2, #3
 80008ca:	601a      	str	r2, [r3, #0]
				setTimer(1,3000);
 80008cc:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80008d0:	2001      	movs	r0, #1
 80008d2:	f001 fbc9 	bl	8002068 <setTimer>
		break;
 80008d6:	e0e0      	b.n	8000a9a <fsm_automatic_runy+0x2be>
	case AUTO_GREEN:
		DisplayGREENY();
 80008d8:	f001 f932 	bl	8001b40 <DisplayGREENY>
		SetMode();
 80008dc:	f7ff fc36 	bl	800014c <SetMode>
		ChangeModeY();
 80008e0:	f7ff fcc4 	bl	800026c <ChangeModeY>
		if(mode3_flag == 1){
 80008e4:	4b77      	ldr	r3, [pc, #476]	; (8000ac4 <fsm_automatic_runy+0x2e8>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	2b01      	cmp	r3, #1
 80008ea:	d118      	bne.n	800091e <fsm_automatic_runy+0x142>
			InitLED();
 80008ec:	f001 f97c 	bl	8001be8 <InitLED>
			statusy = MAN_GREEN;
 80008f0:	4b6d      	ldr	r3, [pc, #436]	; (8000aa8 <fsm_automatic_runy+0x2cc>)
 80008f2:	2206      	movs	r2, #6
 80008f4:	601a      	str	r2, [r3, #0]
			setTimer(1, save_counterTimeSet*1000);
 80008f6:	4b71      	ldr	r3, [pc, #452]	; (8000abc <fsm_automatic_runy+0x2e0>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008fe:	fb02 f303 	mul.w	r3, r2, r3
 8000902:	4619      	mov	r1, r3
 8000904:	2001      	movs	r0, #1
 8000906:	f001 fbaf 	bl	8002068 <setTimer>
			number_clock2 = timer_counter[1]/100;
 800090a:	4b68      	ldr	r3, [pc, #416]	; (8000aac <fsm_automatic_runy+0x2d0>)
 800090c:	685b      	ldr	r3, [r3, #4]
 800090e:	4a68      	ldr	r2, [pc, #416]	; (8000ab0 <fsm_automatic_runy+0x2d4>)
 8000910:	fb82 1203 	smull	r1, r2, r2, r3
 8000914:	1152      	asrs	r2, r2, #5
 8000916:	17db      	asrs	r3, r3, #31
 8000918:	1ad3      	subs	r3, r2, r3
 800091a:	4a66      	ldr	r2, [pc, #408]	; (8000ab4 <fsm_automatic_runy+0x2d8>)
 800091c:	6013      	str	r3, [r2, #0]
		}
		if(timer_flag[1] == 1){
 800091e:	4b68      	ldr	r3, [pc, #416]	; (8000ac0 <fsm_automatic_runy+0x2e4>)
 8000920:	685b      	ldr	r3, [r3, #4]
 8000922:	2b01      	cmp	r3, #1
 8000924:	f040 80bb 	bne.w	8000a9e <fsm_automatic_runy+0x2c2>
			if(mode4_flag == 1){
 8000928:	4b67      	ldr	r3, [pc, #412]	; (8000ac8 <fsm_automatic_runy+0x2ec>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	2b01      	cmp	r3, #1
 800092e:	d119      	bne.n	8000964 <fsm_automatic_runy+0x188>
				InitLED();
 8000930:	f001 f95a 	bl	8001be8 <InitLED>
				statusy = MAN_YELLOW;
 8000934:	4b5c      	ldr	r3, [pc, #368]	; (8000aa8 <fsm_automatic_runy+0x2cc>)
 8000936:	2207      	movs	r2, #7
 8000938:	601a      	str	r2, [r3, #0]
				setTimer(1, save_counterTimeSet*1000);
 800093a:	4b60      	ldr	r3, [pc, #384]	; (8000abc <fsm_automatic_runy+0x2e0>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000942:	fb02 f303 	mul.w	r3, r2, r3
 8000946:	4619      	mov	r1, r3
 8000948:	2001      	movs	r0, #1
 800094a:	f001 fb8d 	bl	8002068 <setTimer>
				number_clock2 = timer_counter[1]/100;
 800094e:	4b57      	ldr	r3, [pc, #348]	; (8000aac <fsm_automatic_runy+0x2d0>)
 8000950:	685b      	ldr	r3, [r3, #4]
 8000952:	4a57      	ldr	r2, [pc, #348]	; (8000ab0 <fsm_automatic_runy+0x2d4>)
 8000954:	fb82 1203 	smull	r1, r2, r2, r3
 8000958:	1152      	asrs	r2, r2, #5
 800095a:	17db      	asrs	r3, r3, #31
 800095c:	1ad3      	subs	r3, r2, r3
 800095e:	4a55      	ldr	r2, [pc, #340]	; (8000ab4 <fsm_automatic_runy+0x2d8>)
 8000960:	6013      	str	r3, [r2, #0]
				InitLED();
				statusy = AUTO_YELLOW;
				setTimer(1,2000);
			}
		}
		break;
 8000962:	e09c      	b.n	8000a9e <fsm_automatic_runy+0x2c2>
				InitLED();
 8000964:	f001 f940 	bl	8001be8 <InitLED>
				statusy = AUTO_YELLOW;
 8000968:	4b4f      	ldr	r3, [pc, #316]	; (8000aa8 <fsm_automatic_runy+0x2cc>)
 800096a:	2204      	movs	r2, #4
 800096c:	601a      	str	r2, [r3, #0]
				setTimer(1,2000);
 800096e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000972:	2001      	movs	r0, #1
 8000974:	f001 fb78 	bl	8002068 <setTimer>
		break;
 8000978:	e091      	b.n	8000a9e <fsm_automatic_runy+0x2c2>
	case AUTO_YELLOW:
		DisplayYELLOWY();
 800097a:	f001 f8cb 	bl	8001b14 <DisplayYELLOWY>
		SetMode();
 800097e:	f7ff fbe5 	bl	800014c <SetMode>
		ChangeModeY();
 8000982:	f7ff fc73 	bl	800026c <ChangeModeY>
		if(mode4_flag == 1){
 8000986:	4b50      	ldr	r3, [pc, #320]	; (8000ac8 <fsm_automatic_runy+0x2ec>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	2b01      	cmp	r3, #1
 800098c:	d118      	bne.n	80009c0 <fsm_automatic_runy+0x1e4>
			InitLED();
 800098e:	f001 f92b 	bl	8001be8 <InitLED>
			statusy = MAN_YELLOW;
 8000992:	4b45      	ldr	r3, [pc, #276]	; (8000aa8 <fsm_automatic_runy+0x2cc>)
 8000994:	2207      	movs	r2, #7
 8000996:	601a      	str	r2, [r3, #0]
			setTimer(1, save_counterTimeSet*1000);
 8000998:	4b48      	ldr	r3, [pc, #288]	; (8000abc <fsm_automatic_runy+0x2e0>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009a0:	fb02 f303 	mul.w	r3, r2, r3
 80009a4:	4619      	mov	r1, r3
 80009a6:	2001      	movs	r0, #1
 80009a8:	f001 fb5e 	bl	8002068 <setTimer>
			number_clock2 = timer_counter[1]/100;
 80009ac:	4b3f      	ldr	r3, [pc, #252]	; (8000aac <fsm_automatic_runy+0x2d0>)
 80009ae:	685b      	ldr	r3, [r3, #4]
 80009b0:	4a3f      	ldr	r2, [pc, #252]	; (8000ab0 <fsm_automatic_runy+0x2d4>)
 80009b2:	fb82 1203 	smull	r1, r2, r2, r3
 80009b6:	1152      	asrs	r2, r2, #5
 80009b8:	17db      	asrs	r3, r3, #31
 80009ba:	1ad3      	subs	r3, r2, r3
 80009bc:	4a3d      	ldr	r2, [pc, #244]	; (8000ab4 <fsm_automatic_runy+0x2d8>)
 80009be:	6013      	str	r3, [r2, #0]
		}
		if(timer_flag[1] == 1){
 80009c0:	4b3f      	ldr	r3, [pc, #252]	; (8000ac0 <fsm_automatic_runy+0x2e4>)
 80009c2:	685b      	ldr	r3, [r3, #4]
 80009c4:	2b01      	cmp	r3, #1
 80009c6:	d16c      	bne.n	8000aa2 <fsm_automatic_runy+0x2c6>
			if(mode2_flag == 1){
 80009c8:	4b3b      	ldr	r3, [pc, #236]	; (8000ab8 <fsm_automatic_runy+0x2dc>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	2b01      	cmp	r3, #1
 80009ce:	d118      	bne.n	8000a02 <fsm_automatic_runy+0x226>
				InitLED();
 80009d0:	f001 f90a 	bl	8001be8 <InitLED>
				statusy = MAN_RED;
 80009d4:	4b34      	ldr	r3, [pc, #208]	; (8000aa8 <fsm_automatic_runy+0x2cc>)
 80009d6:	2205      	movs	r2, #5
 80009d8:	601a      	str	r2, [r3, #0]
				setTimer(1, save_counterTimeSet*1000);
 80009da:	4b38      	ldr	r3, [pc, #224]	; (8000abc <fsm_automatic_runy+0x2e0>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009e2:	fb02 f303 	mul.w	r3, r2, r3
 80009e6:	4619      	mov	r1, r3
 80009e8:	2001      	movs	r0, #1
 80009ea:	f001 fb3d 	bl	8002068 <setTimer>
				number_clock2 = timer_counter[1]/100;
 80009ee:	4b2f      	ldr	r3, [pc, #188]	; (8000aac <fsm_automatic_runy+0x2d0>)
 80009f0:	685b      	ldr	r3, [r3, #4]
 80009f2:	4a2f      	ldr	r2, [pc, #188]	; (8000ab0 <fsm_automatic_runy+0x2d4>)
 80009f4:	fb82 1203 	smull	r1, r2, r2, r3
 80009f8:	1152      	asrs	r2, r2, #5
 80009fa:	17db      	asrs	r3, r3, #31
 80009fc:	1ad3      	subs	r3, r2, r3
 80009fe:	4a2d      	ldr	r2, [pc, #180]	; (8000ab4 <fsm_automatic_runy+0x2d8>)
 8000a00:	6013      	str	r3, [r2, #0]
			}
			if(mode3_flag == 1){
 8000a02:	4b30      	ldr	r3, [pc, #192]	; (8000ac4 <fsm_automatic_runy+0x2e8>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	2b01      	cmp	r3, #1
 8000a08:	d11a      	bne.n	8000a40 <fsm_automatic_runy+0x264>
				InitLED();
 8000a0a:	f001 f8ed 	bl	8001be8 <InitLED>
				statusy = AUTO_RED;
 8000a0e:	4b26      	ldr	r3, [pc, #152]	; (8000aa8 <fsm_automatic_runy+0x2cc>)
 8000a10:	2202      	movs	r2, #2
 8000a12:	601a      	str	r2, [r3, #0]
				setTimer(1, save_counterTimeSet*1000 + 2000);
 8000a14:	4b29      	ldr	r3, [pc, #164]	; (8000abc <fsm_automatic_runy+0x2e0>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a1c:	fb02 f303 	mul.w	r3, r2, r3
 8000a20:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000a24:	4619      	mov	r1, r3
 8000a26:	2001      	movs	r0, #1
 8000a28:	f001 fb1e 	bl	8002068 <setTimer>
				number_clock2 = timer_counter[1]/100;
 8000a2c:	4b1f      	ldr	r3, [pc, #124]	; (8000aac <fsm_automatic_runy+0x2d0>)
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	4a1f      	ldr	r2, [pc, #124]	; (8000ab0 <fsm_automatic_runy+0x2d4>)
 8000a32:	fb82 1203 	smull	r1, r2, r2, r3
 8000a36:	1152      	asrs	r2, r2, #5
 8000a38:	17db      	asrs	r3, r3, #31
 8000a3a:	1ad3      	subs	r3, r2, r3
 8000a3c:	4a1d      	ldr	r2, [pc, #116]	; (8000ab4 <fsm_automatic_runy+0x2d8>)
 8000a3e:	6013      	str	r3, [r2, #0]
			}
			if(mode4_flag == 1){
 8000a40:	4b21      	ldr	r3, [pc, #132]	; (8000ac8 <fsm_automatic_runy+0x2ec>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	2b01      	cmp	r3, #1
 8000a46:	d11b      	bne.n	8000a80 <fsm_automatic_runy+0x2a4>
				InitLED();
 8000a48:	f001 f8ce 	bl	8001be8 <InitLED>
				statusy = AUTO_RED;
 8000a4c:	4b16      	ldr	r3, [pc, #88]	; (8000aa8 <fsm_automatic_runy+0x2cc>)
 8000a4e:	2202      	movs	r2, #2
 8000a50:	601a      	str	r2, [r3, #0]
				setTimer(1, save_counterTimeSet*1000 + 3000);
 8000a52:	4b1a      	ldr	r3, [pc, #104]	; (8000abc <fsm_automatic_runy+0x2e0>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a5a:	fb02 f303 	mul.w	r3, r2, r3
 8000a5e:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 8000a62:	4619      	mov	r1, r3
 8000a64:	2001      	movs	r0, #1
 8000a66:	f001 faff 	bl	8002068 <setTimer>
				number_clock2 = timer_counter[1]/100;
 8000a6a:	4b10      	ldr	r3, [pc, #64]	; (8000aac <fsm_automatic_runy+0x2d0>)
 8000a6c:	685b      	ldr	r3, [r3, #4]
 8000a6e:	4a10      	ldr	r2, [pc, #64]	; (8000ab0 <fsm_automatic_runy+0x2d4>)
 8000a70:	fb82 1203 	smull	r1, r2, r2, r3
 8000a74:	1152      	asrs	r2, r2, #5
 8000a76:	17db      	asrs	r3, r3, #31
 8000a78:	1ad3      	subs	r3, r2, r3
 8000a7a:	4a0e      	ldr	r2, [pc, #56]	; (8000ab4 <fsm_automatic_runy+0x2d8>)
 8000a7c:	6013      	str	r3, [r2, #0]
				InitLED();
				setTimer(1,5000);
				statusy = AUTO_RED;
			}
		}
		break;
 8000a7e:	e010      	b.n	8000aa2 <fsm_automatic_runy+0x2c6>
				InitLED();
 8000a80:	f001 f8b2 	bl	8001be8 <InitLED>
				setTimer(1,5000);
 8000a84:	f241 3188 	movw	r1, #5000	; 0x1388
 8000a88:	2001      	movs	r0, #1
 8000a8a:	f001 faed 	bl	8002068 <setTimer>
				statusy = AUTO_RED;
 8000a8e:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <fsm_automatic_runy+0x2cc>)
 8000a90:	2202      	movs	r2, #2
 8000a92:	601a      	str	r2, [r3, #0]
		break;
 8000a94:	e005      	b.n	8000aa2 <fsm_automatic_runy+0x2c6>
	default:
		break;
 8000a96:	bf00      	nop
 8000a98:	e004      	b.n	8000aa4 <fsm_automatic_runy+0x2c8>
		break;
 8000a9a:	bf00      	nop
 8000a9c:	e002      	b.n	8000aa4 <fsm_automatic_runy+0x2c8>
		break;
 8000a9e:	bf00      	nop
 8000aa0:	e000      	b.n	8000aa4 <fsm_automatic_runy+0x2c8>
		break;
 8000aa2:	bf00      	nop
	}
}
 8000aa4:	bf00      	nop
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	20000048 	.word	0x20000048
 8000aac:	200000cc 	.word	0x200000cc
 8000ab0:	51eb851f 	.word	0x51eb851f
 8000ab4:	20000050 	.word	0x20000050
 8000ab8:	20000034 	.word	0x20000034
 8000abc:	20000040 	.word	0x20000040
 8000ac0:	200000f4 	.word	0x200000f4
 8000ac4:	20000038 	.word	0x20000038
 8000ac8:	2000003c 	.word	0x2000003c

08000acc <fsm_manual_run1>:

#include "fsm_manual.h"
#include "led_display.h"
#include "input_processing.h"
#include "fsm_automatic.h"
void fsm_manual_run1(void){
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
	switch(statusx){
 8000ad0:	4b99      	ldr	r3, [pc, #612]	; (8000d38 <fsm_manual_run1+0x26c>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	3b05      	subs	r3, #5
 8000ad6:	2b05      	cmp	r3, #5
 8000ad8:	f200 81f0 	bhi.w	8000ebc <fsm_manual_run1+0x3f0>
 8000adc:	a201      	add	r2, pc, #4	; (adr r2, 8000ae4 <fsm_manual_run1+0x18>)
 8000ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ae2:	bf00      	nop
 8000ae4:	08000b9d 	.word	0x08000b9d
 8000ae8:	08000cb9 	.word	0x08000cb9
 8000aec:	08000e21 	.word	0x08000e21
 8000af0:	08000afd 	.word	0x08000afd
 8000af4:	08000c19 	.word	0x08000c19
 8000af8:	08000d65 	.word	0x08000d65
	case CONF_RED:
		if(timer_flag[4] == 1){
 8000afc:	4b8f      	ldr	r3, [pc, #572]	; (8000d3c <fsm_manual_run1+0x270>)
 8000afe:	691b      	ldr	r3, [r3, #16]
 8000b00:	2b01      	cmp	r3, #1
 8000b02:	d106      	bne.n	8000b12 <fsm_manual_run1+0x46>
			DisplayMAN_REDX();
 8000b04:	f001 f832 	bl	8001b6c <DisplayMAN_REDX>
			setTimer(4, 500);
 8000b08:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000b0c:	2004      	movs	r0, #4
 8000b0e:	f001 faab 	bl	8002068 <setTimer>
		}
		if(counterMode == 3){
 8000b12:	4b8b      	ldr	r3, [pc, #556]	; (8000d40 <fsm_manual_run1+0x274>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	2b03      	cmp	r3, #3
 8000b18:	d104      	bne.n	8000b24 <fsm_manual_run1+0x58>
			statusx = CONF_GREEN;
 8000b1a:	4b87      	ldr	r3, [pc, #540]	; (8000d38 <fsm_manual_run1+0x26c>)
 8000b1c:	2209      	movs	r2, #9
 8000b1e:	601a      	str	r2, [r3, #0]
			InitLED();
 8000b20:	f001 f862 	bl	8001be8 <InitLED>
		}
		fsm_mode();
 8000b24:	f7ff fcd4 	bl	80004d0 <fsm_mode>
		SetMode();
 8000b28:	f7ff fb10 	bl	800014c <SetMode>
		if(mode2_flag == 1){
 8000b2c:	4b85      	ldr	r3, [pc, #532]	; (8000d44 <fsm_manual_run1+0x278>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	2b01      	cmp	r3, #1
 8000b32:	f040 81c5 	bne.w	8000ec0 <fsm_manual_run1+0x3f4>
			statusx = MAN_RED;
 8000b36:	4b80      	ldr	r3, [pc, #512]	; (8000d38 <fsm_manual_run1+0x26c>)
 8000b38:	2205      	movs	r2, #5
 8000b3a:	601a      	str	r2, [r3, #0]
			setTimer(0, save_counterTimeSet*1000);
 8000b3c:	4b82      	ldr	r3, [pc, #520]	; (8000d48 <fsm_manual_run1+0x27c>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b44:	fb02 f303 	mul.w	r3, r2, r3
 8000b48:	4619      	mov	r1, r3
 8000b4a:	2000      	movs	r0, #0
 8000b4c:	f001 fa8c 	bl	8002068 <setTimer>
			number_clock1 = timer_counter[0]/100;
 8000b50:	4b7e      	ldr	r3, [pc, #504]	; (8000d4c <fsm_manual_run1+0x280>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a7e      	ldr	r2, [pc, #504]	; (8000d50 <fsm_manual_run1+0x284>)
 8000b56:	fb82 1203 	smull	r1, r2, r2, r3
 8000b5a:	1152      	asrs	r2, r2, #5
 8000b5c:	17db      	asrs	r3, r3, #31
 8000b5e:	1ad3      	subs	r3, r2, r3
 8000b60:	4a7c      	ldr	r2, [pc, #496]	; (8000d54 <fsm_manual_run1+0x288>)
 8000b62:	6013      	str	r3, [r2, #0]
			statusy = AUTO_GREEN;
 8000b64:	4b7c      	ldr	r3, [pc, #496]	; (8000d58 <fsm_manual_run1+0x28c>)
 8000b66:	2203      	movs	r2, #3
 8000b68:	601a      	str	r2, [r3, #0]
			setTimer(1, save_counterTimeSet*1000 - 2000);
 8000b6a:	4b77      	ldr	r3, [pc, #476]	; (8000d48 <fsm_manual_run1+0x27c>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b72:	fb02 f303 	mul.w	r3, r2, r3
 8000b76:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	2001      	movs	r0, #1
 8000b7e:	f001 fa73 	bl	8002068 <setTimer>
			number_clock2 = timer_counter[1]/100;
 8000b82:	4b72      	ldr	r3, [pc, #456]	; (8000d4c <fsm_manual_run1+0x280>)
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	4a72      	ldr	r2, [pc, #456]	; (8000d50 <fsm_manual_run1+0x284>)
 8000b88:	fb82 1203 	smull	r1, r2, r2, r3
 8000b8c:	1152      	asrs	r2, r2, #5
 8000b8e:	17db      	asrs	r3, r3, #31
 8000b90:	1ad3      	subs	r3, r2, r3
 8000b92:	4a72      	ldr	r2, [pc, #456]	; (8000d5c <fsm_manual_run1+0x290>)
 8000b94:	6013      	str	r3, [r2, #0]
			InitLED();
 8000b96:	f001 f827 	bl	8001be8 <InitLED>
		}
		break;
 8000b9a:	e191      	b.n	8000ec0 <fsm_manual_run1+0x3f4>
	case MAN_RED:
		if(timer_flag[4] == 1){
 8000b9c:	4b67      	ldr	r3, [pc, #412]	; (8000d3c <fsm_manual_run1+0x270>)
 8000b9e:	691b      	ldr	r3, [r3, #16]
 8000ba0:	2b01      	cmp	r3, #1
 8000ba2:	d106      	bne.n	8000bb2 <fsm_manual_run1+0xe6>
			DisplayMAN_REDX();
 8000ba4:	f000 ffe2 	bl	8001b6c <DisplayMAN_REDX>
			setTimer(4, 500);
 8000ba8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000bac:	2004      	movs	r0, #4
 8000bae:	f001 fa5b 	bl	8002068 <setTimer>
		}
		ChangeModeX();
 8000bb2:	f7ff fb19 	bl	80001e8 <ChangeModeX>
		fsm_clock();
 8000bb6:	f7ff fbdd 	bl	8000374 <fsm_clock>
		if(timer_flag[0] == 1){
 8000bba:	4b60      	ldr	r3, [pc, #384]	; (8000d3c <fsm_manual_run1+0x270>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	2b01      	cmp	r3, #1
 8000bc0:	f040 8180 	bne.w	8000ec4 <fsm_manual_run1+0x3f8>
			InitLED();
 8000bc4:	f001 f810 	bl	8001be8 <InitLED>
			statusx = AUTO_GREEN;
 8000bc8:	4b5b      	ldr	r3, [pc, #364]	; (8000d38 <fsm_manual_run1+0x26c>)
 8000bca:	2203      	movs	r2, #3
 8000bcc:	601a      	str	r2, [r3, #0]
			if(mode2_flag == 1){
 8000bce:	4b5d      	ldr	r3, [pc, #372]	; (8000d44 <fsm_manual_run1+0x278>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	2b01      	cmp	r3, #1
 8000bd4:	d10c      	bne.n	8000bf0 <fsm_manual_run1+0x124>
				setTimer(0,save_counterTimeSet*1000 - 2000);
 8000bd6:	4b5c      	ldr	r3, [pc, #368]	; (8000d48 <fsm_manual_run1+0x27c>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000bde:	fb02 f303 	mul.w	r3, r2, r3
 8000be2:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 8000be6:	4619      	mov	r1, r3
 8000be8:	2000      	movs	r0, #0
 8000bea:	f001 fa3d 	bl	8002068 <setTimer>
 8000bee:	e004      	b.n	8000bfa <fsm_manual_run1+0x12e>
			}
			else{
				setTimer(0,3000);
 8000bf0:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8000bf4:	2000      	movs	r0, #0
 8000bf6:	f001 fa37 	bl	8002068 <setTimer>
			}
			setTimer(2, 10);
 8000bfa:	210a      	movs	r1, #10
 8000bfc:	2002      	movs	r0, #2
 8000bfe:	f001 fa33 	bl	8002068 <setTimer>
			number_clock1 = timer_counter[0]/100;
 8000c02:	4b52      	ldr	r3, [pc, #328]	; (8000d4c <fsm_manual_run1+0x280>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a52      	ldr	r2, [pc, #328]	; (8000d50 <fsm_manual_run1+0x284>)
 8000c08:	fb82 1203 	smull	r1, r2, r2, r3
 8000c0c:	1152      	asrs	r2, r2, #5
 8000c0e:	17db      	asrs	r3, r3, #31
 8000c10:	1ad3      	subs	r3, r2, r3
 8000c12:	4a50      	ldr	r2, [pc, #320]	; (8000d54 <fsm_manual_run1+0x288>)
 8000c14:	6013      	str	r3, [r2, #0]
		}
		break;
 8000c16:	e155      	b.n	8000ec4 <fsm_manual_run1+0x3f8>
	case CONF_GREEN:
		if(timer_flag[4] == 1){
 8000c18:	4b48      	ldr	r3, [pc, #288]	; (8000d3c <fsm_manual_run1+0x270>)
 8000c1a:	691b      	ldr	r3, [r3, #16]
 8000c1c:	2b01      	cmp	r3, #1
 8000c1e:	d106      	bne.n	8000c2e <fsm_manual_run1+0x162>
			DisplayMAN_GREENX();
 8000c20:	f000 ffb8 	bl	8001b94 <DisplayMAN_GREENX>
			setTimer(4, 500);
 8000c24:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000c28:	2004      	movs	r0, #4
 8000c2a:	f001 fa1d 	bl	8002068 <setTimer>
		}
		if(counterMode == 4){
 8000c2e:	4b44      	ldr	r3, [pc, #272]	; (8000d40 <fsm_manual_run1+0x274>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	2b04      	cmp	r3, #4
 8000c34:	d104      	bne.n	8000c40 <fsm_manual_run1+0x174>
			statusx = CONF_YELLOW;
 8000c36:	4b40      	ldr	r3, [pc, #256]	; (8000d38 <fsm_manual_run1+0x26c>)
 8000c38:	220a      	movs	r2, #10
 8000c3a:	601a      	str	r2, [r3, #0]
			InitLED();
 8000c3c:	f000 ffd4 	bl	8001be8 <InitLED>
		}
		fsm_mode();
 8000c40:	f7ff fc46 	bl	80004d0 <fsm_mode>
		SetMode();
 8000c44:	f7ff fa82 	bl	800014c <SetMode>
		if(mode3_flag == 1){
 8000c48:	4b45      	ldr	r3, [pc, #276]	; (8000d60 <fsm_manual_run1+0x294>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	2b01      	cmp	r3, #1
 8000c4e:	f040 813b 	bne.w	8000ec8 <fsm_manual_run1+0x3fc>
			statusx = AUTO_RED;
 8000c52:	4b39      	ldr	r3, [pc, #228]	; (8000d38 <fsm_manual_run1+0x26c>)
 8000c54:	2202      	movs	r2, #2
 8000c56:	601a      	str	r2, [r3, #0]
			setTimer(0, save_counterTimeSet*1000 + 2000);
 8000c58:	4b3b      	ldr	r3, [pc, #236]	; (8000d48 <fsm_manual_run1+0x27c>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c60:	fb02 f303 	mul.w	r3, r2, r3
 8000c64:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000c68:	4619      	mov	r1, r3
 8000c6a:	2000      	movs	r0, #0
 8000c6c:	f001 f9fc 	bl	8002068 <setTimer>
			number_clock1 = timer_counter[0]/100;
 8000c70:	4b36      	ldr	r3, [pc, #216]	; (8000d4c <fsm_manual_run1+0x280>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a36      	ldr	r2, [pc, #216]	; (8000d50 <fsm_manual_run1+0x284>)
 8000c76:	fb82 1203 	smull	r1, r2, r2, r3
 8000c7a:	1152      	asrs	r2, r2, #5
 8000c7c:	17db      	asrs	r3, r3, #31
 8000c7e:	1ad3      	subs	r3, r2, r3
 8000c80:	4a34      	ldr	r2, [pc, #208]	; (8000d54 <fsm_manual_run1+0x288>)
 8000c82:	6013      	str	r3, [r2, #0]
			statusy = MAN_GREEN;
 8000c84:	4b34      	ldr	r3, [pc, #208]	; (8000d58 <fsm_manual_run1+0x28c>)
 8000c86:	2206      	movs	r2, #6
 8000c88:	601a      	str	r2, [r3, #0]
			setTimer(1, save_counterTimeSet*1000);
 8000c8a:	4b2f      	ldr	r3, [pc, #188]	; (8000d48 <fsm_manual_run1+0x27c>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c92:	fb02 f303 	mul.w	r3, r2, r3
 8000c96:	4619      	mov	r1, r3
 8000c98:	2001      	movs	r0, #1
 8000c9a:	f001 f9e5 	bl	8002068 <setTimer>
			number_clock2 = timer_counter[1]/100;
 8000c9e:	4b2b      	ldr	r3, [pc, #172]	; (8000d4c <fsm_manual_run1+0x280>)
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	4a2b      	ldr	r2, [pc, #172]	; (8000d50 <fsm_manual_run1+0x284>)
 8000ca4:	fb82 1203 	smull	r1, r2, r2, r3
 8000ca8:	1152      	asrs	r2, r2, #5
 8000caa:	17db      	asrs	r3, r3, #31
 8000cac:	1ad3      	subs	r3, r2, r3
 8000cae:	4a2b      	ldr	r2, [pc, #172]	; (8000d5c <fsm_manual_run1+0x290>)
 8000cb0:	6013      	str	r3, [r2, #0]
			InitLED();
 8000cb2:	f000 ff99 	bl	8001be8 <InitLED>
		}
		break;
 8000cb6:	e107      	b.n	8000ec8 <fsm_manual_run1+0x3fc>
	case MAN_GREEN:
		if(timer_flag[4] == 1){
 8000cb8:	4b20      	ldr	r3, [pc, #128]	; (8000d3c <fsm_manual_run1+0x270>)
 8000cba:	691b      	ldr	r3, [r3, #16]
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	d106      	bne.n	8000cce <fsm_manual_run1+0x202>
			setTimer(4, 500);
 8000cc0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000cc4:	2004      	movs	r0, #4
 8000cc6:	f001 f9cf 	bl	8002068 <setTimer>
			DisplayMAN_GREENX();
 8000cca:	f000 ff63 	bl	8001b94 <DisplayMAN_GREENX>
		}
		ChangeModeX();
 8000cce:	f7ff fa8b 	bl	80001e8 <ChangeModeX>
		fsm_clock();
 8000cd2:	f7ff fb4f 	bl	8000374 <fsm_clock>
		if(timer_flag[0] == 1){
 8000cd6:	4b19      	ldr	r3, [pc, #100]	; (8000d3c <fsm_manual_run1+0x270>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	f040 80f6 	bne.w	8000ecc <fsm_manual_run1+0x400>
			InitLED();
 8000ce0:	f000 ff82 	bl	8001be8 <InitLED>
			statusx = AUTO_YELLOW;
 8000ce4:	4b14      	ldr	r3, [pc, #80]	; (8000d38 <fsm_manual_run1+0x26c>)
 8000ce6:	2204      	movs	r2, #4
 8000ce8:	601a      	str	r2, [r3, #0]
			if(mode2_flag == 1){
 8000cea:	4b16      	ldr	r3, [pc, #88]	; (8000d44 <fsm_manual_run1+0x278>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	2b01      	cmp	r3, #1
 8000cf0:	d10e      	bne.n	8000d10 <fsm_manual_run1+0x244>
				if(save_counterTimeSet < 2){
 8000cf2:	4b15      	ldr	r3, [pc, #84]	; (8000d48 <fsm_manual_run1+0x27c>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	2b01      	cmp	r3, #1
 8000cf8:	dc0f      	bgt.n	8000d1a <fsm_manual_run1+0x24e>
					setTimer(0,save_counterTimeSet*1000);
 8000cfa:	4b13      	ldr	r3, [pc, #76]	; (8000d48 <fsm_manual_run1+0x27c>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d02:	fb02 f303 	mul.w	r3, r2, r3
 8000d06:	4619      	mov	r1, r3
 8000d08:	2000      	movs	r0, #0
 8000d0a:	f001 f9ad 	bl	8002068 <setTimer>
 8000d0e:	e004      	b.n	8000d1a <fsm_manual_run1+0x24e>
				}
			}
			else{
				setTimer(0,2000);
 8000d10:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000d14:	2000      	movs	r0, #0
 8000d16:	f001 f9a7 	bl	8002068 <setTimer>
			}
			setTimer(2, 10);
 8000d1a:	210a      	movs	r1, #10
 8000d1c:	2002      	movs	r0, #2
 8000d1e:	f001 f9a3 	bl	8002068 <setTimer>
			number_clock1 = timer_counter[0]/100;
 8000d22:	4b0a      	ldr	r3, [pc, #40]	; (8000d4c <fsm_manual_run1+0x280>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a0a      	ldr	r2, [pc, #40]	; (8000d50 <fsm_manual_run1+0x284>)
 8000d28:	fb82 1203 	smull	r1, r2, r2, r3
 8000d2c:	1152      	asrs	r2, r2, #5
 8000d2e:	17db      	asrs	r3, r3, #31
 8000d30:	1ad3      	subs	r3, r2, r3
 8000d32:	4a08      	ldr	r2, [pc, #32]	; (8000d54 <fsm_manual_run1+0x288>)
 8000d34:	6013      	str	r3, [r2, #0]
		}
		break;
 8000d36:	e0c9      	b.n	8000ecc <fsm_manual_run1+0x400>
 8000d38:	20000044 	.word	0x20000044
 8000d3c:	200000f4 	.word	0x200000f4
 8000d40:	20000058 	.word	0x20000058
 8000d44:	20000034 	.word	0x20000034
 8000d48:	20000040 	.word	0x20000040
 8000d4c:	200000cc 	.word	0x200000cc
 8000d50:	51eb851f 	.word	0x51eb851f
 8000d54:	2000004c 	.word	0x2000004c
 8000d58:	20000048 	.word	0x20000048
 8000d5c:	20000050 	.word	0x20000050
 8000d60:	20000038 	.word	0x20000038
	case CONF_YELLOW:
		if(timer_flag[4] == 1){
 8000d64:	4b5d      	ldr	r3, [pc, #372]	; (8000edc <fsm_manual_run1+0x410>)
 8000d66:	691b      	ldr	r3, [r3, #16]
 8000d68:	2b01      	cmp	r3, #1
 8000d6a:	d106      	bne.n	8000d7a <fsm_manual_run1+0x2ae>
			DisplayMAN_YELLOWX();
 8000d6c:	f000 ff28 	bl	8001bc0 <DisplayMAN_YELLOWX>
			setTimer(4, 500);
 8000d70:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000d74:	2004      	movs	r0, #4
 8000d76:	f001 f977 	bl	8002068 <setTimer>
		}
		if(counterMode == 1){
 8000d7a:	4b59      	ldr	r3, [pc, #356]	; (8000ee0 <fsm_manual_run1+0x414>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	2b01      	cmp	r3, #1
 8000d80:	d117      	bne.n	8000db2 <fsm_manual_run1+0x2e6>
			statusx = AUTO_RED;
 8000d82:	4b58      	ldr	r3, [pc, #352]	; (8000ee4 <fsm_manual_run1+0x418>)
 8000d84:	2202      	movs	r2, #2
 8000d86:	601a      	str	r2, [r3, #0]
			setTimer(0,5000);
 8000d88:	f241 3188 	movw	r1, #5000	; 0x1388
 8000d8c:	2000      	movs	r0, #0
 8000d8e:	f001 f96b 	bl	8002068 <setTimer>
			setTimer(2,100);
 8000d92:	2164      	movs	r1, #100	; 0x64
 8000d94:	2002      	movs	r0, #2
 8000d96:	f001 f967 	bl	8002068 <setTimer>
			number_clock1 = timer_counter[0]/100;
 8000d9a:	4b53      	ldr	r3, [pc, #332]	; (8000ee8 <fsm_manual_run1+0x41c>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4a53      	ldr	r2, [pc, #332]	; (8000eec <fsm_manual_run1+0x420>)
 8000da0:	fb82 1203 	smull	r1, r2, r2, r3
 8000da4:	1152      	asrs	r2, r2, #5
 8000da6:	17db      	asrs	r3, r3, #31
 8000da8:	1ad3      	subs	r3, r2, r3
 8000daa:	4a51      	ldr	r2, [pc, #324]	; (8000ef0 <fsm_manual_run1+0x424>)
 8000dac:	6013      	str	r3, [r2, #0]
			InitLED();
 8000dae:	f000 ff1b 	bl	8001be8 <InitLED>
		}
		fsm_mode();
 8000db2:	f7ff fb8d 	bl	80004d0 <fsm_mode>
		SetMode();
 8000db6:	f7ff f9c9 	bl	800014c <SetMode>
		if(mode4_flag == 1){
 8000dba:	4b4e      	ldr	r3, [pc, #312]	; (8000ef4 <fsm_manual_run1+0x428>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	2b01      	cmp	r3, #1
 8000dc0:	f040 8086 	bne.w	8000ed0 <fsm_manual_run1+0x404>
			statusx = AUTO_RED;
 8000dc4:	4b47      	ldr	r3, [pc, #284]	; (8000ee4 <fsm_manual_run1+0x418>)
 8000dc6:	2202      	movs	r2, #2
 8000dc8:	601a      	str	r2, [r3, #0]
			setTimer(0, save_counterTimeSet*1000 + 3000);
 8000dca:	4b4b      	ldr	r3, [pc, #300]	; (8000ef8 <fsm_manual_run1+0x42c>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000dd2:	fb02 f303 	mul.w	r3, r2, r3
 8000dd6:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 8000dda:	4619      	mov	r1, r3
 8000ddc:	2000      	movs	r0, #0
 8000dde:	f001 f943 	bl	8002068 <setTimer>
			number_clock1 = timer_counter[0]/100;
 8000de2:	4b41      	ldr	r3, [pc, #260]	; (8000ee8 <fsm_manual_run1+0x41c>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4a41      	ldr	r2, [pc, #260]	; (8000eec <fsm_manual_run1+0x420>)
 8000de8:	fb82 1203 	smull	r1, r2, r2, r3
 8000dec:	1152      	asrs	r2, r2, #5
 8000dee:	17db      	asrs	r3, r3, #31
 8000df0:	1ad3      	subs	r3, r2, r3
 8000df2:	4a3f      	ldr	r2, [pc, #252]	; (8000ef0 <fsm_manual_run1+0x424>)
 8000df4:	6013      	str	r3, [r2, #0]
			statusy = AUTO_GREEN;
 8000df6:	4b41      	ldr	r3, [pc, #260]	; (8000efc <fsm_manual_run1+0x430>)
 8000df8:	2203      	movs	r2, #3
 8000dfa:	601a      	str	r2, [r3, #0]
			setTimer(1, 3000);
 8000dfc:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8000e00:	2001      	movs	r0, #1
 8000e02:	f001 f931 	bl	8002068 <setTimer>
			number_clock2 = timer_counter[1]/100;
 8000e06:	4b38      	ldr	r3, [pc, #224]	; (8000ee8 <fsm_manual_run1+0x41c>)
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	4a38      	ldr	r2, [pc, #224]	; (8000eec <fsm_manual_run1+0x420>)
 8000e0c:	fb82 1203 	smull	r1, r2, r2, r3
 8000e10:	1152      	asrs	r2, r2, #5
 8000e12:	17db      	asrs	r3, r3, #31
 8000e14:	1ad3      	subs	r3, r2, r3
 8000e16:	4a3a      	ldr	r2, [pc, #232]	; (8000f00 <fsm_manual_run1+0x434>)
 8000e18:	6013      	str	r3, [r2, #0]
			InitLED();
 8000e1a:	f000 fee5 	bl	8001be8 <InitLED>
		}
		break;
 8000e1e:	e057      	b.n	8000ed0 <fsm_manual_run1+0x404>
	case MAN_YELLOW:
		if(timer_flag[4] == 1){
 8000e20:	4b2e      	ldr	r3, [pc, #184]	; (8000edc <fsm_manual_run1+0x410>)
 8000e22:	691b      	ldr	r3, [r3, #16]
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d106      	bne.n	8000e36 <fsm_manual_run1+0x36a>
			setTimer(4, 500);
 8000e28:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000e2c:	2004      	movs	r0, #4
 8000e2e:	f001 f91b 	bl	8002068 <setTimer>
			DisplayMAN_YELLOWX();
 8000e32:	f000 fec5 	bl	8001bc0 <DisplayMAN_YELLOWX>
		}
		ChangeModeX();
 8000e36:	f7ff f9d7 	bl	80001e8 <ChangeModeX>
		fsm_clock();
 8000e3a:	f7ff fa9b 	bl	8000374 <fsm_clock>
		if(timer_flag[0] == 1){
 8000e3e:	4b27      	ldr	r3, [pc, #156]	; (8000edc <fsm_manual_run1+0x410>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	2b01      	cmp	r3, #1
 8000e44:	d146      	bne.n	8000ed4 <fsm_manual_run1+0x408>
			InitLED();
 8000e46:	f000 fecf 	bl	8001be8 <InitLED>
			statusx = AUTO_RED;
 8000e4a:	4b26      	ldr	r3, [pc, #152]	; (8000ee4 <fsm_manual_run1+0x418>)
 8000e4c:	2202      	movs	r2, #2
 8000e4e:	601a      	str	r2, [r3, #0]
			if(mode3_flag == 1){
 8000e50:	4b2c      	ldr	r3, [pc, #176]	; (8000f04 <fsm_manual_run1+0x438>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d10c      	bne.n	8000e72 <fsm_manual_run1+0x3a6>
				setTimer(0,save_counterTimeSet*1000 + 2000);
 8000e58:	4b27      	ldr	r3, [pc, #156]	; (8000ef8 <fsm_manual_run1+0x42c>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e60:	fb02 f303 	mul.w	r3, r2, r3
 8000e64:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000e68:	4619      	mov	r1, r3
 8000e6a:	2000      	movs	r0, #0
 8000e6c:	f001 f8fc 	bl	8002068 <setTimer>
 8000e70:	e015      	b.n	8000e9e <fsm_manual_run1+0x3d2>
			}
			else if(mode4_flag == 1){
 8000e72:	4b20      	ldr	r3, [pc, #128]	; (8000ef4 <fsm_manual_run1+0x428>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d10c      	bne.n	8000e94 <fsm_manual_run1+0x3c8>
				setTimer(0,save_counterTimeSet*1000 + 3000);
 8000e7a:	4b1f      	ldr	r3, [pc, #124]	; (8000ef8 <fsm_manual_run1+0x42c>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e82:	fb02 f303 	mul.w	r3, r2, r3
 8000e86:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	2000      	movs	r0, #0
 8000e8e:	f001 f8eb 	bl	8002068 <setTimer>
 8000e92:	e004      	b.n	8000e9e <fsm_manual_run1+0x3d2>
			}
			else{
				setTimer(0,5000);
 8000e94:	f241 3188 	movw	r1, #5000	; 0x1388
 8000e98:	2000      	movs	r0, #0
 8000e9a:	f001 f8e5 	bl	8002068 <setTimer>
			}
			setTimer(2, 10);
 8000e9e:	210a      	movs	r1, #10
 8000ea0:	2002      	movs	r0, #2
 8000ea2:	f001 f8e1 	bl	8002068 <setTimer>
			number_clock1 = timer_counter[0]/100;
 8000ea6:	4b10      	ldr	r3, [pc, #64]	; (8000ee8 <fsm_manual_run1+0x41c>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4a10      	ldr	r2, [pc, #64]	; (8000eec <fsm_manual_run1+0x420>)
 8000eac:	fb82 1203 	smull	r1, r2, r2, r3
 8000eb0:	1152      	asrs	r2, r2, #5
 8000eb2:	17db      	asrs	r3, r3, #31
 8000eb4:	1ad3      	subs	r3, r2, r3
 8000eb6:	4a0e      	ldr	r2, [pc, #56]	; (8000ef0 <fsm_manual_run1+0x424>)
 8000eb8:	6013      	str	r3, [r2, #0]
		}
		break;
 8000eba:	e00b      	b.n	8000ed4 <fsm_manual_run1+0x408>
	default:
		break;
 8000ebc:	bf00      	nop
 8000ebe:	e00a      	b.n	8000ed6 <fsm_manual_run1+0x40a>
		break;
 8000ec0:	bf00      	nop
 8000ec2:	e008      	b.n	8000ed6 <fsm_manual_run1+0x40a>
		break;
 8000ec4:	bf00      	nop
 8000ec6:	e006      	b.n	8000ed6 <fsm_manual_run1+0x40a>
		break;
 8000ec8:	bf00      	nop
 8000eca:	e004      	b.n	8000ed6 <fsm_manual_run1+0x40a>
		break;
 8000ecc:	bf00      	nop
 8000ece:	e002      	b.n	8000ed6 <fsm_manual_run1+0x40a>
		break;
 8000ed0:	bf00      	nop
 8000ed2:	e000      	b.n	8000ed6 <fsm_manual_run1+0x40a>
		break;
 8000ed4:	bf00      	nop
	}
}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	200000f4 	.word	0x200000f4
 8000ee0:	20000058 	.word	0x20000058
 8000ee4:	20000044 	.word	0x20000044
 8000ee8:	200000cc 	.word	0x200000cc
 8000eec:	51eb851f 	.word	0x51eb851f
 8000ef0:	2000004c 	.word	0x2000004c
 8000ef4:	2000003c 	.word	0x2000003c
 8000ef8:	20000040 	.word	0x20000040
 8000efc:	20000048 	.word	0x20000048
 8000f00:	20000050 	.word	0x20000050
 8000f04:	20000038 	.word	0x20000038

08000f08 <fsm_manual_run2>:
void fsm_manual_run2(void){
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
	switch(statusy){
 8000f0c:	4b9b      	ldr	r3, [pc, #620]	; (800117c <fsm_manual_run2+0x274>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	3b05      	subs	r3, #5
 8000f12:	2b05      	cmp	r3, #5
 8000f14:	f200 8122 	bhi.w	800115c <fsm_manual_run2+0x254>
 8000f18:	a201      	add	r2, pc, #4	; (adr r2, 8000f20 <fsm_manual_run2+0x18>)
 8000f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f1e:	bf00      	nop
 8000f20:	08000f69 	.word	0x08000f69
 8000f24:	08001011 	.word	0x08001011
 8000f28:	080010c5 	.word	0x080010c5
 8000f2c:	08000f39 	.word	0x08000f39
 8000f30:	08000fe1 	.word	0x08000fe1
 8000f34:	0800108d 	.word	0x0800108d
	case CONF_RED:
		fsm_mode();
 8000f38:	f7ff faca 	bl	80004d0 <fsm_mode>
		if(timer_flag[5] == 1){
 8000f3c:	4b90      	ldr	r3, [pc, #576]	; (8001180 <fsm_manual_run2+0x278>)
 8000f3e:	695b      	ldr	r3, [r3, #20]
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d106      	bne.n	8000f52 <fsm_manual_run2+0x4a>
			DisplayMAN_REDY();
 8000f44:	f000 fe1c 	bl	8001b80 <DisplayMAN_REDY>
			setTimer(5, 500);
 8000f48:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000f4c:	2005      	movs	r0, #5
 8000f4e:	f001 f88b 	bl	8002068 <setTimer>
		}
		if(counterMode == 3){
 8000f52:	4b8c      	ldr	r3, [pc, #560]	; (8001184 <fsm_manual_run2+0x27c>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	2b03      	cmp	r3, #3
 8000f58:	f040 8102 	bne.w	8001160 <fsm_manual_run2+0x258>
			statusy = CONF_GREEN;
 8000f5c:	4b87      	ldr	r3, [pc, #540]	; (800117c <fsm_manual_run2+0x274>)
 8000f5e:	2209      	movs	r2, #9
 8000f60:	601a      	str	r2, [r3, #0]
			InitLED();
 8000f62:	f000 fe41 	bl	8001be8 <InitLED>
		}
		break;
 8000f66:	e0fb      	b.n	8001160 <fsm_manual_run2+0x258>
	case MAN_RED:
		if(timer_flag[5] == 1){
 8000f68:	4b85      	ldr	r3, [pc, #532]	; (8001180 <fsm_manual_run2+0x278>)
 8000f6a:	695b      	ldr	r3, [r3, #20]
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d106      	bne.n	8000f7e <fsm_manual_run2+0x76>
			DisplayMAN_REDY();
 8000f70:	f000 fe06 	bl	8001b80 <DisplayMAN_REDY>
			setTimer(5, 500);
 8000f74:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000f78:	2005      	movs	r0, #5
 8000f7a:	f001 f875 	bl	8002068 <setTimer>
		}
		ChangeModeY();
 8000f7e:	f7ff f975 	bl	800026c <ChangeModeY>
		if(timer_flag[1] == 1){
 8000f82:	4b7f      	ldr	r3, [pc, #508]	; (8001180 <fsm_manual_run2+0x278>)
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	f040 80ec 	bne.w	8001164 <fsm_manual_run2+0x25c>
			InitLED();
 8000f8c:	f000 fe2c 	bl	8001be8 <InitLED>
			statusy = AUTO_GREEN;
 8000f90:	4b7a      	ldr	r3, [pc, #488]	; (800117c <fsm_manual_run2+0x274>)
 8000f92:	2203      	movs	r2, #3
 8000f94:	601a      	str	r2, [r3, #0]
			if(mode2_flag == 1){
 8000f96:	4b7c      	ldr	r3, [pc, #496]	; (8001188 <fsm_manual_run2+0x280>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	d10c      	bne.n	8000fb8 <fsm_manual_run2+0xb0>
				setTimer(1,save_counterTimeSet*1000 - 2000);
 8000f9e:	4b7b      	ldr	r3, [pc, #492]	; (800118c <fsm_manual_run2+0x284>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000fa6:	fb02 f303 	mul.w	r3, r2, r3
 8000faa:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 8000fae:	4619      	mov	r1, r3
 8000fb0:	2001      	movs	r0, #1
 8000fb2:	f001 f859 	bl	8002068 <setTimer>
 8000fb6:	e004      	b.n	8000fc2 <fsm_manual_run2+0xba>
			}
			else{
				setTimer(1,3000);
 8000fb8:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8000fbc:	2001      	movs	r0, #1
 8000fbe:	f001 f853 	bl	8002068 <setTimer>
			}
			setTimer(3, 10);
 8000fc2:	210a      	movs	r1, #10
 8000fc4:	2003      	movs	r0, #3
 8000fc6:	f001 f84f 	bl	8002068 <setTimer>
			number_clock2 = timer_counter[1]/100;
 8000fca:	4b71      	ldr	r3, [pc, #452]	; (8001190 <fsm_manual_run2+0x288>)
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	4a71      	ldr	r2, [pc, #452]	; (8001194 <fsm_manual_run2+0x28c>)
 8000fd0:	fb82 1203 	smull	r1, r2, r2, r3
 8000fd4:	1152      	asrs	r2, r2, #5
 8000fd6:	17db      	asrs	r3, r3, #31
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	4a6f      	ldr	r2, [pc, #444]	; (8001198 <fsm_manual_run2+0x290>)
 8000fdc:	6013      	str	r3, [r2, #0]
		}
		break;
 8000fde:	e0c1      	b.n	8001164 <fsm_manual_run2+0x25c>
	case CONF_GREEN:
		fsm_mode();
 8000fe0:	f7ff fa76 	bl	80004d0 <fsm_mode>
		if(timer_flag[5] == 1){
 8000fe4:	4b66      	ldr	r3, [pc, #408]	; (8001180 <fsm_manual_run2+0x278>)
 8000fe6:	695b      	ldr	r3, [r3, #20]
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d106      	bne.n	8000ffa <fsm_manual_run2+0xf2>
			DisplayMAN_GREENY();
 8000fec:	f000 fddc 	bl	8001ba8 <DisplayMAN_GREENY>
			setTimer(5, 500);
 8000ff0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000ff4:	2005      	movs	r0, #5
 8000ff6:	f001 f837 	bl	8002068 <setTimer>
		}
		if(counterMode == 4){
 8000ffa:	4b62      	ldr	r3, [pc, #392]	; (8001184 <fsm_manual_run2+0x27c>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	2b04      	cmp	r3, #4
 8001000:	f040 80b2 	bne.w	8001168 <fsm_manual_run2+0x260>
			statusy = CONF_YELLOW;
 8001004:	4b5d      	ldr	r3, [pc, #372]	; (800117c <fsm_manual_run2+0x274>)
 8001006:	220a      	movs	r2, #10
 8001008:	601a      	str	r2, [r3, #0]
			InitLED();
 800100a:	f000 fded 	bl	8001be8 <InitLED>
		}
		break;
 800100e:	e0ab      	b.n	8001168 <fsm_manual_run2+0x260>
	case MAN_GREEN:
		if(timer_flag[5] == 1){
 8001010:	4b5b      	ldr	r3, [pc, #364]	; (8001180 <fsm_manual_run2+0x278>)
 8001012:	695b      	ldr	r3, [r3, #20]
 8001014:	2b01      	cmp	r3, #1
 8001016:	d106      	bne.n	8001026 <fsm_manual_run2+0x11e>
			DisplayMAN_GREENY();
 8001018:	f000 fdc6 	bl	8001ba8 <DisplayMAN_GREENY>
			setTimer(5, 500);
 800101c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001020:	2005      	movs	r0, #5
 8001022:	f001 f821 	bl	8002068 <setTimer>
		}
		ChangeModeY();
 8001026:	f7ff f921 	bl	800026c <ChangeModeY>
		if(timer_flag[1] == 1){
 800102a:	4b55      	ldr	r3, [pc, #340]	; (8001180 <fsm_manual_run2+0x278>)
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	2b01      	cmp	r3, #1
 8001030:	f040 809c 	bne.w	800116c <fsm_manual_run2+0x264>
			InitLED();
 8001034:	f000 fdd8 	bl	8001be8 <InitLED>
			statusy = AUTO_YELLOW;
 8001038:	4b50      	ldr	r3, [pc, #320]	; (800117c <fsm_manual_run2+0x274>)
 800103a:	2204      	movs	r2, #4
 800103c:	601a      	str	r2, [r3, #0]
			if(mode2_flag == 1){
 800103e:	4b52      	ldr	r3, [pc, #328]	; (8001188 <fsm_manual_run2+0x280>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	2b01      	cmp	r3, #1
 8001044:	d10e      	bne.n	8001064 <fsm_manual_run2+0x15c>
				if(save_counterTimeSet < 2){
 8001046:	4b51      	ldr	r3, [pc, #324]	; (800118c <fsm_manual_run2+0x284>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	2b01      	cmp	r3, #1
 800104c:	dc0f      	bgt.n	800106e <fsm_manual_run2+0x166>
					setTimer(1,save_counterTimeSet*1000);
 800104e:	4b4f      	ldr	r3, [pc, #316]	; (800118c <fsm_manual_run2+0x284>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001056:	fb02 f303 	mul.w	r3, r2, r3
 800105a:	4619      	mov	r1, r3
 800105c:	2001      	movs	r0, #1
 800105e:	f001 f803 	bl	8002068 <setTimer>
 8001062:	e004      	b.n	800106e <fsm_manual_run2+0x166>
				}
			}
			else{
				setTimer(1,2000);
 8001064:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001068:	2001      	movs	r0, #1
 800106a:	f000 fffd 	bl	8002068 <setTimer>
			}
			setTimer(3, 10);
 800106e:	210a      	movs	r1, #10
 8001070:	2003      	movs	r0, #3
 8001072:	f000 fff9 	bl	8002068 <setTimer>
			number_clock2 = timer_counter[1]/100;
 8001076:	4b46      	ldr	r3, [pc, #280]	; (8001190 <fsm_manual_run2+0x288>)
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	4a46      	ldr	r2, [pc, #280]	; (8001194 <fsm_manual_run2+0x28c>)
 800107c:	fb82 1203 	smull	r1, r2, r2, r3
 8001080:	1152      	asrs	r2, r2, #5
 8001082:	17db      	asrs	r3, r3, #31
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	4a44      	ldr	r2, [pc, #272]	; (8001198 <fsm_manual_run2+0x290>)
 8001088:	6013      	str	r3, [r2, #0]
		}
		break;
 800108a:	e06f      	b.n	800116c <fsm_manual_run2+0x264>
	case CONF_YELLOW:
		fsm_mode();
 800108c:	f7ff fa20 	bl	80004d0 <fsm_mode>
		if(timer_flag[5] == 1){
 8001090:	4b3b      	ldr	r3, [pc, #236]	; (8001180 <fsm_manual_run2+0x278>)
 8001092:	695b      	ldr	r3, [r3, #20]
 8001094:	2b01      	cmp	r3, #1
 8001096:	d106      	bne.n	80010a6 <fsm_manual_run2+0x19e>
			DisplayMAN_YELLOWY();
 8001098:	f000 fd9c 	bl	8001bd4 <DisplayMAN_YELLOWY>
			setTimer(5, 500);
 800109c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80010a0:	2005      	movs	r0, #5
 80010a2:	f000 ffe1 	bl	8002068 <setTimer>
		}
		if(counterMode == 1){
 80010a6:	4b37      	ldr	r3, [pc, #220]	; (8001184 <fsm_manual_run2+0x27c>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d160      	bne.n	8001170 <fsm_manual_run2+0x268>
			InitLED();
 80010ae:	f000 fd9b 	bl	8001be8 <InitLED>
			statusy = AUTO_GREEN;
 80010b2:	4b32      	ldr	r3, [pc, #200]	; (800117c <fsm_manual_run2+0x274>)
 80010b4:	2203      	movs	r2, #3
 80010b6:	601a      	str	r2, [r3, #0]
			setTimer(1,3000);
 80010b8:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80010bc:	2001      	movs	r0, #1
 80010be:	f000 ffd3 	bl	8002068 <setTimer>
		}
		break;
 80010c2:	e055      	b.n	8001170 <fsm_manual_run2+0x268>
	case MAN_YELLOW:
		if(timer_flag[5] == 1){
 80010c4:	4b2e      	ldr	r3, [pc, #184]	; (8001180 <fsm_manual_run2+0x278>)
 80010c6:	695b      	ldr	r3, [r3, #20]
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d106      	bne.n	80010da <fsm_manual_run2+0x1d2>
			DisplayMAN_YELLOWY();
 80010cc:	f000 fd82 	bl	8001bd4 <DisplayMAN_YELLOWY>
			setTimer(5, 500);
 80010d0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80010d4:	2005      	movs	r0, #5
 80010d6:	f000 ffc7 	bl	8002068 <setTimer>
		}
		ChangeModeY();
 80010da:	f7ff f8c7 	bl	800026c <ChangeModeY>
		if(timer_flag[1] == 1){
 80010de:	4b28      	ldr	r3, [pc, #160]	; (8001180 <fsm_manual_run2+0x278>)
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d146      	bne.n	8001174 <fsm_manual_run2+0x26c>
			InitLED();
 80010e6:	f000 fd7f 	bl	8001be8 <InitLED>
			statusy = AUTO_RED;
 80010ea:	4b24      	ldr	r3, [pc, #144]	; (800117c <fsm_manual_run2+0x274>)
 80010ec:	2202      	movs	r2, #2
 80010ee:	601a      	str	r2, [r3, #0]
			if(mode3_flag == 1){
 80010f0:	4b2a      	ldr	r3, [pc, #168]	; (800119c <fsm_manual_run2+0x294>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d10c      	bne.n	8001112 <fsm_manual_run2+0x20a>
				setTimer(1,save_counterTimeSet*1000 + 2000);
 80010f8:	4b24      	ldr	r3, [pc, #144]	; (800118c <fsm_manual_run2+0x284>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001100:	fb02 f303 	mul.w	r3, r2, r3
 8001104:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8001108:	4619      	mov	r1, r3
 800110a:	2001      	movs	r0, #1
 800110c:	f000 ffac 	bl	8002068 <setTimer>
 8001110:	e015      	b.n	800113e <fsm_manual_run2+0x236>
			}
			else if(mode4_flag == 1){
 8001112:	4b23      	ldr	r3, [pc, #140]	; (80011a0 <fsm_manual_run2+0x298>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	2b01      	cmp	r3, #1
 8001118:	d10c      	bne.n	8001134 <fsm_manual_run2+0x22c>
				setTimer(1,save_counterTimeSet*1000 + 3000);
 800111a:	4b1c      	ldr	r3, [pc, #112]	; (800118c <fsm_manual_run2+0x284>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001122:	fb02 f303 	mul.w	r3, r2, r3
 8001126:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 800112a:	4619      	mov	r1, r3
 800112c:	2001      	movs	r0, #1
 800112e:	f000 ff9b 	bl	8002068 <setTimer>
 8001132:	e004      	b.n	800113e <fsm_manual_run2+0x236>
			}
			else{
				setTimer(1,5000);
 8001134:	f241 3188 	movw	r1, #5000	; 0x1388
 8001138:	2001      	movs	r0, #1
 800113a:	f000 ff95 	bl	8002068 <setTimer>
			}
			setTimer(3, 10);
 800113e:	210a      	movs	r1, #10
 8001140:	2003      	movs	r0, #3
 8001142:	f000 ff91 	bl	8002068 <setTimer>
			number_clock2 = timer_counter[1]/100;
 8001146:	4b12      	ldr	r3, [pc, #72]	; (8001190 <fsm_manual_run2+0x288>)
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	4a12      	ldr	r2, [pc, #72]	; (8001194 <fsm_manual_run2+0x28c>)
 800114c:	fb82 1203 	smull	r1, r2, r2, r3
 8001150:	1152      	asrs	r2, r2, #5
 8001152:	17db      	asrs	r3, r3, #31
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	4a10      	ldr	r2, [pc, #64]	; (8001198 <fsm_manual_run2+0x290>)
 8001158:	6013      	str	r3, [r2, #0]
		}
		break;
 800115a:	e00b      	b.n	8001174 <fsm_manual_run2+0x26c>
	default:
		break;
 800115c:	bf00      	nop
 800115e:	e00a      	b.n	8001176 <fsm_manual_run2+0x26e>
		break;
 8001160:	bf00      	nop
 8001162:	e008      	b.n	8001176 <fsm_manual_run2+0x26e>
		break;
 8001164:	bf00      	nop
 8001166:	e006      	b.n	8001176 <fsm_manual_run2+0x26e>
		break;
 8001168:	bf00      	nop
 800116a:	e004      	b.n	8001176 <fsm_manual_run2+0x26e>
		break;
 800116c:	bf00      	nop
 800116e:	e002      	b.n	8001176 <fsm_manual_run2+0x26e>
		break;
 8001170:	bf00      	nop
 8001172:	e000      	b.n	8001176 <fsm_manual_run2+0x26e>
		break;
 8001174:	bf00      	nop
	}
}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	20000048 	.word	0x20000048
 8001180:	200000f4 	.word	0x200000f4
 8001184:	20000058 	.word	0x20000058
 8001188:	20000034 	.word	0x20000034
 800118c:	20000040 	.word	0x20000040
 8001190:	200000cc 	.word	0x200000cc
 8001194:	51eb851f 	.word	0x51eb851f
 8001198:	20000050 	.word	0x20000050
 800119c:	20000038 	.word	0x20000038
 80011a0:	2000003c 	.word	0x2000003c

080011a4 <fsm_for_input_processing1>:
enum ButtonState buttonState1 = BUTTON_RELEASED;
enum ButtonState buttonState2 = BUTTON_RELEASED;
enum ButtonState buttonState3 = BUTTON_RELEASED;
int counterMode = 0;
int counterTimeSet = 0;
void fsm_for_input_processing1(void){
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
	switch(buttonState1){
 80011a8:	4b26      	ldr	r3, [pc, #152]	; (8001244 <fsm_for_input_processing1+0xa0>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	2b02      	cmp	r3, #2
 80011ae:	d038      	beq.n	8001222 <fsm_for_input_processing1+0x7e>
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	dc45      	bgt.n	8001240 <fsm_for_input_processing1+0x9c>
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d002      	beq.n	80011be <fsm_for_input_processing1+0x1a>
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d01e      	beq.n	80011fa <fsm_for_input_processing1+0x56>
			if(!is_button_pressed(0)){
				buttonState1 = BUTTON_RELEASED;
			}
		break;
		}
	}
 80011bc:	e040      	b.n	8001240 <fsm_for_input_processing1+0x9c>
			if(is_button_pressed(0)){
 80011be:	2000      	movs	r0, #0
 80011c0:	f000 f9d8 	bl	8001574 <is_button_pressed>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d035      	beq.n	8001236 <fsm_for_input_processing1+0x92>
				buttonState1 = BUTTON_PRESSED ;
 80011ca:	4b1e      	ldr	r3, [pc, #120]	; (8001244 <fsm_for_input_processing1+0xa0>)
 80011cc:	2201      	movs	r2, #1
 80011ce:	701a      	strb	r2, [r3, #0]
				if(ProcessButton1() == 1){
 80011d0:	f000 f8da 	bl	8001388 <ProcessButton1>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d12d      	bne.n	8001236 <fsm_for_input_processing1+0x92>
					  counterMode++;
 80011da:	4b1b      	ldr	r3, [pc, #108]	; (8001248 <fsm_for_input_processing1+0xa4>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	3301      	adds	r3, #1
 80011e0:	4a19      	ldr	r2, [pc, #100]	; (8001248 <fsm_for_input_processing1+0xa4>)
 80011e2:	6013      	str	r3, [r2, #0]
					  counterTimeSet = 0;
 80011e4:	4b19      	ldr	r3, [pc, #100]	; (800124c <fsm_for_input_processing1+0xa8>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
					  if(counterMode > 4){
 80011ea:	4b17      	ldr	r3, [pc, #92]	; (8001248 <fsm_for_input_processing1+0xa4>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	2b04      	cmp	r3, #4
 80011f0:	dd21      	ble.n	8001236 <fsm_for_input_processing1+0x92>
						  counterMode = 1;
 80011f2:	4b15      	ldr	r3, [pc, #84]	; (8001248 <fsm_for_input_processing1+0xa4>)
 80011f4:	2201      	movs	r2, #1
 80011f6:	601a      	str	r2, [r3, #0]
		break;
 80011f8:	e01d      	b.n	8001236 <fsm_for_input_processing1+0x92>
			if(!is_button_pressed(0)){
 80011fa:	2000      	movs	r0, #0
 80011fc:	f000 f9ba 	bl	8001574 <is_button_pressed>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d103      	bne.n	800120e <fsm_for_input_processing1+0x6a>
				buttonState1 = BUTTON_RELEASED;
 8001206:	4b0f      	ldr	r3, [pc, #60]	; (8001244 <fsm_for_input_processing1+0xa0>)
 8001208:	2200      	movs	r2, #0
 800120a:	701a      	strb	r2, [r3, #0]
		break;
 800120c:	e015      	b.n	800123a <fsm_for_input_processing1+0x96>
				if(is_button_pressed_1s(0) == 1){
 800120e:	2000      	movs	r0, #0
 8001210:	f000 f9ca 	bl	80015a8 <is_button_pressed_1s>
 8001214:	4603      	mov	r3, r0
 8001216:	2b01      	cmp	r3, #1
 8001218:	d10f      	bne.n	800123a <fsm_for_input_processing1+0x96>
					buttonState1 = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 800121a:	4b0a      	ldr	r3, [pc, #40]	; (8001244 <fsm_for_input_processing1+0xa0>)
 800121c:	2202      	movs	r2, #2
 800121e:	701a      	strb	r2, [r3, #0]
		break;
 8001220:	e00b      	b.n	800123a <fsm_for_input_processing1+0x96>
			if(!is_button_pressed(0)){
 8001222:	2000      	movs	r0, #0
 8001224:	f000 f9a6 	bl	8001574 <is_button_pressed>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d107      	bne.n	800123e <fsm_for_input_processing1+0x9a>
				buttonState1 = BUTTON_RELEASED;
 800122e:	4b05      	ldr	r3, [pc, #20]	; (8001244 <fsm_for_input_processing1+0xa0>)
 8001230:	2200      	movs	r2, #0
 8001232:	701a      	strb	r2, [r3, #0]
		break;
 8001234:	e003      	b.n	800123e <fsm_for_input_processing1+0x9a>
		break;
 8001236:	bf00      	nop
 8001238:	e002      	b.n	8001240 <fsm_for_input_processing1+0x9c>
		break;
 800123a:	bf00      	nop
 800123c:	e000      	b.n	8001240 <fsm_for_input_processing1+0x9c>
		break;
 800123e:	bf00      	nop
	}
 8001240:	bf00      	nop
 8001242:	bd80      	pop	{r7, pc}
 8001244:	20000054 	.word	0x20000054
 8001248:	20000058 	.word	0x20000058
 800124c:	2000005c 	.word	0x2000005c

08001250 <fsm_for_input_processing2>:
void fsm_for_input_processing2(void){
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
	switch(buttonState2){
 8001254:	4b25      	ldr	r3, [pc, #148]	; (80012ec <fsm_for_input_processing2+0x9c>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	2b02      	cmp	r3, #2
 800125a:	d035      	beq.n	80012c8 <fsm_for_input_processing2+0x78>
 800125c:	2b02      	cmp	r3, #2
 800125e:	dc42      	bgt.n	80012e6 <fsm_for_input_processing2+0x96>
 8001260:	2b00      	cmp	r3, #0
 8001262:	d002      	beq.n	800126a <fsm_for_input_processing2+0x1a>
 8001264:	2b01      	cmp	r3, #1
 8001266:	d01b      	beq.n	80012a0 <fsm_for_input_processing2+0x50>
			if(!is_button_pressed(1)){
				buttonState2 = BUTTON_RELEASED;
			}
		break;
		}
	}
 8001268:	e03d      	b.n	80012e6 <fsm_for_input_processing2+0x96>
			if(is_button_pressed(1)){
 800126a:	2001      	movs	r0, #1
 800126c:	f000 f982 	bl	8001574 <is_button_pressed>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d032      	beq.n	80012dc <fsm_for_input_processing2+0x8c>
				buttonState2 = BUTTON_PRESSED ;
 8001276:	4b1d      	ldr	r3, [pc, #116]	; (80012ec <fsm_for_input_processing2+0x9c>)
 8001278:	2201      	movs	r2, #1
 800127a:	701a      	strb	r2, [r3, #0]
				if(ProcessButton2() == 1){
 800127c:	f000 f8a2 	bl	80013c4 <ProcessButton2>
 8001280:	4603      	mov	r3, r0
 8001282:	2b01      	cmp	r3, #1
 8001284:	d12a      	bne.n	80012dc <fsm_for_input_processing2+0x8c>
					  counterTimeSet++;
 8001286:	4b1a      	ldr	r3, [pc, #104]	; (80012f0 <fsm_for_input_processing2+0xa0>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	3301      	adds	r3, #1
 800128c:	4a18      	ldr	r2, [pc, #96]	; (80012f0 <fsm_for_input_processing2+0xa0>)
 800128e:	6013      	str	r3, [r2, #0]
					  if(counterTimeSet > 99){
 8001290:	4b17      	ldr	r3, [pc, #92]	; (80012f0 <fsm_for_input_processing2+0xa0>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2b63      	cmp	r3, #99	; 0x63
 8001296:	dd21      	ble.n	80012dc <fsm_for_input_processing2+0x8c>
						  counterTimeSet = 0;
 8001298:	4b15      	ldr	r3, [pc, #84]	; (80012f0 <fsm_for_input_processing2+0xa0>)
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
		break;
 800129e:	e01d      	b.n	80012dc <fsm_for_input_processing2+0x8c>
			if(!is_button_pressed(1)){
 80012a0:	2001      	movs	r0, #1
 80012a2:	f000 f967 	bl	8001574 <is_button_pressed>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d103      	bne.n	80012b4 <fsm_for_input_processing2+0x64>
				buttonState2 = BUTTON_RELEASED;
 80012ac:	4b0f      	ldr	r3, [pc, #60]	; (80012ec <fsm_for_input_processing2+0x9c>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	701a      	strb	r2, [r3, #0]
		break;
 80012b2:	e015      	b.n	80012e0 <fsm_for_input_processing2+0x90>
				if(is_button_pressed_1s(1) == 1){
 80012b4:	2001      	movs	r0, #1
 80012b6:	f000 f977 	bl	80015a8 <is_button_pressed_1s>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d10f      	bne.n	80012e0 <fsm_for_input_processing2+0x90>
					buttonState2 = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 80012c0:	4b0a      	ldr	r3, [pc, #40]	; (80012ec <fsm_for_input_processing2+0x9c>)
 80012c2:	2202      	movs	r2, #2
 80012c4:	701a      	strb	r2, [r3, #0]
		break;
 80012c6:	e00b      	b.n	80012e0 <fsm_for_input_processing2+0x90>
			if(!is_button_pressed(1)){
 80012c8:	2001      	movs	r0, #1
 80012ca:	f000 f953 	bl	8001574 <is_button_pressed>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d107      	bne.n	80012e4 <fsm_for_input_processing2+0x94>
				buttonState2 = BUTTON_RELEASED;
 80012d4:	4b05      	ldr	r3, [pc, #20]	; (80012ec <fsm_for_input_processing2+0x9c>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	701a      	strb	r2, [r3, #0]
		break;
 80012da:	e003      	b.n	80012e4 <fsm_for_input_processing2+0x94>
		break;
 80012dc:	bf00      	nop
 80012de:	e002      	b.n	80012e6 <fsm_for_input_processing2+0x96>
		break;
 80012e0:	bf00      	nop
 80012e2:	e000      	b.n	80012e6 <fsm_for_input_processing2+0x96>
		break;
 80012e4:	bf00      	nop
	}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	20000055 	.word	0x20000055
 80012f0:	2000005c 	.word	0x2000005c

080012f4 <fsm_for_input_processing3>:
void fsm_for_input_processing3(void){
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
	switch(buttonState3){
 80012f8:	4b1c      	ldr	r3, [pc, #112]	; (800136c <fsm_for_input_processing3+0x78>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d024      	beq.n	800134a <fsm_for_input_processing3+0x56>
 8001300:	2b02      	cmp	r3, #2
 8001302:	dc31      	bgt.n	8001368 <fsm_for_input_processing3+0x74>
 8001304:	2b00      	cmp	r3, #0
 8001306:	d002      	beq.n	800130e <fsm_for_input_processing3+0x1a>
 8001308:	2b01      	cmp	r3, #1
 800130a:	d00a      	beq.n	8001322 <fsm_for_input_processing3+0x2e>
			if(!is_button_pressed(2)){
				buttonState3 = BUTTON_RELEASED;
			}
		break;
		}
	}
 800130c:	e02c      	b.n	8001368 <fsm_for_input_processing3+0x74>
			if(is_button_pressed(2)){
 800130e:	2002      	movs	r0, #2
 8001310:	f000 f930 	bl	8001574 <is_button_pressed>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d021      	beq.n	800135e <fsm_for_input_processing3+0x6a>
				buttonState3 = BUTTON_PRESSED ;
 800131a:	4b14      	ldr	r3, [pc, #80]	; (800136c <fsm_for_input_processing3+0x78>)
 800131c:	2201      	movs	r2, #1
 800131e:	701a      	strb	r2, [r3, #0]
		break;
 8001320:	e01d      	b.n	800135e <fsm_for_input_processing3+0x6a>
			if(!is_button_pressed(2)){
 8001322:	2002      	movs	r0, #2
 8001324:	f000 f926 	bl	8001574 <is_button_pressed>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d103      	bne.n	8001336 <fsm_for_input_processing3+0x42>
				buttonState3 = BUTTON_RELEASED;
 800132e:	4b0f      	ldr	r3, [pc, #60]	; (800136c <fsm_for_input_processing3+0x78>)
 8001330:	2200      	movs	r2, #0
 8001332:	701a      	strb	r2, [r3, #0]
		break;
 8001334:	e015      	b.n	8001362 <fsm_for_input_processing3+0x6e>
				if(is_button_pressed_1s(2) == 1){
 8001336:	2002      	movs	r0, #2
 8001338:	f000 f936 	bl	80015a8 <is_button_pressed_1s>
 800133c:	4603      	mov	r3, r0
 800133e:	2b01      	cmp	r3, #1
 8001340:	d10f      	bne.n	8001362 <fsm_for_input_processing3+0x6e>
					buttonState3 = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 8001342:	4b0a      	ldr	r3, [pc, #40]	; (800136c <fsm_for_input_processing3+0x78>)
 8001344:	2202      	movs	r2, #2
 8001346:	701a      	strb	r2, [r3, #0]
		break;
 8001348:	e00b      	b.n	8001362 <fsm_for_input_processing3+0x6e>
			if(!is_button_pressed(2)){
 800134a:	2002      	movs	r0, #2
 800134c:	f000 f912 	bl	8001574 <is_button_pressed>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d107      	bne.n	8001366 <fsm_for_input_processing3+0x72>
				buttonState3 = BUTTON_RELEASED;
 8001356:	4b05      	ldr	r3, [pc, #20]	; (800136c <fsm_for_input_processing3+0x78>)
 8001358:	2200      	movs	r2, #0
 800135a:	701a      	strb	r2, [r3, #0]
		break;
 800135c:	e003      	b.n	8001366 <fsm_for_input_processing3+0x72>
		break;
 800135e:	bf00      	nop
 8001360:	e002      	b.n	8001368 <fsm_for_input_processing3+0x74>
		break;
 8001362:	bf00      	nop
 8001364:	e000      	b.n	8001368 <fsm_for_input_processing3+0x74>
		break;
 8001366:	bf00      	nop
	}
 8001368:	bf00      	nop
 800136a:	bd80      	pop	{r7, pc}
 800136c:	20000056 	.word	0x20000056

08001370 <Button1Run>:
static uint8_t flagForButtonPress1s[N0_OF_BUTTONS];
static uint16_t counterForButtonPress1s[N0_OF_BUTTONS];
int button1_flag = 0;
int button2_flag = 0;
int button3_flag = 0;
void Button1Run(void){
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
 	button1_flag = 1;
 8001374:	4b03      	ldr	r3, [pc, #12]	; (8001384 <Button1Run+0x14>)
 8001376:	2201      	movs	r2, #1
 8001378:	601a      	str	r2, [r3, #0]
 }
 800137a:	bf00      	nop
 800137c:	46bd      	mov	sp, r7
 800137e:	bc80      	pop	{r7}
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	20000078 	.word	0x20000078

08001388 <ProcessButton1>:
int ProcessButton1(void){
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
	 if(button1_flag == 1){
 800138c:	4b06      	ldr	r3, [pc, #24]	; (80013a8 <ProcessButton1+0x20>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2b01      	cmp	r3, #1
 8001392:	d104      	bne.n	800139e <ProcessButton1+0x16>
		 button1_flag = 0;
 8001394:	4b04      	ldr	r3, [pc, #16]	; (80013a8 <ProcessButton1+0x20>)
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
		 return 1;
 800139a:	2301      	movs	r3, #1
 800139c:	e000      	b.n	80013a0 <ProcessButton1+0x18>
	 }
	 return 0;
 800139e:	2300      	movs	r3, #0
 }
 80013a0:	4618      	mov	r0, r3
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bc80      	pop	{r7}
 80013a6:	4770      	bx	lr
 80013a8:	20000078 	.word	0x20000078

080013ac <Button2Run>:
void Button2Run(void){
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
 	button2_flag = 1;
 80013b0:	4b03      	ldr	r3, [pc, #12]	; (80013c0 <Button2Run+0x14>)
 80013b2:	2201      	movs	r2, #1
 80013b4:	601a      	str	r2, [r3, #0]
 }
 80013b6:	bf00      	nop
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bc80      	pop	{r7}
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	2000007c 	.word	0x2000007c

080013c4 <ProcessButton2>:
int ProcessButton2(void){
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
	 if(button2_flag == 1){
 80013c8:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <ProcessButton2+0x20>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d104      	bne.n	80013da <ProcessButton2+0x16>
		 button2_flag = 0;
 80013d0:	4b04      	ldr	r3, [pc, #16]	; (80013e4 <ProcessButton2+0x20>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
		 return 1;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e000      	b.n	80013dc <ProcessButton2+0x18>
	 }
	 return 0;
 80013da:	2300      	movs	r3, #0
 }
 80013dc:	4618      	mov	r0, r3
 80013de:	46bd      	mov	sp, r7
 80013e0:	bc80      	pop	{r7}
 80013e2:	4770      	bx	lr
 80013e4:	2000007c 	.word	0x2000007c

080013e8 <Button3Run>:
void Button3Run(void){
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
 	button3_flag = 1;
 80013ec:	4b03      	ldr	r3, [pc, #12]	; (80013fc <Button3Run+0x14>)
 80013ee:	2201      	movs	r2, #1
 80013f0:	601a      	str	r2, [r3, #0]
 }
 80013f2:	bf00      	nop
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bc80      	pop	{r7}
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	20000080 	.word	0x20000080

08001400 <ProcessButton3>:
int ProcessButton3(void){
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
	 if(button3_flag == 1){
 8001404:	4b06      	ldr	r3, [pc, #24]	; (8001420 <ProcessButton3+0x20>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2b01      	cmp	r3, #1
 800140a:	d104      	bne.n	8001416 <ProcessButton3+0x16>
		 button3_flag = 0;
 800140c:	4b04      	ldr	r3, [pc, #16]	; (8001420 <ProcessButton3+0x20>)
 800140e:	2200      	movs	r2, #0
 8001410:	601a      	str	r2, [r3, #0]
		 return 1;
 8001412:	2301      	movs	r3, #1
 8001414:	e000      	b.n	8001418 <ProcessButton3+0x18>
	 }
	 return 0;
 8001416:	2300      	movs	r3, #0
 }
 8001418:	4618      	mov	r0, r3
 800141a:	46bd      	mov	sp, r7
 800141c:	bc80      	pop	{r7}
 800141e:	4770      	bx	lr
 8001420:	20000080 	.word	0x20000080

08001424 <button_reading>:
		void button_reading(void){
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
			 for(unsigned char i = 0;i < N0_OF_BUTTONS;i++){
 800142a:	2300      	movs	r3, #0
 800142c:	71fb      	strb	r3, [r7, #7]
 800142e:	e08b      	b.n	8001548 <button_reading+0x124>
				 debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8001430:	79fa      	ldrb	r2, [r7, #7]
 8001432:	79fb      	ldrb	r3, [r7, #7]
 8001434:	4949      	ldr	r1, [pc, #292]	; (800155c <button_reading+0x138>)
 8001436:	5c89      	ldrb	r1, [r1, r2]
 8001438:	4a49      	ldr	r2, [pc, #292]	; (8001560 <button_reading+0x13c>)
 800143a:	54d1      	strb	r1, [r2, r3]
				 if(i == 0){
 800143c:	79fb      	ldrb	r3, [r7, #7]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d108      	bne.n	8001454 <button_reading+0x30>
				 debounceButtonBuffer1[0] = HAL_GPIO_ReadPin(Button_GPIO_Port,Button_Pin);
 8001442:	2101      	movs	r1, #1
 8001444:	4847      	ldr	r0, [pc, #284]	; (8001564 <button_reading+0x140>)
 8001446:	f001 f97f 	bl	8002748 <HAL_GPIO_ReadPin>
 800144a:	4603      	mov	r3, r0
 800144c:	461a      	mov	r2, r3
 800144e:	4b43      	ldr	r3, [pc, #268]	; (800155c <button_reading+0x138>)
 8001450:	701a      	strb	r2, [r3, #0]
 8001452:	e016      	b.n	8001482 <button_reading+0x5e>
				 }
				 else if(i == 1){
 8001454:	79fb      	ldrb	r3, [r7, #7]
 8001456:	2b01      	cmp	r3, #1
 8001458:	d108      	bne.n	800146c <button_reading+0x48>
				 debounceButtonBuffer1[1] = HAL_GPIO_ReadPin(Button1_GPIO_Port,Button1_Pin);
 800145a:	2102      	movs	r1, #2
 800145c:	4841      	ldr	r0, [pc, #260]	; (8001564 <button_reading+0x140>)
 800145e:	f001 f973 	bl	8002748 <HAL_GPIO_ReadPin>
 8001462:	4603      	mov	r3, r0
 8001464:	461a      	mov	r2, r3
 8001466:	4b3d      	ldr	r3, [pc, #244]	; (800155c <button_reading+0x138>)
 8001468:	705a      	strb	r2, [r3, #1]
 800146a:	e00a      	b.n	8001482 <button_reading+0x5e>
				 }
				 else if(i == 2){
 800146c:	79fb      	ldrb	r3, [r7, #7]
 800146e:	2b02      	cmp	r3, #2
 8001470:	d107      	bne.n	8001482 <button_reading+0x5e>
				 debounceButtonBuffer1[2] = HAL_GPIO_ReadPin(Button2_GPIO_Port,Button2_Pin);
 8001472:	2104      	movs	r1, #4
 8001474:	483b      	ldr	r0, [pc, #236]	; (8001564 <button_reading+0x140>)
 8001476:	f001 f967 	bl	8002748 <HAL_GPIO_ReadPin>
 800147a:	4603      	mov	r3, r0
 800147c:	461a      	mov	r2, r3
 800147e:	4b37      	ldr	r3, [pc, #220]	; (800155c <button_reading+0x138>)
 8001480:	709a      	strb	r2, [r3, #2]
				 }
				 if(debounceButtonBuffer1[i] == debounceButtonBuffer2[i]){
 8001482:	79fb      	ldrb	r3, [r7, #7]
 8001484:	4a35      	ldr	r2, [pc, #212]	; (800155c <button_reading+0x138>)
 8001486:	5cd2      	ldrb	r2, [r2, r3]
 8001488:	79fb      	ldrb	r3, [r7, #7]
 800148a:	4935      	ldr	r1, [pc, #212]	; (8001560 <button_reading+0x13c>)
 800148c:	5ccb      	ldrb	r3, [r1, r3]
 800148e:	429a      	cmp	r2, r3
 8001490:	d14e      	bne.n	8001530 <button_reading+0x10c>
					 buttonBuffer[i] = debounceButtonBuffer1[i];
 8001492:	79fa      	ldrb	r2, [r7, #7]
 8001494:	79fb      	ldrb	r3, [r7, #7]
 8001496:	4931      	ldr	r1, [pc, #196]	; (800155c <button_reading+0x138>)
 8001498:	5c89      	ldrb	r1, [r1, r2]
 800149a:	4a33      	ldr	r2, [pc, #204]	; (8001568 <button_reading+0x144>)
 800149c:	54d1      	strb	r1, [r2, r3]
					 if(buttonBuffer[i] == BUTTON_IS_PRESSED){
 800149e:	79fb      	ldrb	r3, [r7, #7]
 80014a0:	4a31      	ldr	r2, [pc, #196]	; (8001568 <button_reading+0x144>)
 80014a2:	5cd3      	ldrb	r3, [r2, r3]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d14c      	bne.n	8001542 <button_reading+0x11e>
						 if(i == 0){
 80014a8:	79fb      	ldrb	r3, [r7, #7]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d102      	bne.n	80014b4 <button_reading+0x90>
							 Button1Run();
 80014ae:	f7ff ff5f 	bl	8001370 <Button1Run>
 80014b2:	e00a      	b.n	80014ca <button_reading+0xa6>
						 }
						 else if(i == 1){
 80014b4:	79fb      	ldrb	r3, [r7, #7]
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d102      	bne.n	80014c0 <button_reading+0x9c>
							 Button2Run();
 80014ba:	f7ff ff77 	bl	80013ac <Button2Run>
 80014be:	e004      	b.n	80014ca <button_reading+0xa6>
						 }
						 else if(i == 2){
 80014c0:	79fb      	ldrb	r3, [r7, #7]
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d101      	bne.n	80014ca <button_reading+0xa6>
							 Button3Run();
 80014c6:	f7ff ff8f 	bl	80013e8 <Button3Run>
						 }
						 if(counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING && flagForButtonPress1s[i] == 0){
 80014ca:	79fb      	ldrb	r3, [r7, #7]
 80014cc:	4a27      	ldr	r2, [pc, #156]	; (800156c <button_reading+0x148>)
 80014ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014d2:	2b63      	cmp	r3, #99	; 0x63
 80014d4:	d80e      	bhi.n	80014f4 <button_reading+0xd0>
 80014d6:	79fb      	ldrb	r3, [r7, #7]
 80014d8:	4a25      	ldr	r2, [pc, #148]	; (8001570 <button_reading+0x14c>)
 80014da:	5cd3      	ldrb	r3, [r2, r3]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d109      	bne.n	80014f4 <button_reading+0xd0>
							 counterForButtonPress1s[i]++;
 80014e0:	79fb      	ldrb	r3, [r7, #7]
 80014e2:	4a22      	ldr	r2, [pc, #136]	; (800156c <button_reading+0x148>)
 80014e4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80014e8:	3201      	adds	r2, #1
 80014ea:	b291      	uxth	r1, r2
 80014ec:	4a1f      	ldr	r2, [pc, #124]	; (800156c <button_reading+0x148>)
 80014ee:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80014f2:	e026      	b.n	8001542 <button_reading+0x11e>
						 }
						 else{
							 flagForButtonPress1s[i] = 1;
 80014f4:	79fb      	ldrb	r3, [r7, #7]
 80014f6:	4a1e      	ldr	r2, [pc, #120]	; (8001570 <button_reading+0x14c>)
 80014f8:	2101      	movs	r1, #1
 80014fa:	54d1      	strb	r1, [r2, r3]

							 if(counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING2){
 80014fc:	79fb      	ldrb	r3, [r7, #7]
 80014fe:	4a1b      	ldr	r2, [pc, #108]	; (800156c <button_reading+0x148>)
 8001500:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001504:	2b95      	cmp	r3, #149	; 0x95
 8001506:	d809      	bhi.n	800151c <button_reading+0xf8>
								counterForButtonPress1s[i]++;
 8001508:	79fb      	ldrb	r3, [r7, #7]
 800150a:	4a18      	ldr	r2, [pc, #96]	; (800156c <button_reading+0x148>)
 800150c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001510:	3201      	adds	r2, #1
 8001512:	b291      	uxth	r1, r2
 8001514:	4a15      	ldr	r2, [pc, #84]	; (800156c <button_reading+0x148>)
 8001516:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800151a:	e012      	b.n	8001542 <button_reading+0x11e>
							 }
							 else{
								buttonBuffer[i] = BUTTON_IS_RELEASED;
 800151c:	79fb      	ldrb	r3, [r7, #7]
 800151e:	4a12      	ldr	r2, [pc, #72]	; (8001568 <button_reading+0x144>)
 8001520:	2101      	movs	r1, #1
 8001522:	54d1      	strb	r1, [r2, r3]
								counterForButtonPress1s[i] = 100;
 8001524:	79fb      	ldrb	r3, [r7, #7]
 8001526:	4a11      	ldr	r2, [pc, #68]	; (800156c <button_reading+0x148>)
 8001528:	2164      	movs	r1, #100	; 0x64
 800152a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800152e:	e008      	b.n	8001542 <button_reading+0x11e>

						 }
					 }
				 }
					 else{
						 counterForButtonPress1s[i] = 0;
 8001530:	79fb      	ldrb	r3, [r7, #7]
 8001532:	4a0e      	ldr	r2, [pc, #56]	; (800156c <button_reading+0x148>)
 8001534:	2100      	movs	r1, #0
 8001536:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						 flagForButtonPress1s[i] = 0;
 800153a:	79fb      	ldrb	r3, [r7, #7]
 800153c:	4a0c      	ldr	r2, [pc, #48]	; (8001570 <button_reading+0x14c>)
 800153e:	2100      	movs	r1, #0
 8001540:	54d1      	strb	r1, [r2, r3]
			 for(unsigned char i = 0;i < N0_OF_BUTTONS;i++){
 8001542:	79fb      	ldrb	r3, [r7, #7]
 8001544:	3301      	adds	r3, #1
 8001546:	71fb      	strb	r3, [r7, #7]
 8001548:	79fb      	ldrb	r3, [r7, #7]
 800154a:	2b02      	cmp	r3, #2
 800154c:	f67f af70 	bls.w	8001430 <button_reading+0xc>
					 }
				 }
			}
 8001550:	bf00      	nop
 8001552:	bf00      	nop
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	20000064 	.word	0x20000064
 8001560:	20000068 	.word	0x20000068
 8001564:	40010c00 	.word	0x40010c00
 8001568:	20000060 	.word	0x20000060
 800156c:	20000070 	.word	0x20000070
 8001570:	2000006c 	.word	0x2000006c

08001574 <is_button_pressed>:
unsigned char is_button_pressed(uint8_t index){
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	4603      	mov	r3, r0
 800157c:	71fb      	strb	r3, [r7, #7]
	if(index >= N0_OF_BUTTONS) return 0;
 800157e:	79fb      	ldrb	r3, [r7, #7]
 8001580:	2b02      	cmp	r3, #2
 8001582:	d901      	bls.n	8001588 <is_button_pressed+0x14>
 8001584:	2300      	movs	r3, #0
 8001586:	e007      	b.n	8001598 <is_button_pressed+0x24>
	return (buttonBuffer[index] == BUTTON_IS_PRESSED);
 8001588:	79fb      	ldrb	r3, [r7, #7]
 800158a:	4a06      	ldr	r2, [pc, #24]	; (80015a4 <is_button_pressed+0x30>)
 800158c:	5cd3      	ldrb	r3, [r2, r3]
 800158e:	2b00      	cmp	r3, #0
 8001590:	bf0c      	ite	eq
 8001592:	2301      	moveq	r3, #1
 8001594:	2300      	movne	r3, #0
 8001596:	b2db      	uxtb	r3, r3
}
 8001598:	4618      	mov	r0, r3
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	bc80      	pop	{r7}
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	20000060 	.word	0x20000060

080015a8 <is_button_pressed_1s>:
unsigned char is_button_pressed_1s(unsigned char index){
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	71fb      	strb	r3, [r7, #7]
	if(index >= N0_OF_BUTTONS) return 0xff;
 80015b2:	79fb      	ldrb	r3, [r7, #7]
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d901      	bls.n	80015bc <is_button_pressed_1s+0x14>
 80015b8:	23ff      	movs	r3, #255	; 0xff
 80015ba:	e007      	b.n	80015cc <is_button_pressed_1s+0x24>
	return (flagForButtonPress1s[index] == 1) ;
 80015bc:	79fb      	ldrb	r3, [r7, #7]
 80015be:	4a06      	ldr	r2, [pc, #24]	; (80015d8 <is_button_pressed_1s+0x30>)
 80015c0:	5cd3      	ldrb	r3, [r2, r3]
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	bf0c      	ite	eq
 80015c6:	2301      	moveq	r3, #1
 80015c8:	2300      	movne	r3, #0
 80015ca:	b2db      	uxtb	r3, r3
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bc80      	pop	{r7}
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	2000006c 	.word	0x2000006c

080015dc <Display7Seg>:
 *
 *  Created on: Sep 27, 2024
 *      Author: Genki
 */
#include "main.h"
void Display7Seg(int x){
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
	if(x == 0){
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d128      	bne.n	800163c <Display7Seg+0x60>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80015ea:	2200      	movs	r2, #0
 80015ec:	2180      	movs	r1, #128	; 0x80
 80015ee:	48d2      	ldr	r0, [pc, #840]	; (8001938 <Display7Seg+0x35c>)
 80015f0:	f001 f8c1 	bl	8002776 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80015f4:	2200      	movs	r2, #0
 80015f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015fa:	48cf      	ldr	r0, [pc, #828]	; (8001938 <Display7Seg+0x35c>)
 80015fc:	f001 f8bb 	bl	8002776 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8001600:	2200      	movs	r2, #0
 8001602:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001606:	48cc      	ldr	r0, [pc, #816]	; (8001938 <Display7Seg+0x35c>)
 8001608:	f001 f8b5 	bl	8002776 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 800160c:	2200      	movs	r2, #0
 800160e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001612:	48c9      	ldr	r0, [pc, #804]	; (8001938 <Display7Seg+0x35c>)
 8001614:	f001 f8af 	bl	8002776 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_RESET);
 8001618:	2200      	movs	r2, #0
 800161a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800161e:	48c6      	ldr	r0, [pc, #792]	; (8001938 <Display7Seg+0x35c>)
 8001620:	f001 f8a9 	bl	8002776 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 8001624:	2200      	movs	r2, #0
 8001626:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800162a:	48c3      	ldr	r0, [pc, #780]	; (8001938 <Display7Seg+0x35c>)
 800162c:	f001 f8a3 	bl	8002776 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_SET);
 8001630:	2201      	movs	r2, #1
 8001632:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001636:	48c0      	ldr	r0, [pc, #768]	; (8001938 <Display7Seg+0x35c>)
 8001638:	f001 f89d 	bl	8002776 <HAL_GPIO_WritePin>
	}
	if(x == 1){
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2b01      	cmp	r3, #1
 8001640:	d128      	bne.n	8001694 <Display7Seg+0xb8>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8001642:	2201      	movs	r2, #1
 8001644:	2180      	movs	r1, #128	; 0x80
 8001646:	48bc      	ldr	r0, [pc, #752]	; (8001938 <Display7Seg+0x35c>)
 8001648:	f001 f895 	bl	8002776 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 800164c:	2200      	movs	r2, #0
 800164e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001652:	48b9      	ldr	r0, [pc, #740]	; (8001938 <Display7Seg+0x35c>)
 8001654:	f001 f88f 	bl	8002776 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8001658:	2200      	movs	r2, #0
 800165a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800165e:	48b6      	ldr	r0, [pc, #728]	; (8001938 <Display7Seg+0x35c>)
 8001660:	f001 f889 	bl	8002776 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 8001664:	2201      	movs	r2, #1
 8001666:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800166a:	48b3      	ldr	r0, [pc, #716]	; (8001938 <Display7Seg+0x35c>)
 800166c:	f001 f883 	bl	8002776 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_SET);
 8001670:	2201      	movs	r2, #1
 8001672:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001676:	48b0      	ldr	r0, [pc, #704]	; (8001938 <Display7Seg+0x35c>)
 8001678:	f001 f87d 	bl	8002776 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_SET);
 800167c:	2201      	movs	r2, #1
 800167e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001682:	48ad      	ldr	r0, [pc, #692]	; (8001938 <Display7Seg+0x35c>)
 8001684:	f001 f877 	bl	8002776 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_SET);
 8001688:	2201      	movs	r2, #1
 800168a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800168e:	48aa      	ldr	r0, [pc, #680]	; (8001938 <Display7Seg+0x35c>)
 8001690:	f001 f871 	bl	8002776 <HAL_GPIO_WritePin>
		}
	if(x == 2){
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2b02      	cmp	r3, #2
 8001698:	d128      	bne.n	80016ec <Display7Seg+0x110>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800169a:	2200      	movs	r2, #0
 800169c:	2180      	movs	r1, #128	; 0x80
 800169e:	48a6      	ldr	r0, [pc, #664]	; (8001938 <Display7Seg+0x35c>)
 80016a0:	f001 f869 	bl	8002776 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80016a4:	2200      	movs	r2, #0
 80016a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016aa:	48a3      	ldr	r0, [pc, #652]	; (8001938 <Display7Seg+0x35c>)
 80016ac:	f001 f863 	bl	8002776 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 80016b0:	2201      	movs	r2, #1
 80016b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016b6:	48a0      	ldr	r0, [pc, #640]	; (8001938 <Display7Seg+0x35c>)
 80016b8:	f001 f85d 	bl	8002776 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 80016bc:	2200      	movs	r2, #0
 80016be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016c2:	489d      	ldr	r0, [pc, #628]	; (8001938 <Display7Seg+0x35c>)
 80016c4:	f001 f857 	bl	8002776 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_RESET);
 80016c8:	2200      	movs	r2, #0
 80016ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016ce:	489a      	ldr	r0, [pc, #616]	; (8001938 <Display7Seg+0x35c>)
 80016d0:	f001 f851 	bl	8002776 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_SET);
 80016d4:	2201      	movs	r2, #1
 80016d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016da:	4897      	ldr	r0, [pc, #604]	; (8001938 <Display7Seg+0x35c>)
 80016dc:	f001 f84b 	bl	8002776 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_RESET);
 80016e0:	2200      	movs	r2, #0
 80016e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016e6:	4894      	ldr	r0, [pc, #592]	; (8001938 <Display7Seg+0x35c>)
 80016e8:	f001 f845 	bl	8002776 <HAL_GPIO_WritePin>
		}
	if(x == 3){
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2b03      	cmp	r3, #3
 80016f0:	d128      	bne.n	8001744 <Display7Seg+0x168>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80016f2:	2200      	movs	r2, #0
 80016f4:	2180      	movs	r1, #128	; 0x80
 80016f6:	4890      	ldr	r0, [pc, #576]	; (8001938 <Display7Seg+0x35c>)
 80016f8:	f001 f83d 	bl	8002776 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80016fc:	2200      	movs	r2, #0
 80016fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001702:	488d      	ldr	r0, [pc, #564]	; (8001938 <Display7Seg+0x35c>)
 8001704:	f001 f837 	bl	8002776 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8001708:	2200      	movs	r2, #0
 800170a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800170e:	488a      	ldr	r0, [pc, #552]	; (8001938 <Display7Seg+0x35c>)
 8001710:	f001 f831 	bl	8002776 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8001714:	2200      	movs	r2, #0
 8001716:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800171a:	4887      	ldr	r0, [pc, #540]	; (8001938 <Display7Seg+0x35c>)
 800171c:	f001 f82b 	bl	8002776 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_SET);
 8001720:	2201      	movs	r2, #1
 8001722:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001726:	4884      	ldr	r0, [pc, #528]	; (8001938 <Display7Seg+0x35c>)
 8001728:	f001 f825 	bl	8002776 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_SET);
 800172c:	2201      	movs	r2, #1
 800172e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001732:	4881      	ldr	r0, [pc, #516]	; (8001938 <Display7Seg+0x35c>)
 8001734:	f001 f81f 	bl	8002776 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_RESET);
 8001738:	2200      	movs	r2, #0
 800173a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800173e:	487e      	ldr	r0, [pc, #504]	; (8001938 <Display7Seg+0x35c>)
 8001740:	f001 f819 	bl	8002776 <HAL_GPIO_WritePin>
		}
	if(x == 4){
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2b04      	cmp	r3, #4
 8001748:	d128      	bne.n	800179c <Display7Seg+0x1c0>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 800174a:	2201      	movs	r2, #1
 800174c:	2180      	movs	r1, #128	; 0x80
 800174e:	487a      	ldr	r0, [pc, #488]	; (8001938 <Display7Seg+0x35c>)
 8001750:	f001 f811 	bl	8002776 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8001754:	2200      	movs	r2, #0
 8001756:	f44f 7180 	mov.w	r1, #256	; 0x100
 800175a:	4877      	ldr	r0, [pc, #476]	; (8001938 <Display7Seg+0x35c>)
 800175c:	f001 f80b 	bl	8002776 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8001760:	2200      	movs	r2, #0
 8001762:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001766:	4874      	ldr	r0, [pc, #464]	; (8001938 <Display7Seg+0x35c>)
 8001768:	f001 f805 	bl	8002776 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 800176c:	2201      	movs	r2, #1
 800176e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001772:	4871      	ldr	r0, [pc, #452]	; (8001938 <Display7Seg+0x35c>)
 8001774:	f000 ffff 	bl	8002776 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_SET);
 8001778:	2201      	movs	r2, #1
 800177a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800177e:	486e      	ldr	r0, [pc, #440]	; (8001938 <Display7Seg+0x35c>)
 8001780:	f000 fff9 	bl	8002776 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 8001784:	2200      	movs	r2, #0
 8001786:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800178a:	486b      	ldr	r0, [pc, #428]	; (8001938 <Display7Seg+0x35c>)
 800178c:	f000 fff3 	bl	8002776 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_RESET);
 8001790:	2200      	movs	r2, #0
 8001792:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001796:	4868      	ldr	r0, [pc, #416]	; (8001938 <Display7Seg+0x35c>)
 8001798:	f000 ffed 	bl	8002776 <HAL_GPIO_WritePin>
		}
	if(x == 5){
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2b05      	cmp	r3, #5
 80017a0:	d128      	bne.n	80017f4 <Display7Seg+0x218>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80017a2:	2200      	movs	r2, #0
 80017a4:	2180      	movs	r1, #128	; 0x80
 80017a6:	4864      	ldr	r0, [pc, #400]	; (8001938 <Display7Seg+0x35c>)
 80017a8:	f000 ffe5 	bl	8002776 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80017ac:	2201      	movs	r2, #1
 80017ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017b2:	4861      	ldr	r0, [pc, #388]	; (8001938 <Display7Seg+0x35c>)
 80017b4:	f000 ffdf 	bl	8002776 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 80017b8:	2200      	movs	r2, #0
 80017ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017be:	485e      	ldr	r0, [pc, #376]	; (8001938 <Display7Seg+0x35c>)
 80017c0:	f000 ffd9 	bl	8002776 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 80017c4:	2200      	movs	r2, #0
 80017c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017ca:	485b      	ldr	r0, [pc, #364]	; (8001938 <Display7Seg+0x35c>)
 80017cc:	f000 ffd3 	bl	8002776 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_SET);
 80017d0:	2201      	movs	r2, #1
 80017d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017d6:	4858      	ldr	r0, [pc, #352]	; (8001938 <Display7Seg+0x35c>)
 80017d8:	f000 ffcd 	bl	8002776 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 80017dc:	2200      	movs	r2, #0
 80017de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017e2:	4855      	ldr	r0, [pc, #340]	; (8001938 <Display7Seg+0x35c>)
 80017e4:	f000 ffc7 	bl	8002776 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_RESET);
 80017e8:	2200      	movs	r2, #0
 80017ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017ee:	4852      	ldr	r0, [pc, #328]	; (8001938 <Display7Seg+0x35c>)
 80017f0:	f000 ffc1 	bl	8002776 <HAL_GPIO_WritePin>
		}
	if(x == 6){
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2b06      	cmp	r3, #6
 80017f8:	d128      	bne.n	800184c <Display7Seg+0x270>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80017fa:	2200      	movs	r2, #0
 80017fc:	2180      	movs	r1, #128	; 0x80
 80017fe:	484e      	ldr	r0, [pc, #312]	; (8001938 <Display7Seg+0x35c>)
 8001800:	f000 ffb9 	bl	8002776 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8001804:	2201      	movs	r2, #1
 8001806:	f44f 7180 	mov.w	r1, #256	; 0x100
 800180a:	484b      	ldr	r0, [pc, #300]	; (8001938 <Display7Seg+0x35c>)
 800180c:	f000 ffb3 	bl	8002776 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8001810:	2200      	movs	r2, #0
 8001812:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001816:	4848      	ldr	r0, [pc, #288]	; (8001938 <Display7Seg+0x35c>)
 8001818:	f000 ffad 	bl	8002776 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 800181c:	2200      	movs	r2, #0
 800181e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001822:	4845      	ldr	r0, [pc, #276]	; (8001938 <Display7Seg+0x35c>)
 8001824:	f000 ffa7 	bl	8002776 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_RESET);
 8001828:	2200      	movs	r2, #0
 800182a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800182e:	4842      	ldr	r0, [pc, #264]	; (8001938 <Display7Seg+0x35c>)
 8001830:	f000 ffa1 	bl	8002776 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 8001834:	2200      	movs	r2, #0
 8001836:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800183a:	483f      	ldr	r0, [pc, #252]	; (8001938 <Display7Seg+0x35c>)
 800183c:	f000 ff9b 	bl	8002776 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_RESET);
 8001840:	2200      	movs	r2, #0
 8001842:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001846:	483c      	ldr	r0, [pc, #240]	; (8001938 <Display7Seg+0x35c>)
 8001848:	f000 ff95 	bl	8002776 <HAL_GPIO_WritePin>
		}
	if(x == 7){
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2b07      	cmp	r3, #7
 8001850:	d128      	bne.n	80018a4 <Display7Seg+0x2c8>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001852:	2200      	movs	r2, #0
 8001854:	2180      	movs	r1, #128	; 0x80
 8001856:	4838      	ldr	r0, [pc, #224]	; (8001938 <Display7Seg+0x35c>)
 8001858:	f000 ff8d 	bl	8002776 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 800185c:	2200      	movs	r2, #0
 800185e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001862:	4835      	ldr	r0, [pc, #212]	; (8001938 <Display7Seg+0x35c>)
 8001864:	f000 ff87 	bl	8002776 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8001868:	2200      	movs	r2, #0
 800186a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800186e:	4832      	ldr	r0, [pc, #200]	; (8001938 <Display7Seg+0x35c>)
 8001870:	f000 ff81 	bl	8002776 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 8001874:	2201      	movs	r2, #1
 8001876:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800187a:	482f      	ldr	r0, [pc, #188]	; (8001938 <Display7Seg+0x35c>)
 800187c:	f000 ff7b 	bl	8002776 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_SET);
 8001880:	2201      	movs	r2, #1
 8001882:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001886:	482c      	ldr	r0, [pc, #176]	; (8001938 <Display7Seg+0x35c>)
 8001888:	f000 ff75 	bl	8002776 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_SET);
 800188c:	2201      	movs	r2, #1
 800188e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001892:	4829      	ldr	r0, [pc, #164]	; (8001938 <Display7Seg+0x35c>)
 8001894:	f000 ff6f 	bl	8002776 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_SET);
 8001898:	2201      	movs	r2, #1
 800189a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800189e:	4826      	ldr	r0, [pc, #152]	; (8001938 <Display7Seg+0x35c>)
 80018a0:	f000 ff69 	bl	8002776 <HAL_GPIO_WritePin>
		}
	if(x == 8){
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2b08      	cmp	r3, #8
 80018a8:	d128      	bne.n	80018fc <Display7Seg+0x320>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80018aa:	2200      	movs	r2, #0
 80018ac:	2180      	movs	r1, #128	; 0x80
 80018ae:	4822      	ldr	r0, [pc, #136]	; (8001938 <Display7Seg+0x35c>)
 80018b0:	f000 ff61 	bl	8002776 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80018b4:	2200      	movs	r2, #0
 80018b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018ba:	481f      	ldr	r0, [pc, #124]	; (8001938 <Display7Seg+0x35c>)
 80018bc:	f000 ff5b 	bl	8002776 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 80018c0:	2200      	movs	r2, #0
 80018c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018c6:	481c      	ldr	r0, [pc, #112]	; (8001938 <Display7Seg+0x35c>)
 80018c8:	f000 ff55 	bl	8002776 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 80018cc:	2200      	movs	r2, #0
 80018ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018d2:	4819      	ldr	r0, [pc, #100]	; (8001938 <Display7Seg+0x35c>)
 80018d4:	f000 ff4f 	bl	8002776 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_RESET);
 80018d8:	2200      	movs	r2, #0
 80018da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018de:	4816      	ldr	r0, [pc, #88]	; (8001938 <Display7Seg+0x35c>)
 80018e0:	f000 ff49 	bl	8002776 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 80018e4:	2200      	movs	r2, #0
 80018e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018ea:	4813      	ldr	r0, [pc, #76]	; (8001938 <Display7Seg+0x35c>)
 80018ec:	f000 ff43 	bl	8002776 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_RESET);
 80018f0:	2200      	movs	r2, #0
 80018f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018f6:	4810      	ldr	r0, [pc, #64]	; (8001938 <Display7Seg+0x35c>)
 80018f8:	f000 ff3d 	bl	8002776 <HAL_GPIO_WritePin>
			}
	if(x == 9){
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2b09      	cmp	r3, #9
 8001900:	d12b      	bne.n	800195a <Display7Seg+0x37e>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001902:	2200      	movs	r2, #0
 8001904:	2180      	movs	r1, #128	; 0x80
 8001906:	480c      	ldr	r0, [pc, #48]	; (8001938 <Display7Seg+0x35c>)
 8001908:	f000 ff35 	bl	8002776 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 800190c:	2200      	movs	r2, #0
 800190e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001912:	4809      	ldr	r0, [pc, #36]	; (8001938 <Display7Seg+0x35c>)
 8001914:	f000 ff2f 	bl	8002776 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8001918:	2200      	movs	r2, #0
 800191a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800191e:	4806      	ldr	r0, [pc, #24]	; (8001938 <Display7Seg+0x35c>)
 8001920:	f000 ff29 	bl	8002776 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8001924:	2200      	movs	r2, #0
 8001926:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800192a:	4803      	ldr	r0, [pc, #12]	; (8001938 <Display7Seg+0x35c>)
 800192c:	f000 ff23 	bl	8002776 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_SET);
 8001930:	2201      	movs	r2, #1
 8001932:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001936:	e001      	b.n	800193c <Display7Seg+0x360>
 8001938:	40010800 	.word	0x40010800
 800193c:	4809      	ldr	r0, [pc, #36]	; (8001964 <Display7Seg+0x388>)
 800193e:	f000 ff1a 	bl	8002776 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 8001942:	2200      	movs	r2, #0
 8001944:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001948:	4806      	ldr	r0, [pc, #24]	; (8001964 <Display7Seg+0x388>)
 800194a:	f000 ff14 	bl	8002776 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_RESET);
 800194e:	2200      	movs	r2, #0
 8001950:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001954:	4803      	ldr	r0, [pc, #12]	; (8001964 <Display7Seg+0x388>)
 8001956:	f000 ff0e 	bl	8002776 <HAL_GPIO_WritePin>
	}
}
 800195a:	bf00      	nop
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	40010800 	.word	0x40010800

08001968 <Display>:
void Display(int x){
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2b03      	cmp	r3, #3
 8001974:	d86e      	bhi.n	8001a54 <Display+0xec>
 8001976:	a201      	add	r2, pc, #4	; (adr r2, 800197c <Display+0x14>)
 8001978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800197c:	0800198d 	.word	0x0800198d
 8001980:	080019bf 	.word	0x080019bf
 8001984:	080019f1 	.word	0x080019f1
 8001988:	08001a23 	.word	0x08001a23
	switch(x){
	case 0:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 800198c:	2200      	movs	r2, #0
 800198e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001992:	4833      	ldr	r0, [pc, #204]	; (8001a60 <Display+0xf8>)
 8001994:	f000 feef 	bl	8002776 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8001998:	2201      	movs	r2, #1
 800199a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800199e:	4830      	ldr	r0, [pc, #192]	; (8001a60 <Display+0xf8>)
 80019a0:	f000 fee9 	bl	8002776 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 80019a4:	2201      	movs	r2, #1
 80019a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019aa:	482d      	ldr	r0, [pc, #180]	; (8001a60 <Display+0xf8>)
 80019ac:	f000 fee3 	bl	8002776 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 80019b0:	2201      	movs	r2, #1
 80019b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019b6:	482a      	ldr	r0, [pc, #168]	; (8001a60 <Display+0xf8>)
 80019b8:	f000 fedd 	bl	8002776 <HAL_GPIO_WritePin>
		break;
 80019bc:	e04b      	b.n	8001a56 <Display+0xee>
	case 1:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 80019be:	2201      	movs	r2, #1
 80019c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019c4:	4826      	ldr	r0, [pc, #152]	; (8001a60 <Display+0xf8>)
 80019c6:	f000 fed6 	bl	8002776 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 80019ca:	2200      	movs	r2, #0
 80019cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019d0:	4823      	ldr	r0, [pc, #140]	; (8001a60 <Display+0xf8>)
 80019d2:	f000 fed0 	bl	8002776 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 80019d6:	2201      	movs	r2, #1
 80019d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019dc:	4820      	ldr	r0, [pc, #128]	; (8001a60 <Display+0xf8>)
 80019de:	f000 feca 	bl	8002776 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 80019e2:	2201      	movs	r2, #1
 80019e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019e8:	481d      	ldr	r0, [pc, #116]	; (8001a60 <Display+0xf8>)
 80019ea:	f000 fec4 	bl	8002776 <HAL_GPIO_WritePin>
		break;
 80019ee:	e032      	b.n	8001a56 <Display+0xee>
	case 2:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 80019f0:	2201      	movs	r2, #1
 80019f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019f6:	481a      	ldr	r0, [pc, #104]	; (8001a60 <Display+0xf8>)
 80019f8:	f000 febd 	bl	8002776 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 80019fc:	2201      	movs	r2, #1
 80019fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a02:	4817      	ldr	r0, [pc, #92]	; (8001a60 <Display+0xf8>)
 8001a04:	f000 feb7 	bl	8002776 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 8001a08:	2200      	movs	r2, #0
 8001a0a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a0e:	4814      	ldr	r0, [pc, #80]	; (8001a60 <Display+0xf8>)
 8001a10:	f000 feb1 	bl	8002776 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8001a14:	2201      	movs	r2, #1
 8001a16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a1a:	4811      	ldr	r0, [pc, #68]	; (8001a60 <Display+0xf8>)
 8001a1c:	f000 feab 	bl	8002776 <HAL_GPIO_WritePin>
		break;
 8001a20:	e019      	b.n	8001a56 <Display+0xee>
	case 3:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8001a22:	2201      	movs	r2, #1
 8001a24:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a28:	480d      	ldr	r0, [pc, #52]	; (8001a60 <Display+0xf8>)
 8001a2a:	f000 fea4 	bl	8002776 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8001a2e:	2201      	movs	r2, #1
 8001a30:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a34:	480a      	ldr	r0, [pc, #40]	; (8001a60 <Display+0xf8>)
 8001a36:	f000 fe9e 	bl	8002776 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a40:	4807      	ldr	r0, [pc, #28]	; (8001a60 <Display+0xf8>)
 8001a42:	f000 fe98 	bl	8002776 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 8001a46:	2200      	movs	r2, #0
 8001a48:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a4c:	4804      	ldr	r0, [pc, #16]	; (8001a60 <Display+0xf8>)
 8001a4e:	f000 fe92 	bl	8002776 <HAL_GPIO_WritePin>

		break;
 8001a52:	e000      	b.n	8001a56 <Display+0xee>
	default:
		break;
 8001a54:	bf00      	nop
	}
}
 8001a56:	bf00      	nop
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	40010c00 	.word	0x40010c00

08001a64 <DisplayREDX>:
void DisplayREDX(void){
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_X_GPIO_Port, LED_RED_X_Pin, SET);
 8001a68:	2201      	movs	r2, #1
 8001a6a:	2108      	movs	r1, #8
 8001a6c:	4807      	ldr	r0, [pc, #28]	; (8001a8c <DisplayREDX+0x28>)
 8001a6e:	f000 fe82 	bl	8002776 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_X_GPIO_Port, LED_GREEN_X_Pin, RESET);
 8001a72:	2200      	movs	r2, #0
 8001a74:	2120      	movs	r1, #32
 8001a76:	4805      	ldr	r0, [pc, #20]	; (8001a8c <DisplayREDX+0x28>)
 8001a78:	f000 fe7d 	bl	8002776 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_X_GPIO_Port, LED_YELLOW_X_Pin, RESET);
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	2110      	movs	r1, #16
 8001a80:	4802      	ldr	r0, [pc, #8]	; (8001a8c <DisplayREDX+0x28>)
 8001a82:	f000 fe78 	bl	8002776 <HAL_GPIO_WritePin>
}
 8001a86:	bf00      	nop
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	40010c00 	.word	0x40010c00

08001a90 <DisplayYELLOWX>:
void DisplayYELLOWX(void){
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_X_GPIO_Port, LED_RED_X_Pin, RESET);
 8001a94:	2200      	movs	r2, #0
 8001a96:	2108      	movs	r1, #8
 8001a98:	4807      	ldr	r0, [pc, #28]	; (8001ab8 <DisplayYELLOWX+0x28>)
 8001a9a:	f000 fe6c 	bl	8002776 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_X_GPIO_Port, LED_GREEN_X_Pin, RESET);
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	2120      	movs	r1, #32
 8001aa2:	4805      	ldr	r0, [pc, #20]	; (8001ab8 <DisplayYELLOWX+0x28>)
 8001aa4:	f000 fe67 	bl	8002776 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_X_GPIO_Port, LED_YELLOW_X_Pin, SET);
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	2110      	movs	r1, #16
 8001aac:	4802      	ldr	r0, [pc, #8]	; (8001ab8 <DisplayYELLOWX+0x28>)
 8001aae:	f000 fe62 	bl	8002776 <HAL_GPIO_WritePin>
}
 8001ab2:	bf00      	nop
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	40010c00 	.word	0x40010c00

08001abc <DisplayGREENX>:
void DisplayGREENX(void){
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_X_GPIO_Port, LED_RED_X_Pin, RESET);
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	2108      	movs	r1, #8
 8001ac4:	4807      	ldr	r0, [pc, #28]	; (8001ae4 <DisplayGREENX+0x28>)
 8001ac6:	f000 fe56 	bl	8002776 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_X_GPIO_Port, LED_GREEN_X_Pin, SET);
 8001aca:	2201      	movs	r2, #1
 8001acc:	2120      	movs	r1, #32
 8001ace:	4805      	ldr	r0, [pc, #20]	; (8001ae4 <DisplayGREENX+0x28>)
 8001ad0:	f000 fe51 	bl	8002776 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_X_GPIO_Port, LED_YELLOW_X_Pin, RESET);
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	2110      	movs	r1, #16
 8001ad8:	4802      	ldr	r0, [pc, #8]	; (8001ae4 <DisplayGREENX+0x28>)
 8001ada:	f000 fe4c 	bl	8002776 <HAL_GPIO_WritePin>
}
 8001ade:	bf00      	nop
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	40010c00 	.word	0x40010c00

08001ae8 <DisplayREDY>:
void DisplayREDY(void){
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_Y_GPIO_Port, LED_RED_Y_Pin, SET);
 8001aec:	2201      	movs	r2, #1
 8001aee:	2140      	movs	r1, #64	; 0x40
 8001af0:	4807      	ldr	r0, [pc, #28]	; (8001b10 <DisplayREDY+0x28>)
 8001af2:	f000 fe40 	bl	8002776 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_Y_GPIO_Port, LED_GREEN_Y_Pin, RESET);
 8001af6:	2200      	movs	r2, #0
 8001af8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001afc:	4804      	ldr	r0, [pc, #16]	; (8001b10 <DisplayREDY+0x28>)
 8001afe:	f000 fe3a 	bl	8002776 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_Y_GPIO_Port, LED_YELLOW_Y_Pin, RESET);
 8001b02:	2200      	movs	r2, #0
 8001b04:	2180      	movs	r1, #128	; 0x80
 8001b06:	4802      	ldr	r0, [pc, #8]	; (8001b10 <DisplayREDY+0x28>)
 8001b08:	f000 fe35 	bl	8002776 <HAL_GPIO_WritePin>
}
 8001b0c:	bf00      	nop
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	40010c00 	.word	0x40010c00

08001b14 <DisplayYELLOWY>:
void DisplayYELLOWY(void){
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_Y_GPIO_Port, LED_RED_Y_Pin, RESET);
 8001b18:	2200      	movs	r2, #0
 8001b1a:	2140      	movs	r1, #64	; 0x40
 8001b1c:	4807      	ldr	r0, [pc, #28]	; (8001b3c <DisplayYELLOWY+0x28>)
 8001b1e:	f000 fe2a 	bl	8002776 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_Y_GPIO_Port, LED_GREEN_Y_Pin, RESET);
 8001b22:	2200      	movs	r2, #0
 8001b24:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b28:	4804      	ldr	r0, [pc, #16]	; (8001b3c <DisplayYELLOWY+0x28>)
 8001b2a:	f000 fe24 	bl	8002776 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_Y_GPIO_Port, LED_YELLOW_Y_Pin, SET);
 8001b2e:	2201      	movs	r2, #1
 8001b30:	2180      	movs	r1, #128	; 0x80
 8001b32:	4802      	ldr	r0, [pc, #8]	; (8001b3c <DisplayYELLOWY+0x28>)
 8001b34:	f000 fe1f 	bl	8002776 <HAL_GPIO_WritePin>
}
 8001b38:	bf00      	nop
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	40010c00 	.word	0x40010c00

08001b40 <DisplayGREENY>:
void DisplayGREENY(void){
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_Y_GPIO_Port, LED_RED_Y_Pin, RESET);
 8001b44:	2200      	movs	r2, #0
 8001b46:	2140      	movs	r1, #64	; 0x40
 8001b48:	4807      	ldr	r0, [pc, #28]	; (8001b68 <DisplayGREENY+0x28>)
 8001b4a:	f000 fe14 	bl	8002776 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_Y_GPIO_Port, LED_GREEN_Y_Pin, SET);
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b54:	4804      	ldr	r0, [pc, #16]	; (8001b68 <DisplayGREENY+0x28>)
 8001b56:	f000 fe0e 	bl	8002776 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_Y_GPIO_Port, LED_YELLOW_Y_Pin, RESET);
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	2180      	movs	r1, #128	; 0x80
 8001b5e:	4802      	ldr	r0, [pc, #8]	; (8001b68 <DisplayGREENY+0x28>)
 8001b60:	f000 fe09 	bl	8002776 <HAL_GPIO_WritePin>
}
 8001b64:	bf00      	nop
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	40010c00 	.word	0x40010c00

08001b6c <DisplayMAN_REDX>:
void DisplayMAN_REDX(void){
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_RED_X_GPIO_Port, LED_RED_X_Pin);
 8001b70:	2108      	movs	r1, #8
 8001b72:	4802      	ldr	r0, [pc, #8]	; (8001b7c <DisplayMAN_REDX+0x10>)
 8001b74:	f000 fe17 	bl	80027a6 <HAL_GPIO_TogglePin>
}
 8001b78:	bf00      	nop
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	40010c00 	.word	0x40010c00

08001b80 <DisplayMAN_REDY>:
void DisplayMAN_REDY(void){
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_RED_Y_GPIO_Port, LED_RED_Y_Pin);
 8001b84:	2140      	movs	r1, #64	; 0x40
 8001b86:	4802      	ldr	r0, [pc, #8]	; (8001b90 <DisplayMAN_REDY+0x10>)
 8001b88:	f000 fe0d 	bl	80027a6 <HAL_GPIO_TogglePin>
}
 8001b8c:	bf00      	nop
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	40010c00 	.word	0x40010c00

08001b94 <DisplayMAN_GREENX>:
void DisplayMAN_GREENX(void){
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_GREEN_X_GPIO_Port, LED_GREEN_X_Pin);
 8001b98:	2120      	movs	r1, #32
 8001b9a:	4802      	ldr	r0, [pc, #8]	; (8001ba4 <DisplayMAN_GREENX+0x10>)
 8001b9c:	f000 fe03 	bl	80027a6 <HAL_GPIO_TogglePin>
}
 8001ba0:	bf00      	nop
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	40010c00 	.word	0x40010c00

08001ba8 <DisplayMAN_GREENY>:
void DisplayMAN_GREENY(void){
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_GREEN_Y_GPIO_Port, LED_GREEN_Y_Pin);
 8001bac:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bb0:	4802      	ldr	r0, [pc, #8]	; (8001bbc <DisplayMAN_GREENY+0x14>)
 8001bb2:	f000 fdf8 	bl	80027a6 <HAL_GPIO_TogglePin>
}
 8001bb6:	bf00      	nop
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	40010c00 	.word	0x40010c00

08001bc0 <DisplayMAN_YELLOWX>:
void DisplayMAN_YELLOWX(void){
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_YELLOW_X_GPIO_Port, LED_YELLOW_X_Pin);
 8001bc4:	2110      	movs	r1, #16
 8001bc6:	4802      	ldr	r0, [pc, #8]	; (8001bd0 <DisplayMAN_YELLOWX+0x10>)
 8001bc8:	f000 fded 	bl	80027a6 <HAL_GPIO_TogglePin>
}
 8001bcc:	bf00      	nop
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	40010c00 	.word	0x40010c00

08001bd4 <DisplayMAN_YELLOWY>:
void DisplayMAN_YELLOWY(void){
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_YELLOW_Y_GPIO_Port, LED_YELLOW_Y_Pin);
 8001bd8:	2180      	movs	r1, #128	; 0x80
 8001bda:	4802      	ldr	r0, [pc, #8]	; (8001be4 <DisplayMAN_YELLOWY+0x10>)
 8001bdc:	f000 fde3 	bl	80027a6 <HAL_GPIO_TogglePin>
}
 8001be0:	bf00      	nop
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	40010c00 	.word	0x40010c00

08001be8 <InitLED>:
void InitLED(void){
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_X_GPIO_Port, LED_RED_X_Pin, RESET);
 8001bec:	2200      	movs	r2, #0
 8001bee:	2108      	movs	r1, #8
 8001bf0:	480f      	ldr	r0, [pc, #60]	; (8001c30 <InitLED+0x48>)
 8001bf2:	f000 fdc0 	bl	8002776 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_X_GPIO_Port, LED_GREEN_X_Pin, RESET);
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	2120      	movs	r1, #32
 8001bfa:	480d      	ldr	r0, [pc, #52]	; (8001c30 <InitLED+0x48>)
 8001bfc:	f000 fdbb 	bl	8002776 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_X_GPIO_Port, LED_YELLOW_X_Pin, RESET);
 8001c00:	2200      	movs	r2, #0
 8001c02:	2110      	movs	r1, #16
 8001c04:	480a      	ldr	r0, [pc, #40]	; (8001c30 <InitLED+0x48>)
 8001c06:	f000 fdb6 	bl	8002776 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_Y_GPIO_Port, LED_RED_Y_Pin, RESET);
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	2140      	movs	r1, #64	; 0x40
 8001c0e:	4808      	ldr	r0, [pc, #32]	; (8001c30 <InitLED+0x48>)
 8001c10:	f000 fdb1 	bl	8002776 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_Y_GPIO_Port, LED_GREEN_Y_Pin, RESET);
 8001c14:	2200      	movs	r2, #0
 8001c16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c1a:	4805      	ldr	r0, [pc, #20]	; (8001c30 <InitLED+0x48>)
 8001c1c:	f000 fdab 	bl	8002776 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_Y_GPIO_Port, LED_YELLOW_Y_Pin, RESET);
 8001c20:	2200      	movs	r2, #0
 8001c22:	2180      	movs	r1, #128	; 0x80
 8001c24:	4802      	ldr	r0, [pc, #8]	; (8001c30 <InitLED+0x48>)
 8001c26:	f000 fda6 	bl	8002776 <HAL_GPIO_WritePin>
}
 8001c2a:	bf00      	nop
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	40010c00 	.word	0x40010c00

08001c34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c38:	f000 fa9c 	bl	8002174 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c3c:	f000 f896 	bl	8001d6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c40:	f000 f91c 	bl	8001e7c <MX_GPIO_Init>
  MX_TIM2_Init();
 8001c44:	f000 f8ce 	bl	8001de4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001c48:	4840      	ldr	r0, [pc, #256]	; (8001d4c <main+0x118>)
 8001c4a:	f001 f9f1 	bl	8003030 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8001c4e:	2201      	movs	r2, #1
 8001c50:	2180      	movs	r1, #128	; 0x80
 8001c52:	483f      	ldr	r0, [pc, #252]	; (8001d50 <main+0x11c>)
 8001c54:	f000 fd8f 	bl	8002776 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8001c58:	2201      	movs	r2, #1
 8001c5a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c5e:	483c      	ldr	r0, [pc, #240]	; (8001d50 <main+0x11c>)
 8001c60:	f000 fd89 	bl	8002776 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 8001c64:	2201      	movs	r2, #1
 8001c66:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c6a:	4839      	ldr	r0, [pc, #228]	; (8001d50 <main+0x11c>)
 8001c6c:	f000 fd83 	bl	8002776 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 8001c70:	2201      	movs	r2, #1
 8001c72:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c76:	4836      	ldr	r0, [pc, #216]	; (8001d50 <main+0x11c>)
 8001c78:	f000 fd7d 	bl	8002776 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_SET);
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c82:	4833      	ldr	r0, [pc, #204]	; (8001d50 <main+0x11c>)
 8001c84:	f000 fd77 	bl	8002776 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_SET);
 8001c88:	2201      	movs	r2, #1
 8001c8a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c8e:	4830      	ldr	r0, [pc, #192]	; (8001d50 <main+0x11c>)
 8001c90:	f000 fd71 	bl	8002776 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_SET);
 8001c94:	2201      	movs	r2, #1
 8001c96:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c9a:	482d      	ldr	r0, [pc, #180]	; (8001d50 <main+0x11c>)
 8001c9c:	f000 fd6b 	bl	8002776 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ca6:	482b      	ldr	r0, [pc, #172]	; (8001d54 <main+0x120>)
 8001ca8:	f000 fd65 	bl	8002776 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8001cac:	2201      	movs	r2, #1
 8001cae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001cb2:	4828      	ldr	r0, [pc, #160]	; (8001d54 <main+0x120>)
 8001cb4:	f000 fd5f 	bl	8002776 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8001cb8:	2201      	movs	r2, #1
 8001cba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001cbe:	4825      	ldr	r0, [pc, #148]	; (8001d54 <main+0x120>)
 8001cc0:	f000 fd59 	bl	8002776 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cca:	4822      	ldr	r0, [pc, #136]	; (8001d54 <main+0x120>)
 8001ccc:	f000 fd53 	bl	8002776 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, GPIO_PIN_SET);
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cd6:	481f      	ldr	r0, [pc, #124]	; (8001d54 <main+0x120>)
 8001cd8:	f000 fd4d 	bl	8002776 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN5_GPIO_Port, EN5_Pin, GPIO_PIN_SET);
 8001cdc:	2201      	movs	r2, #1
 8001cde:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ce2:	481c      	ldr	r0, [pc, #112]	; (8001d54 <main+0x120>)
 8001ce4:	f000 fd47 	bl	8002776 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN6_GPIO_Port, EN6_Pin, GPIO_PIN_SET);
 8001ce8:	2201      	movs	r2, #1
 8001cea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001cee:	4819      	ldr	r0, [pc, #100]	; (8001d54 <main+0x120>)
 8001cf0:	f000 fd41 	bl	8002776 <HAL_GPIO_WritePin>
	statusx = INIT;
 8001cf4:	4b18      	ldr	r3, [pc, #96]	; (8001d58 <main+0x124>)
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	601a      	str	r2, [r3, #0]
	statusy = INIT;
 8001cfa:	4b18      	ldr	r3, [pc, #96]	; (8001d5c <main+0x128>)
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	601a      	str	r2, [r3, #0]
	counterMode = 1;
 8001d00:	4b17      	ldr	r3, [pc, #92]	; (8001d60 <main+0x12c>)
 8001d02:	2201      	movs	r2, #1
 8001d04:	601a      	str	r2, [r3, #0]
	counterTimeSet = 0;
 8001d06:	4b17      	ldr	r3, [pc, #92]	; (8001d64 <main+0x130>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]
	DisplayCounter = 0;
 8001d0c:	4b16      	ldr	r3, [pc, #88]	; (8001d68 <main+0x134>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	601a      	str	r2, [r3, #0]
	setTimer(6, 10);
 8001d12:	210a      	movs	r1, #10
 8001d14:	2006      	movs	r0, #6
 8001d16:	f000 f9a7 	bl	8002068 <setTimer>
	setTimer(4, 500);
 8001d1a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001d1e:	2004      	movs	r0, #4
 8001d20:	f000 f9a2 	bl	8002068 <setTimer>
	setTimer(5, 500);
 8001d24:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001d28:	2005      	movs	r0, #5
 8001d2a:	f000 f99d 	bl	8002068 <setTimer>
  while (1)
  {
	  fsm_automatic_runx();
 8001d2e:	f7fe fc2d 	bl	800058c <fsm_automatic_runx>
	  fsm_automatic_runy();
 8001d32:	f7fe fd53 	bl	80007dc <fsm_automatic_runy>
	  fsm_manual_run1();
 8001d36:	f7fe fec9 	bl	8000acc <fsm_manual_run1>
	  fsm_manual_run2();
 8001d3a:	f7ff f8e5 	bl	8000f08 <fsm_manual_run2>
	  fsm_for_input_processing1();
 8001d3e:	f7ff fa31 	bl	80011a4 <fsm_for_input_processing1>
	  fsm_for_input_processing2();
 8001d42:	f7ff fa85 	bl	8001250 <fsm_for_input_processing2>
	  fsm_for_input_processing3();
 8001d46:	f7ff fad5 	bl	80012f4 <fsm_for_input_processing3>
	  fsm_automatic_runx();
 8001d4a:	e7f0      	b.n	8001d2e <main+0xfa>
 8001d4c:	20000084 	.word	0x20000084
 8001d50:	40010800 	.word	0x40010800
 8001d54:	40010c00 	.word	0x40010c00
 8001d58:	20000044 	.word	0x20000044
 8001d5c:	20000048 	.word	0x20000048
 8001d60:	20000058 	.word	0x20000058
 8001d64:	2000005c 	.word	0x2000005c
 8001d68:	2000002c 	.word	0x2000002c

08001d6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b090      	sub	sp, #64	; 0x40
 8001d70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d72:	f107 0318 	add.w	r3, r7, #24
 8001d76:	2228      	movs	r2, #40	; 0x28
 8001d78:	2100      	movs	r1, #0
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f001 fd08 	bl	8003790 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d80:	1d3b      	adds	r3, r7, #4
 8001d82:	2200      	movs	r2, #0
 8001d84:	601a      	str	r2, [r3, #0]
 8001d86:	605a      	str	r2, [r3, #4]
 8001d88:	609a      	str	r2, [r3, #8]
 8001d8a:	60da      	str	r2, [r3, #12]
 8001d8c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d8e:	2302      	movs	r3, #2
 8001d90:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d92:	2301      	movs	r3, #1
 8001d94:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d96:	2310      	movs	r3, #16
 8001d98:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d9e:	f107 0318 	add.w	r3, r7, #24
 8001da2:	4618      	mov	r0, r3
 8001da4:	f000 fd18 	bl	80027d8 <HAL_RCC_OscConfig>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001dae:	f000 f8c7 	bl	8001f40 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001db2:	230f      	movs	r3, #15
 8001db4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001db6:	2300      	movs	r3, #0
 8001db8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001dc6:	1d3b      	adds	r3, r7, #4
 8001dc8:	2100      	movs	r1, #0
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f000 ff84 	bl	8002cd8 <HAL_RCC_ClockConfig>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001dd6:	f000 f8b3 	bl	8001f40 <Error_Handler>
  }
}
 8001dda:	bf00      	nop
 8001ddc:	3740      	adds	r7, #64	; 0x40
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
	...

08001de4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b086      	sub	sp, #24
 8001de8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dea:	f107 0308 	add.w	r3, r7, #8
 8001dee:	2200      	movs	r2, #0
 8001df0:	601a      	str	r2, [r3, #0]
 8001df2:	605a      	str	r2, [r3, #4]
 8001df4:	609a      	str	r2, [r3, #8]
 8001df6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001df8:	463b      	mov	r3, r7
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	601a      	str	r2, [r3, #0]
 8001dfe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e00:	4b1d      	ldr	r3, [pc, #116]	; (8001e78 <MX_TIM2_Init+0x94>)
 8001e02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e06:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001e08:	4b1b      	ldr	r3, [pc, #108]	; (8001e78 <MX_TIM2_Init+0x94>)
 8001e0a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001e0e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e10:	4b19      	ldr	r3, [pc, #100]	; (8001e78 <MX_TIM2_Init+0x94>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001e16:	4b18      	ldr	r3, [pc, #96]	; (8001e78 <MX_TIM2_Init+0x94>)
 8001e18:	2209      	movs	r2, #9
 8001e1a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e1c:	4b16      	ldr	r3, [pc, #88]	; (8001e78 <MX_TIM2_Init+0x94>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e22:	4b15      	ldr	r3, [pc, #84]	; (8001e78 <MX_TIM2_Init+0x94>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e28:	4813      	ldr	r0, [pc, #76]	; (8001e78 <MX_TIM2_Init+0x94>)
 8001e2a:	f001 f8b1 	bl	8002f90 <HAL_TIM_Base_Init>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001e34:	f000 f884 	bl	8001f40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e3c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e3e:	f107 0308 	add.w	r3, r7, #8
 8001e42:	4619      	mov	r1, r3
 8001e44:	480c      	ldr	r0, [pc, #48]	; (8001e78 <MX_TIM2_Init+0x94>)
 8001e46:	f001 fa2f 	bl	80032a8 <HAL_TIM_ConfigClockSource>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d001      	beq.n	8001e54 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001e50:	f000 f876 	bl	8001f40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e54:	2300      	movs	r3, #0
 8001e56:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e5c:	463b      	mov	r3, r7
 8001e5e:	4619      	mov	r1, r3
 8001e60:	4805      	ldr	r0, [pc, #20]	; (8001e78 <MX_TIM2_Init+0x94>)
 8001e62:	f001 fc07 	bl	8003674 <HAL_TIMEx_MasterConfigSynchronization>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001e6c:	f000 f868 	bl	8001f40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001e70:	bf00      	nop
 8001e72:	3718      	adds	r7, #24
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	20000084 	.word	0x20000084

08001e7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b086      	sub	sp, #24
 8001e80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e82:	f107 0308 	add.w	r3, r7, #8
 8001e86:	2200      	movs	r2, #0
 8001e88:	601a      	str	r2, [r3, #0]
 8001e8a:	605a      	str	r2, [r3, #4]
 8001e8c:	609a      	str	r2, [r3, #8]
 8001e8e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e90:	4b28      	ldr	r3, [pc, #160]	; (8001f34 <MX_GPIO_Init+0xb8>)
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	4a27      	ldr	r2, [pc, #156]	; (8001f34 <MX_GPIO_Init+0xb8>)
 8001e96:	f043 0304 	orr.w	r3, r3, #4
 8001e9a:	6193      	str	r3, [r2, #24]
 8001e9c:	4b25      	ldr	r3, [pc, #148]	; (8001f34 <MX_GPIO_Init+0xb8>)
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	f003 0304 	and.w	r3, r3, #4
 8001ea4:	607b      	str	r3, [r7, #4]
 8001ea6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ea8:	4b22      	ldr	r3, [pc, #136]	; (8001f34 <MX_GPIO_Init+0xb8>)
 8001eaa:	699b      	ldr	r3, [r3, #24]
 8001eac:	4a21      	ldr	r2, [pc, #132]	; (8001f34 <MX_GPIO_Init+0xb8>)
 8001eae:	f043 0308 	orr.w	r3, r3, #8
 8001eb2:	6193      	str	r3, [r2, #24]
 8001eb4:	4b1f      	ldr	r3, [pc, #124]	; (8001f34 <MX_GPIO_Init+0xb8>)
 8001eb6:	699b      	ldr	r3, [r3, #24]
 8001eb8:	f003 0308 	and.w	r3, r3, #8
 8001ebc:	603b      	str	r3, [r7, #0]
 8001ebe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f44f 517e 	mov.w	r1, #16256	; 0x3f80
 8001ec6:	481c      	ldr	r0, [pc, #112]	; (8001f38 <MX_GPIO_Init+0xbc>)
 8001ec8:	f000 fc55 	bl	8002776 <HAL_GPIO_WritePin>
                          |LED5_Pin|LED6_Pin|LED7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN1_Pin|EN2_Pin|EN3_Pin|EN4_Pin
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f64f 71f8 	movw	r1, #65528	; 0xfff8
 8001ed2:	481a      	ldr	r0, [pc, #104]	; (8001f3c <MX_GPIO_Init+0xc0>)
 8001ed4:	f000 fc4f 	bl	8002776 <HAL_GPIO_WritePin>
                          |LED_GREEN_X_Pin|LED_RED_Y_Pin|LED_YELLOW_Y_Pin|LED_GREEN_Y_Pin
                          |EN0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin
                           LED5_Pin LED6_Pin LED7_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 8001ed8:	f44f 537e 	mov.w	r3, #16256	; 0x3f80
 8001edc:	60bb      	str	r3, [r7, #8]
                          |LED5_Pin|LED6_Pin|LED7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eea:	f107 0308 	add.w	r3, r7, #8
 8001eee:	4619      	mov	r1, r3
 8001ef0:	4811      	ldr	r0, [pc, #68]	; (8001f38 <MX_GPIO_Init+0xbc>)
 8001ef2:	f000 faaf 	bl	8002454 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button_Pin Button1_Pin Button2_Pin */
  GPIO_InitStruct.Pin = Button_Pin|Button1_Pin|Button2_Pin;
 8001ef6:	2307      	movs	r3, #7
 8001ef8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001efa:	2300      	movs	r3, #0
 8001efc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001efe:	2301      	movs	r3, #1
 8001f00:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f02:	f107 0308 	add.w	r3, r7, #8
 8001f06:	4619      	mov	r1, r3
 8001f08:	480c      	ldr	r0, [pc, #48]	; (8001f3c <MX_GPIO_Init+0xc0>)
 8001f0a:	f000 faa3 	bl	8002454 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN1_Pin EN2_Pin EN3_Pin EN4_Pin
                           EN5_Pin EN6_Pin LED_RED_X_Pin LED_YELLOW_X_Pin
                           LED_GREEN_X_Pin LED_RED_Y_Pin LED_YELLOW_Y_Pin LED_GREEN_Y_Pin
                           EN0_Pin */
  GPIO_InitStruct.Pin = EN1_Pin|EN2_Pin|EN3_Pin|EN4_Pin
 8001f0e:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001f12:	60bb      	str	r3, [r7, #8]
                          |EN5_Pin|EN6_Pin|LED_RED_X_Pin|LED_YELLOW_X_Pin
                          |LED_GREEN_X_Pin|LED_RED_Y_Pin|LED_YELLOW_Y_Pin|LED_GREEN_Y_Pin
                          |EN0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f14:	2301      	movs	r3, #1
 8001f16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f20:	f107 0308 	add.w	r3, r7, #8
 8001f24:	4619      	mov	r1, r3
 8001f26:	4805      	ldr	r0, [pc, #20]	; (8001f3c <MX_GPIO_Init+0xc0>)
 8001f28:	f000 fa94 	bl	8002454 <HAL_GPIO_Init>

}
 8001f2c:	bf00      	nop
 8001f2e:	3718      	adds	r7, #24
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	40021000 	.word	0x40021000
 8001f38:	40010800 	.word	0x40010800
 8001f3c:	40010c00 	.word	0x40010c00

08001f40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f44:	b672      	cpsid	i
}
 8001f46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f48:	e7fe      	b.n	8001f48 <Error_Handler+0x8>
	...

08001f4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b085      	sub	sp, #20
 8001f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001f52:	4b15      	ldr	r3, [pc, #84]	; (8001fa8 <HAL_MspInit+0x5c>)
 8001f54:	699b      	ldr	r3, [r3, #24]
 8001f56:	4a14      	ldr	r2, [pc, #80]	; (8001fa8 <HAL_MspInit+0x5c>)
 8001f58:	f043 0301 	orr.w	r3, r3, #1
 8001f5c:	6193      	str	r3, [r2, #24]
 8001f5e:	4b12      	ldr	r3, [pc, #72]	; (8001fa8 <HAL_MspInit+0x5c>)
 8001f60:	699b      	ldr	r3, [r3, #24]
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	60bb      	str	r3, [r7, #8]
 8001f68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f6a:	4b0f      	ldr	r3, [pc, #60]	; (8001fa8 <HAL_MspInit+0x5c>)
 8001f6c:	69db      	ldr	r3, [r3, #28]
 8001f6e:	4a0e      	ldr	r2, [pc, #56]	; (8001fa8 <HAL_MspInit+0x5c>)
 8001f70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f74:	61d3      	str	r3, [r2, #28]
 8001f76:	4b0c      	ldr	r3, [pc, #48]	; (8001fa8 <HAL_MspInit+0x5c>)
 8001f78:	69db      	ldr	r3, [r3, #28]
 8001f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f7e:	607b      	str	r3, [r7, #4]
 8001f80:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001f82:	4b0a      	ldr	r3, [pc, #40]	; (8001fac <HAL_MspInit+0x60>)
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	60fb      	str	r3, [r7, #12]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001f8e:	60fb      	str	r3, [r7, #12]
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001f96:	60fb      	str	r3, [r7, #12]
 8001f98:	4a04      	ldr	r2, [pc, #16]	; (8001fac <HAL_MspInit+0x60>)
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f9e:	bf00      	nop
 8001fa0:	3714      	adds	r7, #20
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bc80      	pop	{r7}
 8001fa6:	4770      	bx	lr
 8001fa8:	40021000 	.word	0x40021000
 8001fac:	40010000 	.word	0x40010000

08001fb0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fc0:	d113      	bne.n	8001fea <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001fc2:	4b0c      	ldr	r3, [pc, #48]	; (8001ff4 <HAL_TIM_Base_MspInit+0x44>)
 8001fc4:	69db      	ldr	r3, [r3, #28]
 8001fc6:	4a0b      	ldr	r2, [pc, #44]	; (8001ff4 <HAL_TIM_Base_MspInit+0x44>)
 8001fc8:	f043 0301 	orr.w	r3, r3, #1
 8001fcc:	61d3      	str	r3, [r2, #28]
 8001fce:	4b09      	ldr	r3, [pc, #36]	; (8001ff4 <HAL_TIM_Base_MspInit+0x44>)
 8001fd0:	69db      	ldr	r3, [r3, #28]
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	60fb      	str	r3, [r7, #12]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001fda:	2200      	movs	r2, #0
 8001fdc:	2100      	movs	r1, #0
 8001fde:	201c      	movs	r0, #28
 8001fe0:	f000 fa01 	bl	80023e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001fe4:	201c      	movs	r0, #28
 8001fe6:	f000 fa1a 	bl	800241e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001fea:	bf00      	nop
 8001fec:	3710      	adds	r7, #16
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	40021000 	.word	0x40021000

08001ff8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ffc:	e7fe      	b.n	8001ffc <NMI_Handler+0x4>

08001ffe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ffe:	b480      	push	{r7}
 8002000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002002:	e7fe      	b.n	8002002 <HardFault_Handler+0x4>

08002004 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002008:	e7fe      	b.n	8002008 <MemManage_Handler+0x4>

0800200a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800200a:	b480      	push	{r7}
 800200c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800200e:	e7fe      	b.n	800200e <BusFault_Handler+0x4>

08002010 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002014:	e7fe      	b.n	8002014 <UsageFault_Handler+0x4>

08002016 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002016:	b480      	push	{r7}
 8002018:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800201a:	bf00      	nop
 800201c:	46bd      	mov	sp, r7
 800201e:	bc80      	pop	{r7}
 8002020:	4770      	bx	lr

08002022 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002022:	b480      	push	{r7}
 8002024:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002026:	bf00      	nop
 8002028:	46bd      	mov	sp, r7
 800202a:	bc80      	pop	{r7}
 800202c:	4770      	bx	lr

0800202e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800202e:	b480      	push	{r7}
 8002030:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002032:	bf00      	nop
 8002034:	46bd      	mov	sp, r7
 8002036:	bc80      	pop	{r7}
 8002038:	4770      	bx	lr

0800203a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800203a:	b580      	push	{r7, lr}
 800203c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800203e:	f000 f8df 	bl	8002200 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002042:	bf00      	nop
 8002044:	bd80      	pop	{r7, pc}
	...

08002048 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800204c:	4802      	ldr	r0, [pc, #8]	; (8002058 <TIM2_IRQHandler+0x10>)
 800204e:	f001 f83b 	bl	80030c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002052:	bf00      	nop
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	20000084 	.word	0x20000084

0800205c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002060:	bf00      	nop
 8002062:	46bd      	mov	sp, r7
 8002064:	bc80      	pop	{r7}
 8002066:	4770      	bx	lr

08002068 <setTimer>:
#include "input_reading.h"
#define MAX_COUNTER 10
int TIME_CYCLE = 10;
int timer_counter[MAX_COUNTER];
int timer_flag[MAX_COUNTER];
void setTimer(int index, int duration){
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
	timer_counter[index] = duration/TIME_CYCLE;
 8002072:	4b09      	ldr	r3, [pc, #36]	; (8002098 <setTimer+0x30>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	683a      	ldr	r2, [r7, #0]
 8002078:	fb92 f2f3 	sdiv	r2, r2, r3
 800207c:	4907      	ldr	r1, [pc, #28]	; (800209c <setTimer+0x34>)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[index] = 0;
 8002084:	4a06      	ldr	r2, [pc, #24]	; (80020a0 <setTimer+0x38>)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2100      	movs	r1, #0
 800208a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800208e:	bf00      	nop
 8002090:	370c      	adds	r7, #12
 8002092:	46bd      	mov	sp, r7
 8002094:	bc80      	pop	{r7}
 8002096:	4770      	bx	lr
 8002098:	20000004 	.word	0x20000004
 800209c:	200000cc 	.word	0x200000cc
 80020a0:	200000f4 	.word	0x200000f4

080020a4 <timerRun>:
void timerRun(void){
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
	for(int i = 0; i < MAX_COUNTER; i++){
 80020aa:	2300      	movs	r3, #0
 80020ac:	607b      	str	r3, [r7, #4]
 80020ae:	e01c      	b.n	80020ea <timerRun+0x46>
		if(timer_counter[i] > 0){
 80020b0:	4a12      	ldr	r2, [pc, #72]	; (80020fc <timerRun+0x58>)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	dd13      	ble.n	80020e4 <timerRun+0x40>
			timer_counter[i]--;
 80020bc:	4a0f      	ldr	r2, [pc, #60]	; (80020fc <timerRun+0x58>)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020c4:	1e5a      	subs	r2, r3, #1
 80020c6:	490d      	ldr	r1, [pc, #52]	; (80020fc <timerRun+0x58>)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(timer_counter[i] <= 0){
 80020ce:	4a0b      	ldr	r2, [pc, #44]	; (80020fc <timerRun+0x58>)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	dc04      	bgt.n	80020e4 <timerRun+0x40>
				timer_flag[i] = 1;
 80020da:	4a09      	ldr	r2, [pc, #36]	; (8002100 <timerRun+0x5c>)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2101      	movs	r1, #1
 80020e0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < MAX_COUNTER; i++){
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	3301      	adds	r3, #1
 80020e8:	607b      	str	r3, [r7, #4]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2b09      	cmp	r3, #9
 80020ee:	dddf      	ble.n	80020b0 <timerRun+0xc>
			}
		}
	}
}
 80020f0:	bf00      	nop
 80020f2:	bf00      	nop
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bc80      	pop	{r7}
 80020fa:	4770      	bx	lr
 80020fc:	200000cc 	.word	0x200000cc
 8002100:	200000f4 	.word	0x200000f4

08002104 <HAL_TIM_PeriodElapsedCallback>:
void ClearTimer(int index){
		timer_flag[index] = 0;
		timer_counter[index] = 0;
}
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM2){
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002114:	d103      	bne.n	800211e <HAL_TIM_PeriodElapsedCallback+0x1a>
		button_reading() ;
 8002116:	f7ff f985 	bl	8001424 <button_reading>
		timerRun();
 800211a:	f7ff ffc3 	bl	80020a4 <timerRun>
	}
}
 800211e:	bf00      	nop
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
	...

08002128 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002128:	f7ff ff98 	bl	800205c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800212c:	480b      	ldr	r0, [pc, #44]	; (800215c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800212e:	490c      	ldr	r1, [pc, #48]	; (8002160 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002130:	4a0c      	ldr	r2, [pc, #48]	; (8002164 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002132:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002134:	e002      	b.n	800213c <LoopCopyDataInit>

08002136 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002136:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002138:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800213a:	3304      	adds	r3, #4

0800213c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800213c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800213e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002140:	d3f9      	bcc.n	8002136 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002142:	4a09      	ldr	r2, [pc, #36]	; (8002168 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002144:	4c09      	ldr	r4, [pc, #36]	; (800216c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002146:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002148:	e001      	b.n	800214e <LoopFillZerobss>

0800214a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800214a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800214c:	3204      	adds	r2, #4

0800214e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800214e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002150:	d3fb      	bcc.n	800214a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002152:	f001 faf9 	bl	8003748 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002156:	f7ff fd6d 	bl	8001c34 <main>
  bx lr
 800215a:	4770      	bx	lr
  ldr r0, =_sdata
 800215c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002160:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8002164:	080037e4 	.word	0x080037e4
  ldr r2, =_sbss
 8002168:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800216c:	20000120 	.word	0x20000120

08002170 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002170:	e7fe      	b.n	8002170 <ADC1_2_IRQHandler>
	...

08002174 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002178:	4b08      	ldr	r3, [pc, #32]	; (800219c <HAL_Init+0x28>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a07      	ldr	r2, [pc, #28]	; (800219c <HAL_Init+0x28>)
 800217e:	f043 0310 	orr.w	r3, r3, #16
 8002182:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002184:	2003      	movs	r0, #3
 8002186:	f000 f923 	bl	80023d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800218a:	200f      	movs	r0, #15
 800218c:	f000 f808 	bl	80021a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002190:	f7ff fedc 	bl	8001f4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002194:	2300      	movs	r3, #0
}
 8002196:	4618      	mov	r0, r3
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	40022000 	.word	0x40022000

080021a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021a8:	4b12      	ldr	r3, [pc, #72]	; (80021f4 <HAL_InitTick+0x54>)
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	4b12      	ldr	r3, [pc, #72]	; (80021f8 <HAL_InitTick+0x58>)
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	4619      	mov	r1, r3
 80021b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80021ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80021be:	4618      	mov	r0, r3
 80021c0:	f000 f93b 	bl	800243a <HAL_SYSTICK_Config>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d001      	beq.n	80021ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e00e      	b.n	80021ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2b0f      	cmp	r3, #15
 80021d2:	d80a      	bhi.n	80021ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021d4:	2200      	movs	r2, #0
 80021d6:	6879      	ldr	r1, [r7, #4]
 80021d8:	f04f 30ff 	mov.w	r0, #4294967295
 80021dc:	f000 f903 	bl	80023e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021e0:	4a06      	ldr	r2, [pc, #24]	; (80021fc <HAL_InitTick+0x5c>)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021e6:	2300      	movs	r3, #0
 80021e8:	e000      	b.n	80021ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3708      	adds	r7, #8
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	20000000 	.word	0x20000000
 80021f8:	2000000c 	.word	0x2000000c
 80021fc:	20000008 	.word	0x20000008

08002200 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002204:	4b05      	ldr	r3, [pc, #20]	; (800221c <HAL_IncTick+0x1c>)
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	461a      	mov	r2, r3
 800220a:	4b05      	ldr	r3, [pc, #20]	; (8002220 <HAL_IncTick+0x20>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4413      	add	r3, r2
 8002210:	4a03      	ldr	r2, [pc, #12]	; (8002220 <HAL_IncTick+0x20>)
 8002212:	6013      	str	r3, [r2, #0]
}
 8002214:	bf00      	nop
 8002216:	46bd      	mov	sp, r7
 8002218:	bc80      	pop	{r7}
 800221a:	4770      	bx	lr
 800221c:	2000000c 	.word	0x2000000c
 8002220:	2000011c 	.word	0x2000011c

08002224 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  return uwTick;
 8002228:	4b02      	ldr	r3, [pc, #8]	; (8002234 <HAL_GetTick+0x10>)
 800222a:	681b      	ldr	r3, [r3, #0]
}
 800222c:	4618      	mov	r0, r3
 800222e:	46bd      	mov	sp, r7
 8002230:	bc80      	pop	{r7}
 8002232:	4770      	bx	lr
 8002234:	2000011c 	.word	0x2000011c

08002238 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002238:	b480      	push	{r7}
 800223a:	b085      	sub	sp, #20
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f003 0307 	and.w	r3, r3, #7
 8002246:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002248:	4b0c      	ldr	r3, [pc, #48]	; (800227c <__NVIC_SetPriorityGrouping+0x44>)
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800224e:	68ba      	ldr	r2, [r7, #8]
 8002250:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002254:	4013      	ands	r3, r2
 8002256:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002260:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002264:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002268:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800226a:	4a04      	ldr	r2, [pc, #16]	; (800227c <__NVIC_SetPriorityGrouping+0x44>)
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	60d3      	str	r3, [r2, #12]
}
 8002270:	bf00      	nop
 8002272:	3714      	adds	r7, #20
 8002274:	46bd      	mov	sp, r7
 8002276:	bc80      	pop	{r7}
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	e000ed00 	.word	0xe000ed00

08002280 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002284:	4b04      	ldr	r3, [pc, #16]	; (8002298 <__NVIC_GetPriorityGrouping+0x18>)
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	0a1b      	lsrs	r3, r3, #8
 800228a:	f003 0307 	and.w	r3, r3, #7
}
 800228e:	4618      	mov	r0, r3
 8002290:	46bd      	mov	sp, r7
 8002292:	bc80      	pop	{r7}
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	e000ed00 	.word	0xe000ed00

0800229c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	4603      	mov	r3, r0
 80022a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	db0b      	blt.n	80022c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022ae:	79fb      	ldrb	r3, [r7, #7]
 80022b0:	f003 021f 	and.w	r2, r3, #31
 80022b4:	4906      	ldr	r1, [pc, #24]	; (80022d0 <__NVIC_EnableIRQ+0x34>)
 80022b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ba:	095b      	lsrs	r3, r3, #5
 80022bc:	2001      	movs	r0, #1
 80022be:	fa00 f202 	lsl.w	r2, r0, r2
 80022c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022c6:	bf00      	nop
 80022c8:	370c      	adds	r7, #12
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bc80      	pop	{r7}
 80022ce:	4770      	bx	lr
 80022d0:	e000e100 	.word	0xe000e100

080022d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	4603      	mov	r3, r0
 80022dc:	6039      	str	r1, [r7, #0]
 80022de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	db0a      	blt.n	80022fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	b2da      	uxtb	r2, r3
 80022ec:	490c      	ldr	r1, [pc, #48]	; (8002320 <__NVIC_SetPriority+0x4c>)
 80022ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f2:	0112      	lsls	r2, r2, #4
 80022f4:	b2d2      	uxtb	r2, r2
 80022f6:	440b      	add	r3, r1
 80022f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022fc:	e00a      	b.n	8002314 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	b2da      	uxtb	r2, r3
 8002302:	4908      	ldr	r1, [pc, #32]	; (8002324 <__NVIC_SetPriority+0x50>)
 8002304:	79fb      	ldrb	r3, [r7, #7]
 8002306:	f003 030f 	and.w	r3, r3, #15
 800230a:	3b04      	subs	r3, #4
 800230c:	0112      	lsls	r2, r2, #4
 800230e:	b2d2      	uxtb	r2, r2
 8002310:	440b      	add	r3, r1
 8002312:	761a      	strb	r2, [r3, #24]
}
 8002314:	bf00      	nop
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	bc80      	pop	{r7}
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	e000e100 	.word	0xe000e100
 8002324:	e000ed00 	.word	0xe000ed00

08002328 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002328:	b480      	push	{r7}
 800232a:	b089      	sub	sp, #36	; 0x24
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	f003 0307 	and.w	r3, r3, #7
 800233a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	f1c3 0307 	rsb	r3, r3, #7
 8002342:	2b04      	cmp	r3, #4
 8002344:	bf28      	it	cs
 8002346:	2304      	movcs	r3, #4
 8002348:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	3304      	adds	r3, #4
 800234e:	2b06      	cmp	r3, #6
 8002350:	d902      	bls.n	8002358 <NVIC_EncodePriority+0x30>
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	3b03      	subs	r3, #3
 8002356:	e000      	b.n	800235a <NVIC_EncodePriority+0x32>
 8002358:	2300      	movs	r3, #0
 800235a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800235c:	f04f 32ff 	mov.w	r2, #4294967295
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	fa02 f303 	lsl.w	r3, r2, r3
 8002366:	43da      	mvns	r2, r3
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	401a      	ands	r2, r3
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002370:	f04f 31ff 	mov.w	r1, #4294967295
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	fa01 f303 	lsl.w	r3, r1, r3
 800237a:	43d9      	mvns	r1, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002380:	4313      	orrs	r3, r2
         );
}
 8002382:	4618      	mov	r0, r3
 8002384:	3724      	adds	r7, #36	; 0x24
 8002386:	46bd      	mov	sp, r7
 8002388:	bc80      	pop	{r7}
 800238a:	4770      	bx	lr

0800238c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	3b01      	subs	r3, #1
 8002398:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800239c:	d301      	bcc.n	80023a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800239e:	2301      	movs	r3, #1
 80023a0:	e00f      	b.n	80023c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023a2:	4a0a      	ldr	r2, [pc, #40]	; (80023cc <SysTick_Config+0x40>)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	3b01      	subs	r3, #1
 80023a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023aa:	210f      	movs	r1, #15
 80023ac:	f04f 30ff 	mov.w	r0, #4294967295
 80023b0:	f7ff ff90 	bl	80022d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023b4:	4b05      	ldr	r3, [pc, #20]	; (80023cc <SysTick_Config+0x40>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023ba:	4b04      	ldr	r3, [pc, #16]	; (80023cc <SysTick_Config+0x40>)
 80023bc:	2207      	movs	r2, #7
 80023be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023c0:	2300      	movs	r3, #0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	e000e010 	.word	0xe000e010

080023d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f7ff ff2d 	bl	8002238 <__NVIC_SetPriorityGrouping>
}
 80023de:	bf00      	nop
 80023e0:	3708      	adds	r7, #8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b086      	sub	sp, #24
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	4603      	mov	r3, r0
 80023ee:	60b9      	str	r1, [r7, #8]
 80023f0:	607a      	str	r2, [r7, #4]
 80023f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023f4:	2300      	movs	r3, #0
 80023f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023f8:	f7ff ff42 	bl	8002280 <__NVIC_GetPriorityGrouping>
 80023fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	68b9      	ldr	r1, [r7, #8]
 8002402:	6978      	ldr	r0, [r7, #20]
 8002404:	f7ff ff90 	bl	8002328 <NVIC_EncodePriority>
 8002408:	4602      	mov	r2, r0
 800240a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800240e:	4611      	mov	r1, r2
 8002410:	4618      	mov	r0, r3
 8002412:	f7ff ff5f 	bl	80022d4 <__NVIC_SetPriority>
}
 8002416:	bf00      	nop
 8002418:	3718      	adds	r7, #24
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800241e:	b580      	push	{r7, lr}
 8002420:	b082      	sub	sp, #8
 8002422:	af00      	add	r7, sp, #0
 8002424:	4603      	mov	r3, r0
 8002426:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002428:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242c:	4618      	mov	r0, r3
 800242e:	f7ff ff35 	bl	800229c <__NVIC_EnableIRQ>
}
 8002432:	bf00      	nop
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800243a:	b580      	push	{r7, lr}
 800243c:	b082      	sub	sp, #8
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f7ff ffa2 	bl	800238c <SysTick_Config>
 8002448:	4603      	mov	r3, r0
}
 800244a:	4618      	mov	r0, r3
 800244c:	3708      	adds	r7, #8
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
	...

08002454 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002454:	b480      	push	{r7}
 8002456:	b08b      	sub	sp, #44	; 0x2c
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800245e:	2300      	movs	r3, #0
 8002460:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002462:	2300      	movs	r3, #0
 8002464:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002466:	e148      	b.n	80026fa <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002468:	2201      	movs	r2, #1
 800246a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246c:	fa02 f303 	lsl.w	r3, r2, r3
 8002470:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	69fa      	ldr	r2, [r7, #28]
 8002478:	4013      	ands	r3, r2
 800247a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	429a      	cmp	r2, r3
 8002482:	f040 8137 	bne.w	80026f4 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	4aa3      	ldr	r2, [pc, #652]	; (8002718 <HAL_GPIO_Init+0x2c4>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d05e      	beq.n	800254e <HAL_GPIO_Init+0xfa>
 8002490:	4aa1      	ldr	r2, [pc, #644]	; (8002718 <HAL_GPIO_Init+0x2c4>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d875      	bhi.n	8002582 <HAL_GPIO_Init+0x12e>
 8002496:	4aa1      	ldr	r2, [pc, #644]	; (800271c <HAL_GPIO_Init+0x2c8>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d058      	beq.n	800254e <HAL_GPIO_Init+0xfa>
 800249c:	4a9f      	ldr	r2, [pc, #636]	; (800271c <HAL_GPIO_Init+0x2c8>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d86f      	bhi.n	8002582 <HAL_GPIO_Init+0x12e>
 80024a2:	4a9f      	ldr	r2, [pc, #636]	; (8002720 <HAL_GPIO_Init+0x2cc>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d052      	beq.n	800254e <HAL_GPIO_Init+0xfa>
 80024a8:	4a9d      	ldr	r2, [pc, #628]	; (8002720 <HAL_GPIO_Init+0x2cc>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d869      	bhi.n	8002582 <HAL_GPIO_Init+0x12e>
 80024ae:	4a9d      	ldr	r2, [pc, #628]	; (8002724 <HAL_GPIO_Init+0x2d0>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d04c      	beq.n	800254e <HAL_GPIO_Init+0xfa>
 80024b4:	4a9b      	ldr	r2, [pc, #620]	; (8002724 <HAL_GPIO_Init+0x2d0>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d863      	bhi.n	8002582 <HAL_GPIO_Init+0x12e>
 80024ba:	4a9b      	ldr	r2, [pc, #620]	; (8002728 <HAL_GPIO_Init+0x2d4>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d046      	beq.n	800254e <HAL_GPIO_Init+0xfa>
 80024c0:	4a99      	ldr	r2, [pc, #612]	; (8002728 <HAL_GPIO_Init+0x2d4>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d85d      	bhi.n	8002582 <HAL_GPIO_Init+0x12e>
 80024c6:	2b12      	cmp	r3, #18
 80024c8:	d82a      	bhi.n	8002520 <HAL_GPIO_Init+0xcc>
 80024ca:	2b12      	cmp	r3, #18
 80024cc:	d859      	bhi.n	8002582 <HAL_GPIO_Init+0x12e>
 80024ce:	a201      	add	r2, pc, #4	; (adr r2, 80024d4 <HAL_GPIO_Init+0x80>)
 80024d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024d4:	0800254f 	.word	0x0800254f
 80024d8:	08002529 	.word	0x08002529
 80024dc:	0800253b 	.word	0x0800253b
 80024e0:	0800257d 	.word	0x0800257d
 80024e4:	08002583 	.word	0x08002583
 80024e8:	08002583 	.word	0x08002583
 80024ec:	08002583 	.word	0x08002583
 80024f0:	08002583 	.word	0x08002583
 80024f4:	08002583 	.word	0x08002583
 80024f8:	08002583 	.word	0x08002583
 80024fc:	08002583 	.word	0x08002583
 8002500:	08002583 	.word	0x08002583
 8002504:	08002583 	.word	0x08002583
 8002508:	08002583 	.word	0x08002583
 800250c:	08002583 	.word	0x08002583
 8002510:	08002583 	.word	0x08002583
 8002514:	08002583 	.word	0x08002583
 8002518:	08002531 	.word	0x08002531
 800251c:	08002545 	.word	0x08002545
 8002520:	4a82      	ldr	r2, [pc, #520]	; (800272c <HAL_GPIO_Init+0x2d8>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d013      	beq.n	800254e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002526:	e02c      	b.n	8002582 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	623b      	str	r3, [r7, #32]
          break;
 800252e:	e029      	b.n	8002584 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	3304      	adds	r3, #4
 8002536:	623b      	str	r3, [r7, #32]
          break;
 8002538:	e024      	b.n	8002584 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	3308      	adds	r3, #8
 8002540:	623b      	str	r3, [r7, #32]
          break;
 8002542:	e01f      	b.n	8002584 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	330c      	adds	r3, #12
 800254a:	623b      	str	r3, [r7, #32]
          break;
 800254c:	e01a      	b.n	8002584 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d102      	bne.n	800255c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002556:	2304      	movs	r3, #4
 8002558:	623b      	str	r3, [r7, #32]
          break;
 800255a:	e013      	b.n	8002584 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	2b01      	cmp	r3, #1
 8002562:	d105      	bne.n	8002570 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002564:	2308      	movs	r3, #8
 8002566:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	69fa      	ldr	r2, [r7, #28]
 800256c:	611a      	str	r2, [r3, #16]
          break;
 800256e:	e009      	b.n	8002584 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002570:	2308      	movs	r3, #8
 8002572:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	69fa      	ldr	r2, [r7, #28]
 8002578:	615a      	str	r2, [r3, #20]
          break;
 800257a:	e003      	b.n	8002584 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800257c:	2300      	movs	r3, #0
 800257e:	623b      	str	r3, [r7, #32]
          break;
 8002580:	e000      	b.n	8002584 <HAL_GPIO_Init+0x130>
          break;
 8002582:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	2bff      	cmp	r3, #255	; 0xff
 8002588:	d801      	bhi.n	800258e <HAL_GPIO_Init+0x13a>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	e001      	b.n	8002592 <HAL_GPIO_Init+0x13e>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	3304      	adds	r3, #4
 8002592:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	2bff      	cmp	r3, #255	; 0xff
 8002598:	d802      	bhi.n	80025a0 <HAL_GPIO_Init+0x14c>
 800259a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	e002      	b.n	80025a6 <HAL_GPIO_Init+0x152>
 80025a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a2:	3b08      	subs	r3, #8
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	210f      	movs	r1, #15
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	fa01 f303 	lsl.w	r3, r1, r3
 80025b4:	43db      	mvns	r3, r3
 80025b6:	401a      	ands	r2, r3
 80025b8:	6a39      	ldr	r1, [r7, #32]
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	fa01 f303 	lsl.w	r3, r1, r3
 80025c0:	431a      	orrs	r2, r3
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	f000 8090 	beq.w	80026f4 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80025d4:	4b56      	ldr	r3, [pc, #344]	; (8002730 <HAL_GPIO_Init+0x2dc>)
 80025d6:	699b      	ldr	r3, [r3, #24]
 80025d8:	4a55      	ldr	r2, [pc, #340]	; (8002730 <HAL_GPIO_Init+0x2dc>)
 80025da:	f043 0301 	orr.w	r3, r3, #1
 80025de:	6193      	str	r3, [r2, #24]
 80025e0:	4b53      	ldr	r3, [pc, #332]	; (8002730 <HAL_GPIO_Init+0x2dc>)
 80025e2:	699b      	ldr	r3, [r3, #24]
 80025e4:	f003 0301 	and.w	r3, r3, #1
 80025e8:	60bb      	str	r3, [r7, #8]
 80025ea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80025ec:	4a51      	ldr	r2, [pc, #324]	; (8002734 <HAL_GPIO_Init+0x2e0>)
 80025ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f0:	089b      	lsrs	r3, r3, #2
 80025f2:	3302      	adds	r3, #2
 80025f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025f8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80025fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fc:	f003 0303 	and.w	r3, r3, #3
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	220f      	movs	r2, #15
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	43db      	mvns	r3, r3
 800260a:	68fa      	ldr	r2, [r7, #12]
 800260c:	4013      	ands	r3, r2
 800260e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	4a49      	ldr	r2, [pc, #292]	; (8002738 <HAL_GPIO_Init+0x2e4>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d00d      	beq.n	8002634 <HAL_GPIO_Init+0x1e0>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	4a48      	ldr	r2, [pc, #288]	; (800273c <HAL_GPIO_Init+0x2e8>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d007      	beq.n	8002630 <HAL_GPIO_Init+0x1dc>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	4a47      	ldr	r2, [pc, #284]	; (8002740 <HAL_GPIO_Init+0x2ec>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d101      	bne.n	800262c <HAL_GPIO_Init+0x1d8>
 8002628:	2302      	movs	r3, #2
 800262a:	e004      	b.n	8002636 <HAL_GPIO_Init+0x1e2>
 800262c:	2303      	movs	r3, #3
 800262e:	e002      	b.n	8002636 <HAL_GPIO_Init+0x1e2>
 8002630:	2301      	movs	r3, #1
 8002632:	e000      	b.n	8002636 <HAL_GPIO_Init+0x1e2>
 8002634:	2300      	movs	r3, #0
 8002636:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002638:	f002 0203 	and.w	r2, r2, #3
 800263c:	0092      	lsls	r2, r2, #2
 800263e:	4093      	lsls	r3, r2
 8002640:	68fa      	ldr	r2, [r7, #12]
 8002642:	4313      	orrs	r3, r2
 8002644:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002646:	493b      	ldr	r1, [pc, #236]	; (8002734 <HAL_GPIO_Init+0x2e0>)
 8002648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264a:	089b      	lsrs	r3, r3, #2
 800264c:	3302      	adds	r3, #2
 800264e:	68fa      	ldr	r2, [r7, #12]
 8002650:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d006      	beq.n	800266e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002660:	4b38      	ldr	r3, [pc, #224]	; (8002744 <HAL_GPIO_Init+0x2f0>)
 8002662:	689a      	ldr	r2, [r3, #8]
 8002664:	4937      	ldr	r1, [pc, #220]	; (8002744 <HAL_GPIO_Init+0x2f0>)
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	4313      	orrs	r3, r2
 800266a:	608b      	str	r3, [r1, #8]
 800266c:	e006      	b.n	800267c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800266e:	4b35      	ldr	r3, [pc, #212]	; (8002744 <HAL_GPIO_Init+0x2f0>)
 8002670:	689a      	ldr	r2, [r3, #8]
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	43db      	mvns	r3, r3
 8002676:	4933      	ldr	r1, [pc, #204]	; (8002744 <HAL_GPIO_Init+0x2f0>)
 8002678:	4013      	ands	r3, r2
 800267a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d006      	beq.n	8002696 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002688:	4b2e      	ldr	r3, [pc, #184]	; (8002744 <HAL_GPIO_Init+0x2f0>)
 800268a:	68da      	ldr	r2, [r3, #12]
 800268c:	492d      	ldr	r1, [pc, #180]	; (8002744 <HAL_GPIO_Init+0x2f0>)
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	4313      	orrs	r3, r2
 8002692:	60cb      	str	r3, [r1, #12]
 8002694:	e006      	b.n	80026a4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002696:	4b2b      	ldr	r3, [pc, #172]	; (8002744 <HAL_GPIO_Init+0x2f0>)
 8002698:	68da      	ldr	r2, [r3, #12]
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	43db      	mvns	r3, r3
 800269e:	4929      	ldr	r1, [pc, #164]	; (8002744 <HAL_GPIO_Init+0x2f0>)
 80026a0:	4013      	ands	r3, r2
 80026a2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d006      	beq.n	80026be <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80026b0:	4b24      	ldr	r3, [pc, #144]	; (8002744 <HAL_GPIO_Init+0x2f0>)
 80026b2:	685a      	ldr	r2, [r3, #4]
 80026b4:	4923      	ldr	r1, [pc, #140]	; (8002744 <HAL_GPIO_Init+0x2f0>)
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	604b      	str	r3, [r1, #4]
 80026bc:	e006      	b.n	80026cc <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80026be:	4b21      	ldr	r3, [pc, #132]	; (8002744 <HAL_GPIO_Init+0x2f0>)
 80026c0:	685a      	ldr	r2, [r3, #4]
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	43db      	mvns	r3, r3
 80026c6:	491f      	ldr	r1, [pc, #124]	; (8002744 <HAL_GPIO_Init+0x2f0>)
 80026c8:	4013      	ands	r3, r2
 80026ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d006      	beq.n	80026e6 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80026d8:	4b1a      	ldr	r3, [pc, #104]	; (8002744 <HAL_GPIO_Init+0x2f0>)
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	4919      	ldr	r1, [pc, #100]	; (8002744 <HAL_GPIO_Init+0x2f0>)
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	600b      	str	r3, [r1, #0]
 80026e4:	e006      	b.n	80026f4 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80026e6:	4b17      	ldr	r3, [pc, #92]	; (8002744 <HAL_GPIO_Init+0x2f0>)
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	43db      	mvns	r3, r3
 80026ee:	4915      	ldr	r1, [pc, #84]	; (8002744 <HAL_GPIO_Init+0x2f0>)
 80026f0:	4013      	ands	r3, r2
 80026f2:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80026f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f6:	3301      	adds	r3, #1
 80026f8:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002700:	fa22 f303 	lsr.w	r3, r2, r3
 8002704:	2b00      	cmp	r3, #0
 8002706:	f47f aeaf 	bne.w	8002468 <HAL_GPIO_Init+0x14>
  }
}
 800270a:	bf00      	nop
 800270c:	bf00      	nop
 800270e:	372c      	adds	r7, #44	; 0x2c
 8002710:	46bd      	mov	sp, r7
 8002712:	bc80      	pop	{r7}
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	10320000 	.word	0x10320000
 800271c:	10310000 	.word	0x10310000
 8002720:	10220000 	.word	0x10220000
 8002724:	10210000 	.word	0x10210000
 8002728:	10120000 	.word	0x10120000
 800272c:	10110000 	.word	0x10110000
 8002730:	40021000 	.word	0x40021000
 8002734:	40010000 	.word	0x40010000
 8002738:	40010800 	.word	0x40010800
 800273c:	40010c00 	.word	0x40010c00
 8002740:	40011000 	.word	0x40011000
 8002744:	40010400 	.word	0x40010400

08002748 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002748:	b480      	push	{r7}
 800274a:	b085      	sub	sp, #20
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	460b      	mov	r3, r1
 8002752:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	689a      	ldr	r2, [r3, #8]
 8002758:	887b      	ldrh	r3, [r7, #2]
 800275a:	4013      	ands	r3, r2
 800275c:	2b00      	cmp	r3, #0
 800275e:	d002      	beq.n	8002766 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002760:	2301      	movs	r3, #1
 8002762:	73fb      	strb	r3, [r7, #15]
 8002764:	e001      	b.n	800276a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002766:	2300      	movs	r3, #0
 8002768:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800276a:	7bfb      	ldrb	r3, [r7, #15]
}
 800276c:	4618      	mov	r0, r3
 800276e:	3714      	adds	r7, #20
 8002770:	46bd      	mov	sp, r7
 8002772:	bc80      	pop	{r7}
 8002774:	4770      	bx	lr

08002776 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002776:	b480      	push	{r7}
 8002778:	b083      	sub	sp, #12
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
 800277e:	460b      	mov	r3, r1
 8002780:	807b      	strh	r3, [r7, #2]
 8002782:	4613      	mov	r3, r2
 8002784:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002786:	787b      	ldrb	r3, [r7, #1]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d003      	beq.n	8002794 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800278c:	887a      	ldrh	r2, [r7, #2]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002792:	e003      	b.n	800279c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002794:	887b      	ldrh	r3, [r7, #2]
 8002796:	041a      	lsls	r2, r3, #16
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	611a      	str	r2, [r3, #16]
}
 800279c:	bf00      	nop
 800279e:	370c      	adds	r7, #12
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bc80      	pop	{r7}
 80027a4:	4770      	bx	lr

080027a6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80027a6:	b480      	push	{r7}
 80027a8:	b085      	sub	sp, #20
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
 80027ae:	460b      	mov	r3, r1
 80027b0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80027b8:	887a      	ldrh	r2, [r7, #2]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	4013      	ands	r3, r2
 80027be:	041a      	lsls	r2, r3, #16
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	43d9      	mvns	r1, r3
 80027c4:	887b      	ldrh	r3, [r7, #2]
 80027c6:	400b      	ands	r3, r1
 80027c8:	431a      	orrs	r2, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	611a      	str	r2, [r3, #16]
}
 80027ce:	bf00      	nop
 80027d0:	3714      	adds	r7, #20
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bc80      	pop	{r7}
 80027d6:	4770      	bx	lr

080027d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b086      	sub	sp, #24
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d101      	bne.n	80027ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e26c      	b.n	8002cc4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0301 	and.w	r3, r3, #1
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	f000 8087 	beq.w	8002906 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027f8:	4b92      	ldr	r3, [pc, #584]	; (8002a44 <HAL_RCC_OscConfig+0x26c>)
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f003 030c 	and.w	r3, r3, #12
 8002800:	2b04      	cmp	r3, #4
 8002802:	d00c      	beq.n	800281e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002804:	4b8f      	ldr	r3, [pc, #572]	; (8002a44 <HAL_RCC_OscConfig+0x26c>)
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f003 030c 	and.w	r3, r3, #12
 800280c:	2b08      	cmp	r3, #8
 800280e:	d112      	bne.n	8002836 <HAL_RCC_OscConfig+0x5e>
 8002810:	4b8c      	ldr	r3, [pc, #560]	; (8002a44 <HAL_RCC_OscConfig+0x26c>)
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002818:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800281c:	d10b      	bne.n	8002836 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800281e:	4b89      	ldr	r3, [pc, #548]	; (8002a44 <HAL_RCC_OscConfig+0x26c>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d06c      	beq.n	8002904 <HAL_RCC_OscConfig+0x12c>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d168      	bne.n	8002904 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e246      	b.n	8002cc4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800283e:	d106      	bne.n	800284e <HAL_RCC_OscConfig+0x76>
 8002840:	4b80      	ldr	r3, [pc, #512]	; (8002a44 <HAL_RCC_OscConfig+0x26c>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a7f      	ldr	r2, [pc, #508]	; (8002a44 <HAL_RCC_OscConfig+0x26c>)
 8002846:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800284a:	6013      	str	r3, [r2, #0]
 800284c:	e02e      	b.n	80028ac <HAL_RCC_OscConfig+0xd4>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d10c      	bne.n	8002870 <HAL_RCC_OscConfig+0x98>
 8002856:	4b7b      	ldr	r3, [pc, #492]	; (8002a44 <HAL_RCC_OscConfig+0x26c>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a7a      	ldr	r2, [pc, #488]	; (8002a44 <HAL_RCC_OscConfig+0x26c>)
 800285c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002860:	6013      	str	r3, [r2, #0]
 8002862:	4b78      	ldr	r3, [pc, #480]	; (8002a44 <HAL_RCC_OscConfig+0x26c>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a77      	ldr	r2, [pc, #476]	; (8002a44 <HAL_RCC_OscConfig+0x26c>)
 8002868:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800286c:	6013      	str	r3, [r2, #0]
 800286e:	e01d      	b.n	80028ac <HAL_RCC_OscConfig+0xd4>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002878:	d10c      	bne.n	8002894 <HAL_RCC_OscConfig+0xbc>
 800287a:	4b72      	ldr	r3, [pc, #456]	; (8002a44 <HAL_RCC_OscConfig+0x26c>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a71      	ldr	r2, [pc, #452]	; (8002a44 <HAL_RCC_OscConfig+0x26c>)
 8002880:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002884:	6013      	str	r3, [r2, #0]
 8002886:	4b6f      	ldr	r3, [pc, #444]	; (8002a44 <HAL_RCC_OscConfig+0x26c>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a6e      	ldr	r2, [pc, #440]	; (8002a44 <HAL_RCC_OscConfig+0x26c>)
 800288c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002890:	6013      	str	r3, [r2, #0]
 8002892:	e00b      	b.n	80028ac <HAL_RCC_OscConfig+0xd4>
 8002894:	4b6b      	ldr	r3, [pc, #428]	; (8002a44 <HAL_RCC_OscConfig+0x26c>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a6a      	ldr	r2, [pc, #424]	; (8002a44 <HAL_RCC_OscConfig+0x26c>)
 800289a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800289e:	6013      	str	r3, [r2, #0]
 80028a0:	4b68      	ldr	r3, [pc, #416]	; (8002a44 <HAL_RCC_OscConfig+0x26c>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a67      	ldr	r2, [pc, #412]	; (8002a44 <HAL_RCC_OscConfig+0x26c>)
 80028a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028aa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d013      	beq.n	80028dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b4:	f7ff fcb6 	bl	8002224 <HAL_GetTick>
 80028b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ba:	e008      	b.n	80028ce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028bc:	f7ff fcb2 	bl	8002224 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	2b64      	cmp	r3, #100	; 0x64
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e1fa      	b.n	8002cc4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ce:	4b5d      	ldr	r3, [pc, #372]	; (8002a44 <HAL_RCC_OscConfig+0x26c>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d0f0      	beq.n	80028bc <HAL_RCC_OscConfig+0xe4>
 80028da:	e014      	b.n	8002906 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028dc:	f7ff fca2 	bl	8002224 <HAL_GetTick>
 80028e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028e2:	e008      	b.n	80028f6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028e4:	f7ff fc9e 	bl	8002224 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b64      	cmp	r3, #100	; 0x64
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e1e6      	b.n	8002cc4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028f6:	4b53      	ldr	r3, [pc, #332]	; (8002a44 <HAL_RCC_OscConfig+0x26c>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d1f0      	bne.n	80028e4 <HAL_RCC_OscConfig+0x10c>
 8002902:	e000      	b.n	8002906 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002904:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0302 	and.w	r3, r3, #2
 800290e:	2b00      	cmp	r3, #0
 8002910:	d063      	beq.n	80029da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002912:	4b4c      	ldr	r3, [pc, #304]	; (8002a44 <HAL_RCC_OscConfig+0x26c>)
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f003 030c 	and.w	r3, r3, #12
 800291a:	2b00      	cmp	r3, #0
 800291c:	d00b      	beq.n	8002936 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800291e:	4b49      	ldr	r3, [pc, #292]	; (8002a44 <HAL_RCC_OscConfig+0x26c>)
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f003 030c 	and.w	r3, r3, #12
 8002926:	2b08      	cmp	r3, #8
 8002928:	d11c      	bne.n	8002964 <HAL_RCC_OscConfig+0x18c>
 800292a:	4b46      	ldr	r3, [pc, #280]	; (8002a44 <HAL_RCC_OscConfig+0x26c>)
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d116      	bne.n	8002964 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002936:	4b43      	ldr	r3, [pc, #268]	; (8002a44 <HAL_RCC_OscConfig+0x26c>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0302 	and.w	r3, r3, #2
 800293e:	2b00      	cmp	r3, #0
 8002940:	d005      	beq.n	800294e <HAL_RCC_OscConfig+0x176>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	2b01      	cmp	r3, #1
 8002948:	d001      	beq.n	800294e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e1ba      	b.n	8002cc4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800294e:	4b3d      	ldr	r3, [pc, #244]	; (8002a44 <HAL_RCC_OscConfig+0x26c>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	00db      	lsls	r3, r3, #3
 800295c:	4939      	ldr	r1, [pc, #228]	; (8002a44 <HAL_RCC_OscConfig+0x26c>)
 800295e:	4313      	orrs	r3, r2
 8002960:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002962:	e03a      	b.n	80029da <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	691b      	ldr	r3, [r3, #16]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d020      	beq.n	80029ae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800296c:	4b36      	ldr	r3, [pc, #216]	; (8002a48 <HAL_RCC_OscConfig+0x270>)
 800296e:	2201      	movs	r2, #1
 8002970:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002972:	f7ff fc57 	bl	8002224 <HAL_GetTick>
 8002976:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002978:	e008      	b.n	800298c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800297a:	f7ff fc53 	bl	8002224 <HAL_GetTick>
 800297e:	4602      	mov	r2, r0
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	2b02      	cmp	r3, #2
 8002986:	d901      	bls.n	800298c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002988:	2303      	movs	r3, #3
 800298a:	e19b      	b.n	8002cc4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800298c:	4b2d      	ldr	r3, [pc, #180]	; (8002a44 <HAL_RCC_OscConfig+0x26c>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0302 	and.w	r3, r3, #2
 8002994:	2b00      	cmp	r3, #0
 8002996:	d0f0      	beq.n	800297a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002998:	4b2a      	ldr	r3, [pc, #168]	; (8002a44 <HAL_RCC_OscConfig+0x26c>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	695b      	ldr	r3, [r3, #20]
 80029a4:	00db      	lsls	r3, r3, #3
 80029a6:	4927      	ldr	r1, [pc, #156]	; (8002a44 <HAL_RCC_OscConfig+0x26c>)
 80029a8:	4313      	orrs	r3, r2
 80029aa:	600b      	str	r3, [r1, #0]
 80029ac:	e015      	b.n	80029da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029ae:	4b26      	ldr	r3, [pc, #152]	; (8002a48 <HAL_RCC_OscConfig+0x270>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b4:	f7ff fc36 	bl	8002224 <HAL_GetTick>
 80029b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029ba:	e008      	b.n	80029ce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029bc:	f7ff fc32 	bl	8002224 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e17a      	b.n	8002cc4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029ce:	4b1d      	ldr	r3, [pc, #116]	; (8002a44 <HAL_RCC_OscConfig+0x26c>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d1f0      	bne.n	80029bc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0308 	and.w	r3, r3, #8
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d03a      	beq.n	8002a5c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	699b      	ldr	r3, [r3, #24]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d019      	beq.n	8002a22 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029ee:	4b17      	ldr	r3, [pc, #92]	; (8002a4c <HAL_RCC_OscConfig+0x274>)
 80029f0:	2201      	movs	r2, #1
 80029f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029f4:	f7ff fc16 	bl	8002224 <HAL_GetTick>
 80029f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029fa:	e008      	b.n	8002a0e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029fc:	f7ff fc12 	bl	8002224 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e15a      	b.n	8002cc4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a0e:	4b0d      	ldr	r3, [pc, #52]	; (8002a44 <HAL_RCC_OscConfig+0x26c>)
 8002a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d0f0      	beq.n	80029fc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002a1a:	2001      	movs	r0, #1
 8002a1c:	f000 fa9a 	bl	8002f54 <RCC_Delay>
 8002a20:	e01c      	b.n	8002a5c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a22:	4b0a      	ldr	r3, [pc, #40]	; (8002a4c <HAL_RCC_OscConfig+0x274>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a28:	f7ff fbfc 	bl	8002224 <HAL_GetTick>
 8002a2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a2e:	e00f      	b.n	8002a50 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a30:	f7ff fbf8 	bl	8002224 <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d908      	bls.n	8002a50 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e140      	b.n	8002cc4 <HAL_RCC_OscConfig+0x4ec>
 8002a42:	bf00      	nop
 8002a44:	40021000 	.word	0x40021000
 8002a48:	42420000 	.word	0x42420000
 8002a4c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a50:	4b9e      	ldr	r3, [pc, #632]	; (8002ccc <HAL_RCC_OscConfig+0x4f4>)
 8002a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a54:	f003 0302 	and.w	r3, r3, #2
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d1e9      	bne.n	8002a30 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0304 	and.w	r3, r3, #4
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	f000 80a6 	beq.w	8002bb6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a6e:	4b97      	ldr	r3, [pc, #604]	; (8002ccc <HAL_RCC_OscConfig+0x4f4>)
 8002a70:	69db      	ldr	r3, [r3, #28]
 8002a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d10d      	bne.n	8002a96 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a7a:	4b94      	ldr	r3, [pc, #592]	; (8002ccc <HAL_RCC_OscConfig+0x4f4>)
 8002a7c:	69db      	ldr	r3, [r3, #28]
 8002a7e:	4a93      	ldr	r2, [pc, #588]	; (8002ccc <HAL_RCC_OscConfig+0x4f4>)
 8002a80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a84:	61d3      	str	r3, [r2, #28]
 8002a86:	4b91      	ldr	r3, [pc, #580]	; (8002ccc <HAL_RCC_OscConfig+0x4f4>)
 8002a88:	69db      	ldr	r3, [r3, #28]
 8002a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a8e:	60bb      	str	r3, [r7, #8]
 8002a90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a92:	2301      	movs	r3, #1
 8002a94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a96:	4b8e      	ldr	r3, [pc, #568]	; (8002cd0 <HAL_RCC_OscConfig+0x4f8>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d118      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002aa2:	4b8b      	ldr	r3, [pc, #556]	; (8002cd0 <HAL_RCC_OscConfig+0x4f8>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a8a      	ldr	r2, [pc, #552]	; (8002cd0 <HAL_RCC_OscConfig+0x4f8>)
 8002aa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002aae:	f7ff fbb9 	bl	8002224 <HAL_GetTick>
 8002ab2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ab4:	e008      	b.n	8002ac8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ab6:	f7ff fbb5 	bl	8002224 <HAL_GetTick>
 8002aba:	4602      	mov	r2, r0
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	2b64      	cmp	r3, #100	; 0x64
 8002ac2:	d901      	bls.n	8002ac8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e0fd      	b.n	8002cc4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ac8:	4b81      	ldr	r3, [pc, #516]	; (8002cd0 <HAL_RCC_OscConfig+0x4f8>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d0f0      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d106      	bne.n	8002aea <HAL_RCC_OscConfig+0x312>
 8002adc:	4b7b      	ldr	r3, [pc, #492]	; (8002ccc <HAL_RCC_OscConfig+0x4f4>)
 8002ade:	6a1b      	ldr	r3, [r3, #32]
 8002ae0:	4a7a      	ldr	r2, [pc, #488]	; (8002ccc <HAL_RCC_OscConfig+0x4f4>)
 8002ae2:	f043 0301 	orr.w	r3, r3, #1
 8002ae6:	6213      	str	r3, [r2, #32]
 8002ae8:	e02d      	b.n	8002b46 <HAL_RCC_OscConfig+0x36e>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d10c      	bne.n	8002b0c <HAL_RCC_OscConfig+0x334>
 8002af2:	4b76      	ldr	r3, [pc, #472]	; (8002ccc <HAL_RCC_OscConfig+0x4f4>)
 8002af4:	6a1b      	ldr	r3, [r3, #32]
 8002af6:	4a75      	ldr	r2, [pc, #468]	; (8002ccc <HAL_RCC_OscConfig+0x4f4>)
 8002af8:	f023 0301 	bic.w	r3, r3, #1
 8002afc:	6213      	str	r3, [r2, #32]
 8002afe:	4b73      	ldr	r3, [pc, #460]	; (8002ccc <HAL_RCC_OscConfig+0x4f4>)
 8002b00:	6a1b      	ldr	r3, [r3, #32]
 8002b02:	4a72      	ldr	r2, [pc, #456]	; (8002ccc <HAL_RCC_OscConfig+0x4f4>)
 8002b04:	f023 0304 	bic.w	r3, r3, #4
 8002b08:	6213      	str	r3, [r2, #32]
 8002b0a:	e01c      	b.n	8002b46 <HAL_RCC_OscConfig+0x36e>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	2b05      	cmp	r3, #5
 8002b12:	d10c      	bne.n	8002b2e <HAL_RCC_OscConfig+0x356>
 8002b14:	4b6d      	ldr	r3, [pc, #436]	; (8002ccc <HAL_RCC_OscConfig+0x4f4>)
 8002b16:	6a1b      	ldr	r3, [r3, #32]
 8002b18:	4a6c      	ldr	r2, [pc, #432]	; (8002ccc <HAL_RCC_OscConfig+0x4f4>)
 8002b1a:	f043 0304 	orr.w	r3, r3, #4
 8002b1e:	6213      	str	r3, [r2, #32]
 8002b20:	4b6a      	ldr	r3, [pc, #424]	; (8002ccc <HAL_RCC_OscConfig+0x4f4>)
 8002b22:	6a1b      	ldr	r3, [r3, #32]
 8002b24:	4a69      	ldr	r2, [pc, #420]	; (8002ccc <HAL_RCC_OscConfig+0x4f4>)
 8002b26:	f043 0301 	orr.w	r3, r3, #1
 8002b2a:	6213      	str	r3, [r2, #32]
 8002b2c:	e00b      	b.n	8002b46 <HAL_RCC_OscConfig+0x36e>
 8002b2e:	4b67      	ldr	r3, [pc, #412]	; (8002ccc <HAL_RCC_OscConfig+0x4f4>)
 8002b30:	6a1b      	ldr	r3, [r3, #32]
 8002b32:	4a66      	ldr	r2, [pc, #408]	; (8002ccc <HAL_RCC_OscConfig+0x4f4>)
 8002b34:	f023 0301 	bic.w	r3, r3, #1
 8002b38:	6213      	str	r3, [r2, #32]
 8002b3a:	4b64      	ldr	r3, [pc, #400]	; (8002ccc <HAL_RCC_OscConfig+0x4f4>)
 8002b3c:	6a1b      	ldr	r3, [r3, #32]
 8002b3e:	4a63      	ldr	r2, [pc, #396]	; (8002ccc <HAL_RCC_OscConfig+0x4f4>)
 8002b40:	f023 0304 	bic.w	r3, r3, #4
 8002b44:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d015      	beq.n	8002b7a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b4e:	f7ff fb69 	bl	8002224 <HAL_GetTick>
 8002b52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b54:	e00a      	b.n	8002b6c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b56:	f7ff fb65 	bl	8002224 <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d901      	bls.n	8002b6c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e0ab      	b.n	8002cc4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b6c:	4b57      	ldr	r3, [pc, #348]	; (8002ccc <HAL_RCC_OscConfig+0x4f4>)
 8002b6e:	6a1b      	ldr	r3, [r3, #32]
 8002b70:	f003 0302 	and.w	r3, r3, #2
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d0ee      	beq.n	8002b56 <HAL_RCC_OscConfig+0x37e>
 8002b78:	e014      	b.n	8002ba4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b7a:	f7ff fb53 	bl	8002224 <HAL_GetTick>
 8002b7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b80:	e00a      	b.n	8002b98 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b82:	f7ff fb4f 	bl	8002224 <HAL_GetTick>
 8002b86:	4602      	mov	r2, r0
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d901      	bls.n	8002b98 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002b94:	2303      	movs	r3, #3
 8002b96:	e095      	b.n	8002cc4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b98:	4b4c      	ldr	r3, [pc, #304]	; (8002ccc <HAL_RCC_OscConfig+0x4f4>)
 8002b9a:	6a1b      	ldr	r3, [r3, #32]
 8002b9c:	f003 0302 	and.w	r3, r3, #2
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d1ee      	bne.n	8002b82 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ba4:	7dfb      	ldrb	r3, [r7, #23]
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d105      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002baa:	4b48      	ldr	r3, [pc, #288]	; (8002ccc <HAL_RCC_OscConfig+0x4f4>)
 8002bac:	69db      	ldr	r3, [r3, #28]
 8002bae:	4a47      	ldr	r2, [pc, #284]	; (8002ccc <HAL_RCC_OscConfig+0x4f4>)
 8002bb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bb4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	69db      	ldr	r3, [r3, #28]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	f000 8081 	beq.w	8002cc2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bc0:	4b42      	ldr	r3, [pc, #264]	; (8002ccc <HAL_RCC_OscConfig+0x4f4>)
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f003 030c 	and.w	r3, r3, #12
 8002bc8:	2b08      	cmp	r3, #8
 8002bca:	d061      	beq.n	8002c90 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	69db      	ldr	r3, [r3, #28]
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d146      	bne.n	8002c62 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bd4:	4b3f      	ldr	r3, [pc, #252]	; (8002cd4 <HAL_RCC_OscConfig+0x4fc>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bda:	f7ff fb23 	bl	8002224 <HAL_GetTick>
 8002bde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002be0:	e008      	b.n	8002bf4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002be2:	f7ff fb1f 	bl	8002224 <HAL_GetTick>
 8002be6:	4602      	mov	r2, r0
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d901      	bls.n	8002bf4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	e067      	b.n	8002cc4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bf4:	4b35      	ldr	r3, [pc, #212]	; (8002ccc <HAL_RCC_OscConfig+0x4f4>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d1f0      	bne.n	8002be2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6a1b      	ldr	r3, [r3, #32]
 8002c04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c08:	d108      	bne.n	8002c1c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c0a:	4b30      	ldr	r3, [pc, #192]	; (8002ccc <HAL_RCC_OscConfig+0x4f4>)
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	492d      	ldr	r1, [pc, #180]	; (8002ccc <HAL_RCC_OscConfig+0x4f4>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c1c:	4b2b      	ldr	r3, [pc, #172]	; (8002ccc <HAL_RCC_OscConfig+0x4f4>)
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6a19      	ldr	r1, [r3, #32]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2c:	430b      	orrs	r3, r1
 8002c2e:	4927      	ldr	r1, [pc, #156]	; (8002ccc <HAL_RCC_OscConfig+0x4f4>)
 8002c30:	4313      	orrs	r3, r2
 8002c32:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c34:	4b27      	ldr	r3, [pc, #156]	; (8002cd4 <HAL_RCC_OscConfig+0x4fc>)
 8002c36:	2201      	movs	r2, #1
 8002c38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c3a:	f7ff faf3 	bl	8002224 <HAL_GetTick>
 8002c3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c40:	e008      	b.n	8002c54 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c42:	f7ff faef 	bl	8002224 <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d901      	bls.n	8002c54 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e037      	b.n	8002cc4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c54:	4b1d      	ldr	r3, [pc, #116]	; (8002ccc <HAL_RCC_OscConfig+0x4f4>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d0f0      	beq.n	8002c42 <HAL_RCC_OscConfig+0x46a>
 8002c60:	e02f      	b.n	8002cc2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c62:	4b1c      	ldr	r3, [pc, #112]	; (8002cd4 <HAL_RCC_OscConfig+0x4fc>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c68:	f7ff fadc 	bl	8002224 <HAL_GetTick>
 8002c6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c6e:	e008      	b.n	8002c82 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c70:	f7ff fad8 	bl	8002224 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e020      	b.n	8002cc4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c82:	4b12      	ldr	r3, [pc, #72]	; (8002ccc <HAL_RCC_OscConfig+0x4f4>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d1f0      	bne.n	8002c70 <HAL_RCC_OscConfig+0x498>
 8002c8e:	e018      	b.n	8002cc2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	69db      	ldr	r3, [r3, #28]
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d101      	bne.n	8002c9c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e013      	b.n	8002cc4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c9c:	4b0b      	ldr	r3, [pc, #44]	; (8002ccc <HAL_RCC_OscConfig+0x4f4>)
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a1b      	ldr	r3, [r3, #32]
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d106      	bne.n	8002cbe <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d001      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e000      	b.n	8002cc4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3718      	adds	r7, #24
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	40021000 	.word	0x40021000
 8002cd0:	40007000 	.word	0x40007000
 8002cd4:	42420060 	.word	0x42420060

08002cd8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d101      	bne.n	8002cec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e0d0      	b.n	8002e8e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cec:	4b6a      	ldr	r3, [pc, #424]	; (8002e98 <HAL_RCC_ClockConfig+0x1c0>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0307 	and.w	r3, r3, #7
 8002cf4:	683a      	ldr	r2, [r7, #0]
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d910      	bls.n	8002d1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cfa:	4b67      	ldr	r3, [pc, #412]	; (8002e98 <HAL_RCC_ClockConfig+0x1c0>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f023 0207 	bic.w	r2, r3, #7
 8002d02:	4965      	ldr	r1, [pc, #404]	; (8002e98 <HAL_RCC_ClockConfig+0x1c0>)
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d0a:	4b63      	ldr	r3, [pc, #396]	; (8002e98 <HAL_RCC_ClockConfig+0x1c0>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0307 	and.w	r3, r3, #7
 8002d12:	683a      	ldr	r2, [r7, #0]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d001      	beq.n	8002d1c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e0b8      	b.n	8002e8e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0302 	and.w	r3, r3, #2
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d020      	beq.n	8002d6a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0304 	and.w	r3, r3, #4
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d005      	beq.n	8002d40 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d34:	4b59      	ldr	r3, [pc, #356]	; (8002e9c <HAL_RCC_ClockConfig+0x1c4>)
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	4a58      	ldr	r2, [pc, #352]	; (8002e9c <HAL_RCC_ClockConfig+0x1c4>)
 8002d3a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002d3e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0308 	and.w	r3, r3, #8
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d005      	beq.n	8002d58 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d4c:	4b53      	ldr	r3, [pc, #332]	; (8002e9c <HAL_RCC_ClockConfig+0x1c4>)
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	4a52      	ldr	r2, [pc, #328]	; (8002e9c <HAL_RCC_ClockConfig+0x1c4>)
 8002d52:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002d56:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d58:	4b50      	ldr	r3, [pc, #320]	; (8002e9c <HAL_RCC_ClockConfig+0x1c4>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	494d      	ldr	r1, [pc, #308]	; (8002e9c <HAL_RCC_ClockConfig+0x1c4>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0301 	and.w	r3, r3, #1
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d040      	beq.n	8002df8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d107      	bne.n	8002d8e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d7e:	4b47      	ldr	r3, [pc, #284]	; (8002e9c <HAL_RCC_ClockConfig+0x1c4>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d115      	bne.n	8002db6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e07f      	b.n	8002e8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d107      	bne.n	8002da6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d96:	4b41      	ldr	r3, [pc, #260]	; (8002e9c <HAL_RCC_ClockConfig+0x1c4>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d109      	bne.n	8002db6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e073      	b.n	8002e8e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002da6:	4b3d      	ldr	r3, [pc, #244]	; (8002e9c <HAL_RCC_ClockConfig+0x1c4>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0302 	and.w	r3, r3, #2
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d101      	bne.n	8002db6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e06b      	b.n	8002e8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002db6:	4b39      	ldr	r3, [pc, #228]	; (8002e9c <HAL_RCC_ClockConfig+0x1c4>)
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f023 0203 	bic.w	r2, r3, #3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	4936      	ldr	r1, [pc, #216]	; (8002e9c <HAL_RCC_ClockConfig+0x1c4>)
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002dc8:	f7ff fa2c 	bl	8002224 <HAL_GetTick>
 8002dcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dce:	e00a      	b.n	8002de6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dd0:	f7ff fa28 	bl	8002224 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d901      	bls.n	8002de6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e053      	b.n	8002e8e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002de6:	4b2d      	ldr	r3, [pc, #180]	; (8002e9c <HAL_RCC_ClockConfig+0x1c4>)
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f003 020c 	and.w	r2, r3, #12
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d1eb      	bne.n	8002dd0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002df8:	4b27      	ldr	r3, [pc, #156]	; (8002e98 <HAL_RCC_ClockConfig+0x1c0>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0307 	and.w	r3, r3, #7
 8002e00:	683a      	ldr	r2, [r7, #0]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d210      	bcs.n	8002e28 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e06:	4b24      	ldr	r3, [pc, #144]	; (8002e98 <HAL_RCC_ClockConfig+0x1c0>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f023 0207 	bic.w	r2, r3, #7
 8002e0e:	4922      	ldr	r1, [pc, #136]	; (8002e98 <HAL_RCC_ClockConfig+0x1c0>)
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e16:	4b20      	ldr	r3, [pc, #128]	; (8002e98 <HAL_RCC_ClockConfig+0x1c0>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0307 	and.w	r3, r3, #7
 8002e1e:	683a      	ldr	r2, [r7, #0]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d001      	beq.n	8002e28 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e032      	b.n	8002e8e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0304 	and.w	r3, r3, #4
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d008      	beq.n	8002e46 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e34:	4b19      	ldr	r3, [pc, #100]	; (8002e9c <HAL_RCC_ClockConfig+0x1c4>)
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	4916      	ldr	r1, [pc, #88]	; (8002e9c <HAL_RCC_ClockConfig+0x1c4>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0308 	and.w	r3, r3, #8
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d009      	beq.n	8002e66 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e52:	4b12      	ldr	r3, [pc, #72]	; (8002e9c <HAL_RCC_ClockConfig+0x1c4>)
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	00db      	lsls	r3, r3, #3
 8002e60:	490e      	ldr	r1, [pc, #56]	; (8002e9c <HAL_RCC_ClockConfig+0x1c4>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e66:	f000 f821 	bl	8002eac <HAL_RCC_GetSysClockFreq>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	4b0b      	ldr	r3, [pc, #44]	; (8002e9c <HAL_RCC_ClockConfig+0x1c4>)
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	091b      	lsrs	r3, r3, #4
 8002e72:	f003 030f 	and.w	r3, r3, #15
 8002e76:	490a      	ldr	r1, [pc, #40]	; (8002ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8002e78:	5ccb      	ldrb	r3, [r1, r3]
 8002e7a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e7e:	4a09      	ldr	r2, [pc, #36]	; (8002ea4 <HAL_RCC_ClockConfig+0x1cc>)
 8002e80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e82:	4b09      	ldr	r3, [pc, #36]	; (8002ea8 <HAL_RCC_ClockConfig+0x1d0>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4618      	mov	r0, r3
 8002e88:	f7ff f98a 	bl	80021a0 <HAL_InitTick>

  return HAL_OK;
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3710      	adds	r7, #16
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	40022000 	.word	0x40022000
 8002e9c:	40021000 	.word	0x40021000
 8002ea0:	080037b8 	.word	0x080037b8
 8002ea4:	20000000 	.word	0x20000000
 8002ea8:	20000008 	.word	0x20000008

08002eac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b087      	sub	sp, #28
 8002eb0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	60fb      	str	r3, [r7, #12]
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	60bb      	str	r3, [r7, #8]
 8002eba:	2300      	movs	r3, #0
 8002ebc:	617b      	str	r3, [r7, #20]
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002ec6:	4b1e      	ldr	r3, [pc, #120]	; (8002f40 <HAL_RCC_GetSysClockFreq+0x94>)
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f003 030c 	and.w	r3, r3, #12
 8002ed2:	2b04      	cmp	r3, #4
 8002ed4:	d002      	beq.n	8002edc <HAL_RCC_GetSysClockFreq+0x30>
 8002ed6:	2b08      	cmp	r3, #8
 8002ed8:	d003      	beq.n	8002ee2 <HAL_RCC_GetSysClockFreq+0x36>
 8002eda:	e027      	b.n	8002f2c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002edc:	4b19      	ldr	r3, [pc, #100]	; (8002f44 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ede:	613b      	str	r3, [r7, #16]
      break;
 8002ee0:	e027      	b.n	8002f32 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	0c9b      	lsrs	r3, r3, #18
 8002ee6:	f003 030f 	and.w	r3, r3, #15
 8002eea:	4a17      	ldr	r2, [pc, #92]	; (8002f48 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002eec:	5cd3      	ldrb	r3, [r2, r3]
 8002eee:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d010      	beq.n	8002f1c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002efa:	4b11      	ldr	r3, [pc, #68]	; (8002f40 <HAL_RCC_GetSysClockFreq+0x94>)
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	0c5b      	lsrs	r3, r3, #17
 8002f00:	f003 0301 	and.w	r3, r3, #1
 8002f04:	4a11      	ldr	r2, [pc, #68]	; (8002f4c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002f06:	5cd3      	ldrb	r3, [r2, r3]
 8002f08:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a0d      	ldr	r2, [pc, #52]	; (8002f44 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f0e:	fb02 f203 	mul.w	r2, r2, r3
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f18:	617b      	str	r3, [r7, #20]
 8002f1a:	e004      	b.n	8002f26 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4a0c      	ldr	r2, [pc, #48]	; (8002f50 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002f20:	fb02 f303 	mul.w	r3, r2, r3
 8002f24:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	613b      	str	r3, [r7, #16]
      break;
 8002f2a:	e002      	b.n	8002f32 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f2c:	4b05      	ldr	r3, [pc, #20]	; (8002f44 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f2e:	613b      	str	r3, [r7, #16]
      break;
 8002f30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f32:	693b      	ldr	r3, [r7, #16]
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	371c      	adds	r7, #28
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bc80      	pop	{r7}
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	40021000 	.word	0x40021000
 8002f44:	007a1200 	.word	0x007a1200
 8002f48:	080037c8 	.word	0x080037c8
 8002f4c:	080037d8 	.word	0x080037d8
 8002f50:	003d0900 	.word	0x003d0900

08002f54 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b085      	sub	sp, #20
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002f5c:	4b0a      	ldr	r3, [pc, #40]	; (8002f88 <RCC_Delay+0x34>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a0a      	ldr	r2, [pc, #40]	; (8002f8c <RCC_Delay+0x38>)
 8002f62:	fba2 2303 	umull	r2, r3, r2, r3
 8002f66:	0a5b      	lsrs	r3, r3, #9
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	fb02 f303 	mul.w	r3, r2, r3
 8002f6e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002f70:	bf00      	nop
  }
  while (Delay --);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	1e5a      	subs	r2, r3, #1
 8002f76:	60fa      	str	r2, [r7, #12]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d1f9      	bne.n	8002f70 <RCC_Delay+0x1c>
}
 8002f7c:	bf00      	nop
 8002f7e:	bf00      	nop
 8002f80:	3714      	adds	r7, #20
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bc80      	pop	{r7}
 8002f86:	4770      	bx	lr
 8002f88:	20000000 	.word	0x20000000
 8002f8c:	10624dd3 	.word	0x10624dd3

08002f90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d101      	bne.n	8002fa2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e041      	b.n	8003026 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d106      	bne.n	8002fbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f7fe fffa 	bl	8001fb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2202      	movs	r2, #2
 8002fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	3304      	adds	r3, #4
 8002fcc:	4619      	mov	r1, r3
 8002fce:	4610      	mov	r0, r2
 8002fd0:	f000 fa56 	bl	8003480 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003024:	2300      	movs	r3, #0
}
 8003026:	4618      	mov	r0, r3
 8003028:	3708      	adds	r7, #8
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
	...

08003030 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003030:	b480      	push	{r7}
 8003032:	b085      	sub	sp, #20
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800303e:	b2db      	uxtb	r3, r3
 8003040:	2b01      	cmp	r3, #1
 8003042:	d001      	beq.n	8003048 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e035      	b.n	80030b4 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2202      	movs	r2, #2
 800304c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	68da      	ldr	r2, [r3, #12]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f042 0201 	orr.w	r2, r2, #1
 800305e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a16      	ldr	r2, [pc, #88]	; (80030c0 <HAL_TIM_Base_Start_IT+0x90>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d009      	beq.n	800307e <HAL_TIM_Base_Start_IT+0x4e>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003072:	d004      	beq.n	800307e <HAL_TIM_Base_Start_IT+0x4e>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a12      	ldr	r2, [pc, #72]	; (80030c4 <HAL_TIM_Base_Start_IT+0x94>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d111      	bne.n	80030a2 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f003 0307 	and.w	r3, r3, #7
 8003088:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2b06      	cmp	r3, #6
 800308e:	d010      	beq.n	80030b2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f042 0201 	orr.w	r2, r2, #1
 800309e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030a0:	e007      	b.n	80030b2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f042 0201 	orr.w	r2, r2, #1
 80030b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030b2:	2300      	movs	r3, #0
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3714      	adds	r7, #20
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bc80      	pop	{r7}
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop
 80030c0:	40012c00 	.word	0x40012c00
 80030c4:	40000400 	.word	0x40000400

080030c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	691b      	ldr	r3, [r3, #16]
 80030de:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	f003 0302 	and.w	r3, r3, #2
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d020      	beq.n	800312c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	f003 0302 	and.w	r3, r3, #2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d01b      	beq.n	800312c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f06f 0202 	mvn.w	r2, #2
 80030fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2201      	movs	r2, #1
 8003102:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	699b      	ldr	r3, [r3, #24]
 800310a:	f003 0303 	and.w	r3, r3, #3
 800310e:	2b00      	cmp	r3, #0
 8003110:	d003      	beq.n	800311a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f000 f998 	bl	8003448 <HAL_TIM_IC_CaptureCallback>
 8003118:	e005      	b.n	8003126 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 f98b 	bl	8003436 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f000 f99a 	bl	800345a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	f003 0304 	and.w	r3, r3, #4
 8003132:	2b00      	cmp	r3, #0
 8003134:	d020      	beq.n	8003178 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f003 0304 	and.w	r3, r3, #4
 800313c:	2b00      	cmp	r3, #0
 800313e:	d01b      	beq.n	8003178 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f06f 0204 	mvn.w	r2, #4
 8003148:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2202      	movs	r2, #2
 800314e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	699b      	ldr	r3, [r3, #24]
 8003156:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800315a:	2b00      	cmp	r3, #0
 800315c:	d003      	beq.n	8003166 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f000 f972 	bl	8003448 <HAL_TIM_IC_CaptureCallback>
 8003164:	e005      	b.n	8003172 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f000 f965 	bl	8003436 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f000 f974 	bl	800345a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	f003 0308 	and.w	r3, r3, #8
 800317e:	2b00      	cmp	r3, #0
 8003180:	d020      	beq.n	80031c4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	f003 0308 	and.w	r3, r3, #8
 8003188:	2b00      	cmp	r3, #0
 800318a:	d01b      	beq.n	80031c4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f06f 0208 	mvn.w	r2, #8
 8003194:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2204      	movs	r2, #4
 800319a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	69db      	ldr	r3, [r3, #28]
 80031a2:	f003 0303 	and.w	r3, r3, #3
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d003      	beq.n	80031b2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f000 f94c 	bl	8003448 <HAL_TIM_IC_CaptureCallback>
 80031b0:	e005      	b.n	80031be <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f000 f93f 	bl	8003436 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f000 f94e 	bl	800345a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	f003 0310 	and.w	r3, r3, #16
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d020      	beq.n	8003210 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	f003 0310 	and.w	r3, r3, #16
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d01b      	beq.n	8003210 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f06f 0210 	mvn.w	r2, #16
 80031e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2208      	movs	r2, #8
 80031e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	69db      	ldr	r3, [r3, #28]
 80031ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d003      	beq.n	80031fe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 f926 	bl	8003448 <HAL_TIM_IC_CaptureCallback>
 80031fc:	e005      	b.n	800320a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f000 f919 	bl	8003436 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f000 f928 	bl	800345a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	f003 0301 	and.w	r3, r3, #1
 8003216:	2b00      	cmp	r3, #0
 8003218:	d00c      	beq.n	8003234 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	f003 0301 	and.w	r3, r3, #1
 8003220:	2b00      	cmp	r3, #0
 8003222:	d007      	beq.n	8003234 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f06f 0201 	mvn.w	r2, #1
 800322c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f7fe ff68 	bl	8002104 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00c      	beq.n	8003258 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003244:	2b00      	cmp	r3, #0
 8003246:	d007      	beq.n	8003258 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003250:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f000 fa6f 	bl	8003736 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00c      	beq.n	800327c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003268:	2b00      	cmp	r3, #0
 800326a:	d007      	beq.n	800327c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003274:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f000 f8f8 	bl	800346c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	f003 0320 	and.w	r3, r3, #32
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00c      	beq.n	80032a0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	f003 0320 	and.w	r3, r3, #32
 800328c:	2b00      	cmp	r3, #0
 800328e:	d007      	beq.n	80032a0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f06f 0220 	mvn.w	r2, #32
 8003298:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f000 fa42 	bl	8003724 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032a0:	bf00      	nop
 80032a2:	3710      	adds	r7, #16
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}

080032a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032b2:	2300      	movs	r3, #0
 80032b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d101      	bne.n	80032c4 <HAL_TIM_ConfigClockSource+0x1c>
 80032c0:	2302      	movs	r3, #2
 80032c2:	e0b4      	b.n	800342e <HAL_TIM_ConfigClockSource+0x186>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2202      	movs	r2, #2
 80032d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80032e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	68ba      	ldr	r2, [r7, #8]
 80032f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032fc:	d03e      	beq.n	800337c <HAL_TIM_ConfigClockSource+0xd4>
 80032fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003302:	f200 8087 	bhi.w	8003414 <HAL_TIM_ConfigClockSource+0x16c>
 8003306:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800330a:	f000 8086 	beq.w	800341a <HAL_TIM_ConfigClockSource+0x172>
 800330e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003312:	d87f      	bhi.n	8003414 <HAL_TIM_ConfigClockSource+0x16c>
 8003314:	2b70      	cmp	r3, #112	; 0x70
 8003316:	d01a      	beq.n	800334e <HAL_TIM_ConfigClockSource+0xa6>
 8003318:	2b70      	cmp	r3, #112	; 0x70
 800331a:	d87b      	bhi.n	8003414 <HAL_TIM_ConfigClockSource+0x16c>
 800331c:	2b60      	cmp	r3, #96	; 0x60
 800331e:	d050      	beq.n	80033c2 <HAL_TIM_ConfigClockSource+0x11a>
 8003320:	2b60      	cmp	r3, #96	; 0x60
 8003322:	d877      	bhi.n	8003414 <HAL_TIM_ConfigClockSource+0x16c>
 8003324:	2b50      	cmp	r3, #80	; 0x50
 8003326:	d03c      	beq.n	80033a2 <HAL_TIM_ConfigClockSource+0xfa>
 8003328:	2b50      	cmp	r3, #80	; 0x50
 800332a:	d873      	bhi.n	8003414 <HAL_TIM_ConfigClockSource+0x16c>
 800332c:	2b40      	cmp	r3, #64	; 0x40
 800332e:	d058      	beq.n	80033e2 <HAL_TIM_ConfigClockSource+0x13a>
 8003330:	2b40      	cmp	r3, #64	; 0x40
 8003332:	d86f      	bhi.n	8003414 <HAL_TIM_ConfigClockSource+0x16c>
 8003334:	2b30      	cmp	r3, #48	; 0x30
 8003336:	d064      	beq.n	8003402 <HAL_TIM_ConfigClockSource+0x15a>
 8003338:	2b30      	cmp	r3, #48	; 0x30
 800333a:	d86b      	bhi.n	8003414 <HAL_TIM_ConfigClockSource+0x16c>
 800333c:	2b20      	cmp	r3, #32
 800333e:	d060      	beq.n	8003402 <HAL_TIM_ConfigClockSource+0x15a>
 8003340:	2b20      	cmp	r3, #32
 8003342:	d867      	bhi.n	8003414 <HAL_TIM_ConfigClockSource+0x16c>
 8003344:	2b00      	cmp	r3, #0
 8003346:	d05c      	beq.n	8003402 <HAL_TIM_ConfigClockSource+0x15a>
 8003348:	2b10      	cmp	r3, #16
 800334a:	d05a      	beq.n	8003402 <HAL_TIM_ConfigClockSource+0x15a>
 800334c:	e062      	b.n	8003414 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6818      	ldr	r0, [r3, #0]
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	6899      	ldr	r1, [r3, #8]
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	685a      	ldr	r2, [r3, #4]
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	f000 f96a 	bl	8003636 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003370:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	68ba      	ldr	r2, [r7, #8]
 8003378:	609a      	str	r2, [r3, #8]
      break;
 800337a:	e04f      	b.n	800341c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6818      	ldr	r0, [r3, #0]
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	6899      	ldr	r1, [r3, #8]
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	685a      	ldr	r2, [r3, #4]
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	f000 f953 	bl	8003636 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	689a      	ldr	r2, [r3, #8]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800339e:	609a      	str	r2, [r3, #8]
      break;
 80033a0:	e03c      	b.n	800341c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6818      	ldr	r0, [r3, #0]
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	6859      	ldr	r1, [r3, #4]
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	461a      	mov	r2, r3
 80033b0:	f000 f8ca 	bl	8003548 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	2150      	movs	r1, #80	; 0x50
 80033ba:	4618      	mov	r0, r3
 80033bc:	f000 f921 	bl	8003602 <TIM_ITRx_SetConfig>
      break;
 80033c0:	e02c      	b.n	800341c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6818      	ldr	r0, [r3, #0]
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	6859      	ldr	r1, [r3, #4]
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	461a      	mov	r2, r3
 80033d0:	f000 f8e8 	bl	80035a4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2160      	movs	r1, #96	; 0x60
 80033da:	4618      	mov	r0, r3
 80033dc:	f000 f911 	bl	8003602 <TIM_ITRx_SetConfig>
      break;
 80033e0:	e01c      	b.n	800341c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6818      	ldr	r0, [r3, #0]
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	6859      	ldr	r1, [r3, #4]
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	461a      	mov	r2, r3
 80033f0:	f000 f8aa 	bl	8003548 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2140      	movs	r1, #64	; 0x40
 80033fa:	4618      	mov	r0, r3
 80033fc:	f000 f901 	bl	8003602 <TIM_ITRx_SetConfig>
      break;
 8003400:	e00c      	b.n	800341c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4619      	mov	r1, r3
 800340c:	4610      	mov	r0, r2
 800340e:	f000 f8f8 	bl	8003602 <TIM_ITRx_SetConfig>
      break;
 8003412:	e003      	b.n	800341c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	73fb      	strb	r3, [r7, #15]
      break;
 8003418:	e000      	b.n	800341c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800341a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800342c:	7bfb      	ldrb	r3, [r7, #15]
}
 800342e:	4618      	mov	r0, r3
 8003430:	3710      	adds	r7, #16
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}

08003436 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003436:	b480      	push	{r7}
 8003438:	b083      	sub	sp, #12
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800343e:	bf00      	nop
 8003440:	370c      	adds	r7, #12
 8003442:	46bd      	mov	sp, r7
 8003444:	bc80      	pop	{r7}
 8003446:	4770      	bx	lr

08003448 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003450:	bf00      	nop
 8003452:	370c      	adds	r7, #12
 8003454:	46bd      	mov	sp, r7
 8003456:	bc80      	pop	{r7}
 8003458:	4770      	bx	lr

0800345a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800345a:	b480      	push	{r7}
 800345c:	b083      	sub	sp, #12
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003462:	bf00      	nop
 8003464:	370c      	adds	r7, #12
 8003466:	46bd      	mov	sp, r7
 8003468:	bc80      	pop	{r7}
 800346a:	4770      	bx	lr

0800346c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003474:	bf00      	nop
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	bc80      	pop	{r7}
 800347c:	4770      	bx	lr
	...

08003480 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003480:	b480      	push	{r7}
 8003482:	b085      	sub	sp, #20
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	4a2b      	ldr	r2, [pc, #172]	; (8003540 <TIM_Base_SetConfig+0xc0>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d007      	beq.n	80034a8 <TIM_Base_SetConfig+0x28>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800349e:	d003      	beq.n	80034a8 <TIM_Base_SetConfig+0x28>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	4a28      	ldr	r2, [pc, #160]	; (8003544 <TIM_Base_SetConfig+0xc4>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d108      	bne.n	80034ba <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	68fa      	ldr	r2, [r7, #12]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a20      	ldr	r2, [pc, #128]	; (8003540 <TIM_Base_SetConfig+0xc0>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d007      	beq.n	80034d2 <TIM_Base_SetConfig+0x52>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034c8:	d003      	beq.n	80034d2 <TIM_Base_SetConfig+0x52>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a1d      	ldr	r2, [pc, #116]	; (8003544 <TIM_Base_SetConfig+0xc4>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d108      	bne.n	80034e4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	68fa      	ldr	r2, [r7, #12]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	695b      	ldr	r3, [r3, #20]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	68fa      	ldr	r2, [r7, #12]
 80034f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	689a      	ldr	r2, [r3, #8]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4a0d      	ldr	r2, [pc, #52]	; (8003540 <TIM_Base_SetConfig+0xc0>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d103      	bne.n	8003518 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	691a      	ldr	r2, [r3, #16]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	f003 0301 	and.w	r3, r3, #1
 8003526:	2b00      	cmp	r3, #0
 8003528:	d005      	beq.n	8003536 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	f023 0201 	bic.w	r2, r3, #1
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	611a      	str	r2, [r3, #16]
  }
}
 8003536:	bf00      	nop
 8003538:	3714      	adds	r7, #20
 800353a:	46bd      	mov	sp, r7
 800353c:	bc80      	pop	{r7}
 800353e:	4770      	bx	lr
 8003540:	40012c00 	.word	0x40012c00
 8003544:	40000400 	.word	0x40000400

08003548 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003548:	b480      	push	{r7}
 800354a:	b087      	sub	sp, #28
 800354c:	af00      	add	r7, sp, #0
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6a1b      	ldr	r3, [r3, #32]
 8003558:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6a1b      	ldr	r3, [r3, #32]
 800355e:	f023 0201 	bic.w	r2, r3, #1
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	699b      	ldr	r3, [r3, #24]
 800356a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003572:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	011b      	lsls	r3, r3, #4
 8003578:	693a      	ldr	r2, [r7, #16]
 800357a:	4313      	orrs	r3, r2
 800357c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	f023 030a 	bic.w	r3, r3, #10
 8003584:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003586:	697a      	ldr	r2, [r7, #20]
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	4313      	orrs	r3, r2
 800358c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	693a      	ldr	r2, [r7, #16]
 8003592:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	697a      	ldr	r2, [r7, #20]
 8003598:	621a      	str	r2, [r3, #32]
}
 800359a:	bf00      	nop
 800359c:	371c      	adds	r7, #28
 800359e:	46bd      	mov	sp, r7
 80035a0:	bc80      	pop	{r7}
 80035a2:	4770      	bx	lr

080035a4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b087      	sub	sp, #28
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6a1b      	ldr	r3, [r3, #32]
 80035b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6a1b      	ldr	r3, [r3, #32]
 80035ba:	f023 0210 	bic.w	r2, r3, #16
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	699b      	ldr	r3, [r3, #24]
 80035c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80035ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	031b      	lsls	r3, r3, #12
 80035d4:	693a      	ldr	r2, [r7, #16]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80035e0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	011b      	lsls	r3, r3, #4
 80035e6:	697a      	ldr	r2, [r7, #20]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	693a      	ldr	r2, [r7, #16]
 80035f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	697a      	ldr	r2, [r7, #20]
 80035f6:	621a      	str	r2, [r3, #32]
}
 80035f8:	bf00      	nop
 80035fa:	371c      	adds	r7, #28
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bc80      	pop	{r7}
 8003600:	4770      	bx	lr

08003602 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003602:	b480      	push	{r7}
 8003604:	b085      	sub	sp, #20
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
 800360a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003618:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800361a:	683a      	ldr	r2, [r7, #0]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	4313      	orrs	r3, r2
 8003620:	f043 0307 	orr.w	r3, r3, #7
 8003624:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	68fa      	ldr	r2, [r7, #12]
 800362a:	609a      	str	r2, [r3, #8]
}
 800362c:	bf00      	nop
 800362e:	3714      	adds	r7, #20
 8003630:	46bd      	mov	sp, r7
 8003632:	bc80      	pop	{r7}
 8003634:	4770      	bx	lr

08003636 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003636:	b480      	push	{r7}
 8003638:	b087      	sub	sp, #28
 800363a:	af00      	add	r7, sp, #0
 800363c:	60f8      	str	r0, [r7, #12]
 800363e:	60b9      	str	r1, [r7, #8]
 8003640:	607a      	str	r2, [r7, #4]
 8003642:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003650:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	021a      	lsls	r2, r3, #8
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	431a      	orrs	r2, r3
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	4313      	orrs	r3, r2
 800365e:	697a      	ldr	r2, [r7, #20]
 8003660:	4313      	orrs	r3, r2
 8003662:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	697a      	ldr	r2, [r7, #20]
 8003668:	609a      	str	r2, [r3, #8]
}
 800366a:	bf00      	nop
 800366c:	371c      	adds	r7, #28
 800366e:	46bd      	mov	sp, r7
 8003670:	bc80      	pop	{r7}
 8003672:	4770      	bx	lr

08003674 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003674:	b480      	push	{r7}
 8003676:	b085      	sub	sp, #20
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003684:	2b01      	cmp	r3, #1
 8003686:	d101      	bne.n	800368c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003688:	2302      	movs	r3, #2
 800368a:	e041      	b.n	8003710 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2202      	movs	r2, #2
 8003698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	68fa      	ldr	r2, [r7, #12]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	68fa      	ldr	r2, [r7, #12]
 80036c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a14      	ldr	r2, [pc, #80]	; (800371c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d009      	beq.n	80036e4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036d8:	d004      	beq.n	80036e4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a10      	ldr	r2, [pc, #64]	; (8003720 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d10c      	bne.n	80036fe <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036ea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	68ba      	ldr	r2, [r7, #8]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	68ba      	ldr	r2, [r7, #8]
 80036fc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2201      	movs	r2, #1
 8003702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800370e:	2300      	movs	r3, #0
}
 8003710:	4618      	mov	r0, r3
 8003712:	3714      	adds	r7, #20
 8003714:	46bd      	mov	sp, r7
 8003716:	bc80      	pop	{r7}
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop
 800371c:	40012c00 	.word	0x40012c00
 8003720:	40000400 	.word	0x40000400

08003724 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800372c:	bf00      	nop
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	bc80      	pop	{r7}
 8003734:	4770      	bx	lr

08003736 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003736:	b480      	push	{r7}
 8003738:	b083      	sub	sp, #12
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800373e:	bf00      	nop
 8003740:	370c      	adds	r7, #12
 8003742:	46bd      	mov	sp, r7
 8003744:	bc80      	pop	{r7}
 8003746:	4770      	bx	lr

08003748 <__libc_init_array>:
 8003748:	b570      	push	{r4, r5, r6, lr}
 800374a:	2600      	movs	r6, #0
 800374c:	4d0c      	ldr	r5, [pc, #48]	; (8003780 <__libc_init_array+0x38>)
 800374e:	4c0d      	ldr	r4, [pc, #52]	; (8003784 <__libc_init_array+0x3c>)
 8003750:	1b64      	subs	r4, r4, r5
 8003752:	10a4      	asrs	r4, r4, #2
 8003754:	42a6      	cmp	r6, r4
 8003756:	d109      	bne.n	800376c <__libc_init_array+0x24>
 8003758:	f000 f822 	bl	80037a0 <_init>
 800375c:	2600      	movs	r6, #0
 800375e:	4d0a      	ldr	r5, [pc, #40]	; (8003788 <__libc_init_array+0x40>)
 8003760:	4c0a      	ldr	r4, [pc, #40]	; (800378c <__libc_init_array+0x44>)
 8003762:	1b64      	subs	r4, r4, r5
 8003764:	10a4      	asrs	r4, r4, #2
 8003766:	42a6      	cmp	r6, r4
 8003768:	d105      	bne.n	8003776 <__libc_init_array+0x2e>
 800376a:	bd70      	pop	{r4, r5, r6, pc}
 800376c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003770:	4798      	blx	r3
 8003772:	3601      	adds	r6, #1
 8003774:	e7ee      	b.n	8003754 <__libc_init_array+0xc>
 8003776:	f855 3b04 	ldr.w	r3, [r5], #4
 800377a:	4798      	blx	r3
 800377c:	3601      	adds	r6, #1
 800377e:	e7f2      	b.n	8003766 <__libc_init_array+0x1e>
 8003780:	080037dc 	.word	0x080037dc
 8003784:	080037dc 	.word	0x080037dc
 8003788:	080037dc 	.word	0x080037dc
 800378c:	080037e0 	.word	0x080037e0

08003790 <memset>:
 8003790:	4603      	mov	r3, r0
 8003792:	4402      	add	r2, r0
 8003794:	4293      	cmp	r3, r2
 8003796:	d100      	bne.n	800379a <memset+0xa>
 8003798:	4770      	bx	lr
 800379a:	f803 1b01 	strb.w	r1, [r3], #1
 800379e:	e7f9      	b.n	8003794 <memset+0x4>

080037a0 <_init>:
 80037a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037a2:	bf00      	nop
 80037a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037a6:	bc08      	pop	{r3}
 80037a8:	469e      	mov	lr, r3
 80037aa:	4770      	bx	lr

080037ac <_fini>:
 80037ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ae:	bf00      	nop
 80037b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037b2:	bc08      	pop	{r3}
 80037b4:	469e      	mov	lr, r3
 80037b6:	4770      	bx	lr
