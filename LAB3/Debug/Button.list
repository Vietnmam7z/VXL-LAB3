
Button.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000349c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080035a8  080035a8  000135a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035cc  080035cc  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  080035cc  080035cc  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080035cc  080035cc  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035cc  080035cc  000135cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080035d0  080035d0  000135d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  080035d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  2000001c  080035f0  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000012c  080035f0  0002012c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009c92  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c2c  00000000  00000000  00029cd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b20  00000000  00000000  0002b908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a00  00000000  00000000  0002c428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001628a  00000000  00000000  0002ce28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c098  00000000  00000000  000430b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000827a6  00000000  00000000  0004f14a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d18f0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b28  00000000  00000000  000d1944  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000001c 	.word	0x2000001c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003590 	.word	0x08003590

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000020 	.word	0x20000020
 8000148:	08003590 	.word	0x08003590

0800014c <SetMode>:
int mode4_flag = 0;
int save_counterTimeSet = 0;
int Time_red = 5;
int Time_green = 3;
int Time_yellow = 2;
void SetMode(void){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	if(ProcessButton3() == 1){
 8000150:	f001 f84e 	bl	80011f0 <ProcessButton3>
 8000154:	4603      	mov	r3, r0
 8000156:	2b01      	cmp	r3, #1
 8000158:	d135      	bne.n	80001c6 <SetMode+0x7a>
		if(counterMode == 2){
 800015a:	4b1c      	ldr	r3, [pc, #112]	; (80001cc <SetMode+0x80>)
 800015c:	681b      	ldr	r3, [r3, #0]
 800015e:	2b02      	cmp	r3, #2
 8000160:	d10c      	bne.n	800017c <SetMode+0x30>
			mode2_flag = 1;
 8000162:	4b1b      	ldr	r3, [pc, #108]	; (80001d0 <SetMode+0x84>)
 8000164:	2201      	movs	r2, #1
 8000166:	601a      	str	r2, [r3, #0]
			mode3_flag = 0;
 8000168:	4b1a      	ldr	r3, [pc, #104]	; (80001d4 <SetMode+0x88>)
 800016a:	2200      	movs	r2, #0
 800016c:	601a      	str	r2, [r3, #0]
			mode4_flag = 0;
 800016e:	4b1a      	ldr	r3, [pc, #104]	; (80001d8 <SetMode+0x8c>)
 8000170:	2200      	movs	r2, #0
 8000172:	601a      	str	r2, [r3, #0]
			save_counterTimeSet = counterTimeSet;
 8000174:	4b19      	ldr	r3, [pc, #100]	; (80001dc <SetMode+0x90>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4a19      	ldr	r2, [pc, #100]	; (80001e0 <SetMode+0x94>)
 800017a:	6013      	str	r3, [r2, #0]
		}
		if(counterMode == 3){
 800017c:	4b13      	ldr	r3, [pc, #76]	; (80001cc <SetMode+0x80>)
 800017e:	681b      	ldr	r3, [r3, #0]
 8000180:	2b03      	cmp	r3, #3
 8000182:	d10c      	bne.n	800019e <SetMode+0x52>
			mode2_flag = 0;
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <SetMode+0x84>)
 8000186:	2200      	movs	r2, #0
 8000188:	601a      	str	r2, [r3, #0]
			mode3_flag = 1;
 800018a:	4b12      	ldr	r3, [pc, #72]	; (80001d4 <SetMode+0x88>)
 800018c:	2201      	movs	r2, #1
 800018e:	601a      	str	r2, [r3, #0]
			mode4_flag = 0;
 8000190:	4b11      	ldr	r3, [pc, #68]	; (80001d8 <SetMode+0x8c>)
 8000192:	2200      	movs	r2, #0
 8000194:	601a      	str	r2, [r3, #0]
			save_counterTimeSet = counterTimeSet;
 8000196:	4b11      	ldr	r3, [pc, #68]	; (80001dc <SetMode+0x90>)
 8000198:	681b      	ldr	r3, [r3, #0]
 800019a:	4a11      	ldr	r2, [pc, #68]	; (80001e0 <SetMode+0x94>)
 800019c:	6013      	str	r3, [r2, #0]
		}
		if(counterMode == 4){
 800019e:	4b0b      	ldr	r3, [pc, #44]	; (80001cc <SetMode+0x80>)
 80001a0:	681b      	ldr	r3, [r3, #0]
 80001a2:	2b04      	cmp	r3, #4
 80001a4:	d10f      	bne.n	80001c6 <SetMode+0x7a>
			mode1_flag = 1;
 80001a6:	4b0f      	ldr	r3, [pc, #60]	; (80001e4 <SetMode+0x98>)
 80001a8:	2201      	movs	r2, #1
 80001aa:	601a      	str	r2, [r3, #0]
			mode2_flag = 0;
 80001ac:	4b08      	ldr	r3, [pc, #32]	; (80001d0 <SetMode+0x84>)
 80001ae:	2200      	movs	r2, #0
 80001b0:	601a      	str	r2, [r3, #0]
			mode3_flag = 0;
 80001b2:	4b08      	ldr	r3, [pc, #32]	; (80001d4 <SetMode+0x88>)
 80001b4:	2200      	movs	r2, #0
 80001b6:	601a      	str	r2, [r3, #0]
			mode4_flag = 1;
 80001b8:	4b07      	ldr	r3, [pc, #28]	; (80001d8 <SetMode+0x8c>)
 80001ba:	2201      	movs	r2, #1
 80001bc:	601a      	str	r2, [r3, #0]
			save_counterTimeSet = counterTimeSet;
 80001be:	4b07      	ldr	r3, [pc, #28]	; (80001dc <SetMode+0x90>)
 80001c0:	681b      	ldr	r3, [r3, #0]
 80001c2:	4a07      	ldr	r2, [pc, #28]	; (80001e0 <SetMode+0x94>)
 80001c4:	6013      	str	r3, [r2, #0]
		}
	}
}
 80001c6:	bf00      	nop
 80001c8:	bd80      	pop	{r7, pc}
 80001ca:	bf00      	nop
 80001cc:	20000064 	.word	0x20000064
 80001d0:	20000040 	.word	0x20000040
 80001d4:	20000044 	.word	0x20000044
 80001d8:	20000048 	.word	0x20000048
 80001dc:	20000068 	.word	0x20000068
 80001e0:	2000004c 	.word	0x2000004c
 80001e4:	2000003c 	.word	0x2000003c

080001e8 <ChangeModeX>:
void ChangeModeX(void){
 80001e8:	b580      	push	{r7, lr}
 80001ea:	af00      	add	r7, sp, #0
	if(counterMode == 1){
 80001ec:	4b1a      	ldr	r3, [pc, #104]	; (8000258 <ChangeModeX+0x70>)
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	2b01      	cmp	r3, #1
 80001f2:	d102      	bne.n	80001fa <ChangeModeX+0x12>
		mode4_flag = 0;
 80001f4:	4b19      	ldr	r3, [pc, #100]	; (800025c <ChangeModeX+0x74>)
 80001f6:	2200      	movs	r2, #0
 80001f8:	601a      	str	r2, [r3, #0]
	}
	if(counterMode == 2){
 80001fa:	4b17      	ldr	r3, [pc, #92]	; (8000258 <ChangeModeX+0x70>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	2b02      	cmp	r3, #2
 8000200:	d108      	bne.n	8000214 <ChangeModeX+0x2c>
		if(mode2_flag == 0){
 8000202:	4b17      	ldr	r3, [pc, #92]	; (8000260 <ChangeModeX+0x78>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	2b00      	cmp	r3, #0
 8000208:	d104      	bne.n	8000214 <ChangeModeX+0x2c>
			statusx = CONF_RED;
 800020a:	4b16      	ldr	r3, [pc, #88]	; (8000264 <ChangeModeX+0x7c>)
 800020c:	2208      	movs	r2, #8
 800020e:	601a      	str	r2, [r3, #0]
			InitLED();
 8000210:	f001 fbe2 	bl	80019d8 <InitLED>
		}
	}
	if(counterMode == 3){
 8000214:	4b10      	ldr	r3, [pc, #64]	; (8000258 <ChangeModeX+0x70>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	2b03      	cmp	r3, #3
 800021a:	d10b      	bne.n	8000234 <ChangeModeX+0x4c>
		mode2_flag = 0;
 800021c:	4b10      	ldr	r3, [pc, #64]	; (8000260 <ChangeModeX+0x78>)
 800021e:	2200      	movs	r2, #0
 8000220:	601a      	str	r2, [r3, #0]
		if(mode3_flag == 0){
 8000222:	4b11      	ldr	r3, [pc, #68]	; (8000268 <ChangeModeX+0x80>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	2b00      	cmp	r3, #0
 8000228:	d104      	bne.n	8000234 <ChangeModeX+0x4c>
			statusx = CONF_GREEN;
 800022a:	4b0e      	ldr	r3, [pc, #56]	; (8000264 <ChangeModeX+0x7c>)
 800022c:	2209      	movs	r2, #9
 800022e:	601a      	str	r2, [r3, #0]
			InitLED();
 8000230:	f001 fbd2 	bl	80019d8 <InitLED>
		}
	}
	if(counterMode == 4){
 8000234:	4b08      	ldr	r3, [pc, #32]	; (8000258 <ChangeModeX+0x70>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	2b04      	cmp	r3, #4
 800023a:	d10b      	bne.n	8000254 <ChangeModeX+0x6c>
		mode3_flag = 0;
 800023c:	4b0a      	ldr	r3, [pc, #40]	; (8000268 <ChangeModeX+0x80>)
 800023e:	2200      	movs	r2, #0
 8000240:	601a      	str	r2, [r3, #0]
		if(mode4_flag == 0){
 8000242:	4b06      	ldr	r3, [pc, #24]	; (800025c <ChangeModeX+0x74>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	2b00      	cmp	r3, #0
 8000248:	d104      	bne.n	8000254 <ChangeModeX+0x6c>
			statusx = CONF_YELLOW;
 800024a:	4b06      	ldr	r3, [pc, #24]	; (8000264 <ChangeModeX+0x7c>)
 800024c:	220a      	movs	r2, #10
 800024e:	601a      	str	r2, [r3, #0]
			InitLED();
 8000250:	f001 fbc2 	bl	80019d8 <InitLED>
		}
	}
}
 8000254:	bf00      	nop
 8000256:	bd80      	pop	{r7, pc}
 8000258:	20000064 	.word	0x20000064
 800025c:	20000048 	.word	0x20000048
 8000260:	20000040 	.word	0x20000040
 8000264:	20000050 	.word	0x20000050
 8000268:	20000044 	.word	0x20000044

0800026c <ChangeModeY>:
void ChangeModeY(void){
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0
	if(counterMode == 1){
 8000270:	4b35      	ldr	r3, [pc, #212]	; (8000348 <ChangeModeY+0xdc>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	2b01      	cmp	r3, #1
 8000276:	d137      	bne.n	80002e8 <ChangeModeY+0x7c>
		mode4_flag = 0;
 8000278:	4b34      	ldr	r3, [pc, #208]	; (800034c <ChangeModeY+0xe0>)
 800027a:	2200      	movs	r2, #0
 800027c:	601a      	str	r2, [r3, #0]
		if(mode1_flag == 1){
 800027e:	4b34      	ldr	r3, [pc, #208]	; (8000350 <ChangeModeY+0xe4>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	2b01      	cmp	r3, #1
 8000284:	d130      	bne.n	80002e8 <ChangeModeY+0x7c>
			mode1_flag = 0;
 8000286:	4b32      	ldr	r3, [pc, #200]	; (8000350 <ChangeModeY+0xe4>)
 8000288:	2200      	movs	r2, #0
 800028a:	601a      	str	r2, [r3, #0]
			statusx = AUTO_RED;
 800028c:	4b31      	ldr	r3, [pc, #196]	; (8000354 <ChangeModeY+0xe8>)
 800028e:	2202      	movs	r2, #2
 8000290:	601a      	str	r2, [r3, #0]
			setTimer(0,5000);
 8000292:	f241 3188 	movw	r1, #5000	; 0x1388
 8000296:	2000      	movs	r0, #0
 8000298:	f001 fdde 	bl	8001e58 <setTimer>
			setTimer(2,100);
 800029c:	2164      	movs	r1, #100	; 0x64
 800029e:	2002      	movs	r0, #2
 80002a0:	f001 fdda 	bl	8001e58 <setTimer>
			number_clock1 = timer_counter[0]/100;
 80002a4:	4b2c      	ldr	r3, [pc, #176]	; (8000358 <ChangeModeY+0xec>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	4a2c      	ldr	r2, [pc, #176]	; (800035c <ChangeModeY+0xf0>)
 80002aa:	fb82 1203 	smull	r1, r2, r2, r3
 80002ae:	1152      	asrs	r2, r2, #5
 80002b0:	17db      	asrs	r3, r3, #31
 80002b2:	1ad3      	subs	r3, r2, r3
 80002b4:	4a2a      	ldr	r2, [pc, #168]	; (8000360 <ChangeModeY+0xf4>)
 80002b6:	6013      	str	r3, [r2, #0]
			statusy = AUTO_GREEN;
 80002b8:	4b2a      	ldr	r3, [pc, #168]	; (8000364 <ChangeModeY+0xf8>)
 80002ba:	2203      	movs	r2, #3
 80002bc:	601a      	str	r2, [r3, #0]
			setTimer(1,3000);
 80002be:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80002c2:	2001      	movs	r0, #1
 80002c4:	f001 fdc8 	bl	8001e58 <setTimer>
			setTimer(3,100);
 80002c8:	2164      	movs	r1, #100	; 0x64
 80002ca:	2003      	movs	r0, #3
 80002cc:	f001 fdc4 	bl	8001e58 <setTimer>
			number_clock2 = timer_counter[1]/100;
 80002d0:	4b21      	ldr	r3, [pc, #132]	; (8000358 <ChangeModeY+0xec>)
 80002d2:	685b      	ldr	r3, [r3, #4]
 80002d4:	4a21      	ldr	r2, [pc, #132]	; (800035c <ChangeModeY+0xf0>)
 80002d6:	fb82 1203 	smull	r1, r2, r2, r3
 80002da:	1152      	asrs	r2, r2, #5
 80002dc:	17db      	asrs	r3, r3, #31
 80002de:	1ad3      	subs	r3, r2, r3
 80002e0:	4a21      	ldr	r2, [pc, #132]	; (8000368 <ChangeModeY+0xfc>)
 80002e2:	6013      	str	r3, [r2, #0]
			InitLED();
 80002e4:	f001 fb78 	bl	80019d8 <InitLED>
		}
	}
	if(counterMode == 2){
 80002e8:	4b17      	ldr	r3, [pc, #92]	; (8000348 <ChangeModeY+0xdc>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	2b02      	cmp	r3, #2
 80002ee:	d108      	bne.n	8000302 <ChangeModeY+0x96>
		if(mode2_flag == 0){
 80002f0:	4b1e      	ldr	r3, [pc, #120]	; (800036c <ChangeModeY+0x100>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d104      	bne.n	8000302 <ChangeModeY+0x96>
			statusy = CONF_RED;
 80002f8:	4b1a      	ldr	r3, [pc, #104]	; (8000364 <ChangeModeY+0xf8>)
 80002fa:	2208      	movs	r2, #8
 80002fc:	601a      	str	r2, [r3, #0]
			InitLED();
 80002fe:	f001 fb6b 	bl	80019d8 <InitLED>
		}
	}
	if(counterMode == 3){
 8000302:	4b11      	ldr	r3, [pc, #68]	; (8000348 <ChangeModeY+0xdc>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	2b03      	cmp	r3, #3
 8000308:	d10b      	bne.n	8000322 <ChangeModeY+0xb6>
		mode2_flag = 0;
 800030a:	4b18      	ldr	r3, [pc, #96]	; (800036c <ChangeModeY+0x100>)
 800030c:	2200      	movs	r2, #0
 800030e:	601a      	str	r2, [r3, #0]
		if(mode3_flag == 0){
 8000310:	4b17      	ldr	r3, [pc, #92]	; (8000370 <ChangeModeY+0x104>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	2b00      	cmp	r3, #0
 8000316:	d104      	bne.n	8000322 <ChangeModeY+0xb6>
			statusy = CONF_GREEN;
 8000318:	4b12      	ldr	r3, [pc, #72]	; (8000364 <ChangeModeY+0xf8>)
 800031a:	2209      	movs	r2, #9
 800031c:	601a      	str	r2, [r3, #0]
			InitLED();
 800031e:	f001 fb5b 	bl	80019d8 <InitLED>
		}
	}
	if(counterMode == 4){
 8000322:	4b09      	ldr	r3, [pc, #36]	; (8000348 <ChangeModeY+0xdc>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	2b04      	cmp	r3, #4
 8000328:	d10b      	bne.n	8000342 <ChangeModeY+0xd6>
		mode3_flag = 0;
 800032a:	4b11      	ldr	r3, [pc, #68]	; (8000370 <ChangeModeY+0x104>)
 800032c:	2200      	movs	r2, #0
 800032e:	601a      	str	r2, [r3, #0]
		if(mode4_flag == 0){
 8000330:	4b06      	ldr	r3, [pc, #24]	; (800034c <ChangeModeY+0xe0>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	2b00      	cmp	r3, #0
 8000336:	d104      	bne.n	8000342 <ChangeModeY+0xd6>
			statusy = CONF_YELLOW;
 8000338:	4b0a      	ldr	r3, [pc, #40]	; (8000364 <ChangeModeY+0xf8>)
 800033a:	220a      	movs	r2, #10
 800033c:	601a      	str	r2, [r3, #0]
			InitLED();
 800033e:	f001 fb4b 	bl	80019d8 <InitLED>
		}
	}
}
 8000342:	bf00      	nop
 8000344:	bd80      	pop	{r7, pc}
 8000346:	bf00      	nop
 8000348:	20000064 	.word	0x20000064
 800034c:	20000048 	.word	0x20000048
 8000350:	2000003c 	.word	0x2000003c
 8000354:	20000050 	.word	0x20000050
 8000358:	200000d8 	.word	0x200000d8
 800035c:	51eb851f 	.word	0x51eb851f
 8000360:	20000058 	.word	0x20000058
 8000364:	20000054 	.word	0x20000054
 8000368:	2000005c 	.word	0x2000005c
 800036c:	20000040 	.word	0x20000040
 8000370:	20000044 	.word	0x20000044

08000374 <fsm_clock>:
void fsm_clock(void){
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0
	if(timer_flag[2] == 1){
 8000378:	4b4e      	ldr	r3, [pc, #312]	; (80004b4 <fsm_clock+0x140>)
 800037a:	689b      	ldr	r3, [r3, #8]
 800037c:	2b01      	cmp	r3, #1
 800037e:	d118      	bne.n	80003b2 <fsm_clock+0x3e>
		number_clock1--;
 8000380:	4b4d      	ldr	r3, [pc, #308]	; (80004b8 <fsm_clock+0x144>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	3b01      	subs	r3, #1
 8000386:	4a4c      	ldr	r2, [pc, #304]	; (80004b8 <fsm_clock+0x144>)
 8000388:	6013      	str	r3, [r2, #0]
		if(number_clock1 <= 0){
 800038a:	4b4b      	ldr	r3, [pc, #300]	; (80004b8 <fsm_clock+0x144>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	2b00      	cmp	r3, #0
 8000390:	dc0a      	bgt.n	80003a8 <fsm_clock+0x34>
			number_clock1 = timer_counter[0]/100 + 1;
 8000392:	4b4a      	ldr	r3, [pc, #296]	; (80004bc <fsm_clock+0x148>)
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	4a4a      	ldr	r2, [pc, #296]	; (80004c0 <fsm_clock+0x14c>)
 8000398:	fb82 1203 	smull	r1, r2, r2, r3
 800039c:	1152      	asrs	r2, r2, #5
 800039e:	17db      	asrs	r3, r3, #31
 80003a0:	1ad3      	subs	r3, r2, r3
 80003a2:	3301      	adds	r3, #1
 80003a4:	4a44      	ldr	r2, [pc, #272]	; (80004b8 <fsm_clock+0x144>)
 80003a6:	6013      	str	r3, [r2, #0]
		}
		setTimer(2, 1000);
 80003a8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80003ac:	2002      	movs	r0, #2
 80003ae:	f001 fd53 	bl	8001e58 <setTimer>
	}
	if(timer_flag[3] == 1){
 80003b2:	4b40      	ldr	r3, [pc, #256]	; (80004b4 <fsm_clock+0x140>)
 80003b4:	68db      	ldr	r3, [r3, #12]
 80003b6:	2b01      	cmp	r3, #1
 80003b8:	d118      	bne.n	80003ec <fsm_clock+0x78>
		number_clock2--;
 80003ba:	4b42      	ldr	r3, [pc, #264]	; (80004c4 <fsm_clock+0x150>)
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	3b01      	subs	r3, #1
 80003c0:	4a40      	ldr	r2, [pc, #256]	; (80004c4 <fsm_clock+0x150>)
 80003c2:	6013      	str	r3, [r2, #0]
		if(number_clock2 <= 0){
 80003c4:	4b3f      	ldr	r3, [pc, #252]	; (80004c4 <fsm_clock+0x150>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	dc0a      	bgt.n	80003e2 <fsm_clock+0x6e>
			number_clock2 = timer_counter[1]/100 + 1;
 80003cc:	4b3b      	ldr	r3, [pc, #236]	; (80004bc <fsm_clock+0x148>)
 80003ce:	685b      	ldr	r3, [r3, #4]
 80003d0:	4a3b      	ldr	r2, [pc, #236]	; (80004c0 <fsm_clock+0x14c>)
 80003d2:	fb82 1203 	smull	r1, r2, r2, r3
 80003d6:	1152      	asrs	r2, r2, #5
 80003d8:	17db      	asrs	r3, r3, #31
 80003da:	1ad3      	subs	r3, r2, r3
 80003dc:	3301      	adds	r3, #1
 80003de:	4a39      	ldr	r2, [pc, #228]	; (80004c4 <fsm_clock+0x150>)
 80003e0:	6013      	str	r3, [r2, #0]
		}
		setTimer(3, 1000);
 80003e2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80003e6:	2003      	movs	r0, #3
 80003e8:	f001 fd36 	bl	8001e58 <setTimer>
	}
	if(timer_flag[6] == 1){
 80003ec:	4b31      	ldr	r3, [pc, #196]	; (80004b4 <fsm_clock+0x140>)
 80003ee:	699b      	ldr	r3, [r3, #24]
 80003f0:	2b01      	cmp	r3, #1
 80003f2:	d15d      	bne.n	80004b0 <fsm_clock+0x13c>
		if(DisplayCounter == 0){
 80003f4:	4b34      	ldr	r3, [pc, #208]	; (80004c8 <fsm_clock+0x154>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d10b      	bne.n	8000414 <fsm_clock+0xa0>
			Display7Seg(number_clock2/10);
 80003fc:	4b31      	ldr	r3, [pc, #196]	; (80004c4 <fsm_clock+0x150>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	4a32      	ldr	r2, [pc, #200]	; (80004cc <fsm_clock+0x158>)
 8000402:	fb82 1203 	smull	r1, r2, r2, r3
 8000406:	1092      	asrs	r2, r2, #2
 8000408:	17db      	asrs	r3, r3, #31
 800040a:	1ad3      	subs	r3, r2, r3
 800040c:	4618      	mov	r0, r3
 800040e:	f000 ffdd 	bl	80013cc <Display7Seg>
 8000412:	e038      	b.n	8000486 <fsm_clock+0x112>
		}
		else if(DisplayCounter == 1){
 8000414:	4b2c      	ldr	r3, [pc, #176]	; (80004c8 <fsm_clock+0x154>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	2b01      	cmp	r3, #1
 800041a:	d110      	bne.n	800043e <fsm_clock+0xca>
			Display7Seg(number_clock2%10);
 800041c:	4b29      	ldr	r3, [pc, #164]	; (80004c4 <fsm_clock+0x150>)
 800041e:	681a      	ldr	r2, [r3, #0]
 8000420:	4b2a      	ldr	r3, [pc, #168]	; (80004cc <fsm_clock+0x158>)
 8000422:	fb83 1302 	smull	r1, r3, r3, r2
 8000426:	1099      	asrs	r1, r3, #2
 8000428:	17d3      	asrs	r3, r2, #31
 800042a:	1ac9      	subs	r1, r1, r3
 800042c:	460b      	mov	r3, r1
 800042e:	009b      	lsls	r3, r3, #2
 8000430:	440b      	add	r3, r1
 8000432:	005b      	lsls	r3, r3, #1
 8000434:	1ad1      	subs	r1, r2, r3
 8000436:	4608      	mov	r0, r1
 8000438:	f000 ffc8 	bl	80013cc <Display7Seg>
 800043c:	e023      	b.n	8000486 <fsm_clock+0x112>
		}
		else if(DisplayCounter == 2){
 800043e:	4b22      	ldr	r3, [pc, #136]	; (80004c8 <fsm_clock+0x154>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	2b02      	cmp	r3, #2
 8000444:	d10b      	bne.n	800045e <fsm_clock+0xea>

			Display7Seg(number_clock1/10);
 8000446:	4b1c      	ldr	r3, [pc, #112]	; (80004b8 <fsm_clock+0x144>)
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	4a20      	ldr	r2, [pc, #128]	; (80004cc <fsm_clock+0x158>)
 800044c:	fb82 1203 	smull	r1, r2, r2, r3
 8000450:	1092      	asrs	r2, r2, #2
 8000452:	17db      	asrs	r3, r3, #31
 8000454:	1ad3      	subs	r3, r2, r3
 8000456:	4618      	mov	r0, r3
 8000458:	f000 ffb8 	bl	80013cc <Display7Seg>
 800045c:	e013      	b.n	8000486 <fsm_clock+0x112>
		}
		else if(DisplayCounter == 3){
 800045e:	4b1a      	ldr	r3, [pc, #104]	; (80004c8 <fsm_clock+0x154>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	2b03      	cmp	r3, #3
 8000464:	d10f      	bne.n	8000486 <fsm_clock+0x112>
			Display7Seg(number_clock1%10);
 8000466:	4b14      	ldr	r3, [pc, #80]	; (80004b8 <fsm_clock+0x144>)
 8000468:	681a      	ldr	r2, [r3, #0]
 800046a:	4b18      	ldr	r3, [pc, #96]	; (80004cc <fsm_clock+0x158>)
 800046c:	fb83 1302 	smull	r1, r3, r3, r2
 8000470:	1099      	asrs	r1, r3, #2
 8000472:	17d3      	asrs	r3, r2, #31
 8000474:	1ac9      	subs	r1, r1, r3
 8000476:	460b      	mov	r3, r1
 8000478:	009b      	lsls	r3, r3, #2
 800047a:	440b      	add	r3, r1
 800047c:	005b      	lsls	r3, r3, #1
 800047e:	1ad1      	subs	r1, r2, r3
 8000480:	4608      	mov	r0, r1
 8000482:	f000 ffa3 	bl	80013cc <Display7Seg>

		}
		Display(DisplayCounter);
 8000486:	4b10      	ldr	r3, [pc, #64]	; (80004c8 <fsm_clock+0x154>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	4618      	mov	r0, r3
 800048c:	f001 f964 	bl	8001758 <Display>
		DisplayCounter++;
 8000490:	4b0d      	ldr	r3, [pc, #52]	; (80004c8 <fsm_clock+0x154>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	3301      	adds	r3, #1
 8000496:	4a0c      	ldr	r2, [pc, #48]	; (80004c8 <fsm_clock+0x154>)
 8000498:	6013      	str	r3, [r2, #0]
		if(DisplayCounter > 4){
 800049a:	4b0b      	ldr	r3, [pc, #44]	; (80004c8 <fsm_clock+0x154>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	2b04      	cmp	r3, #4
 80004a0:	dd02      	ble.n	80004a8 <fsm_clock+0x134>
			DisplayCounter = 0;
 80004a2:	4b09      	ldr	r3, [pc, #36]	; (80004c8 <fsm_clock+0x154>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	601a      	str	r2, [r3, #0]
		}
		setTimer(6, 250);
 80004a8:	21fa      	movs	r1, #250	; 0xfa
 80004aa:	2006      	movs	r0, #6
 80004ac:	f001 fcd4 	bl	8001e58 <setTimer>
	}
}
 80004b0:	bf00      	nop
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	20000100 	.word	0x20000100
 80004b8:	20000058 	.word	0x20000058
 80004bc:	200000d8 	.word	0x200000d8
 80004c0:	51eb851f 	.word	0x51eb851f
 80004c4:	2000005c 	.word	0x2000005c
 80004c8:	20000038 	.word	0x20000038
 80004cc:	66666667 	.word	0x66666667

080004d0 <fsm_mode>:
void fsm_mode(void){
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
	if(timer_flag[6] == 1){
 80004d4:	4b28      	ldr	r3, [pc, #160]	; (8000578 <fsm_mode+0xa8>)
 80004d6:	699b      	ldr	r3, [r3, #24]
 80004d8:	2b01      	cmp	r3, #1
 80004da:	d14a      	bne.n	8000572 <fsm_mode+0xa2>
		Display(DisplayCounter);
 80004dc:	4b27      	ldr	r3, [pc, #156]	; (800057c <fsm_mode+0xac>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4618      	mov	r0, r3
 80004e2:	f001 f939 	bl	8001758 <Display>
		if(DisplayCounter == 0){
 80004e6:	4b25      	ldr	r3, [pc, #148]	; (800057c <fsm_mode+0xac>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d103      	bne.n	80004f6 <fsm_mode+0x26>
			Display7Seg(0);
 80004ee:	2000      	movs	r0, #0
 80004f0:	f000 ff6c 	bl	80013cc <Display7Seg>
 80004f4:	e02d      	b.n	8000552 <fsm_mode+0x82>
		}
		else if(DisplayCounter == 1){
 80004f6:	4b21      	ldr	r3, [pc, #132]	; (800057c <fsm_mode+0xac>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	2b01      	cmp	r3, #1
 80004fc:	d105      	bne.n	800050a <fsm_mode+0x3a>
			Display7Seg(counterMode);
 80004fe:	4b20      	ldr	r3, [pc, #128]	; (8000580 <fsm_mode+0xb0>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	4618      	mov	r0, r3
 8000504:	f000 ff62 	bl	80013cc <Display7Seg>
 8000508:	e023      	b.n	8000552 <fsm_mode+0x82>
		}
		else if(DisplayCounter == 2){
 800050a:	4b1c      	ldr	r3, [pc, #112]	; (800057c <fsm_mode+0xac>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	2b02      	cmp	r3, #2
 8000510:	d10b      	bne.n	800052a <fsm_mode+0x5a>
			Display7Seg(counterTimeSet/10);
 8000512:	4b1c      	ldr	r3, [pc, #112]	; (8000584 <fsm_mode+0xb4>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	4a1c      	ldr	r2, [pc, #112]	; (8000588 <fsm_mode+0xb8>)
 8000518:	fb82 1203 	smull	r1, r2, r2, r3
 800051c:	1092      	asrs	r2, r2, #2
 800051e:	17db      	asrs	r3, r3, #31
 8000520:	1ad3      	subs	r3, r2, r3
 8000522:	4618      	mov	r0, r3
 8000524:	f000 ff52 	bl	80013cc <Display7Seg>
 8000528:	e013      	b.n	8000552 <fsm_mode+0x82>
		}
		else if(DisplayCounter == 3){
 800052a:	4b14      	ldr	r3, [pc, #80]	; (800057c <fsm_mode+0xac>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	2b03      	cmp	r3, #3
 8000530:	d10f      	bne.n	8000552 <fsm_mode+0x82>
			Display7Seg(counterTimeSet%10);
 8000532:	4b14      	ldr	r3, [pc, #80]	; (8000584 <fsm_mode+0xb4>)
 8000534:	681a      	ldr	r2, [r3, #0]
 8000536:	4b14      	ldr	r3, [pc, #80]	; (8000588 <fsm_mode+0xb8>)
 8000538:	fb83 1302 	smull	r1, r3, r3, r2
 800053c:	1099      	asrs	r1, r3, #2
 800053e:	17d3      	asrs	r3, r2, #31
 8000540:	1ac9      	subs	r1, r1, r3
 8000542:	460b      	mov	r3, r1
 8000544:	009b      	lsls	r3, r3, #2
 8000546:	440b      	add	r3, r1
 8000548:	005b      	lsls	r3, r3, #1
 800054a:	1ad1      	subs	r1, r2, r3
 800054c:	4608      	mov	r0, r1
 800054e:	f000 ff3d 	bl	80013cc <Display7Seg>
		}
		DisplayCounter++;
 8000552:	4b0a      	ldr	r3, [pc, #40]	; (800057c <fsm_mode+0xac>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	3301      	adds	r3, #1
 8000558:	4a08      	ldr	r2, [pc, #32]	; (800057c <fsm_mode+0xac>)
 800055a:	6013      	str	r3, [r2, #0]
		if(DisplayCounter > 4){
 800055c:	4b07      	ldr	r3, [pc, #28]	; (800057c <fsm_mode+0xac>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	2b04      	cmp	r3, #4
 8000562:	dd02      	ble.n	800056a <fsm_mode+0x9a>
			DisplayCounter = 0;
 8000564:	4b05      	ldr	r3, [pc, #20]	; (800057c <fsm_mode+0xac>)
 8000566:	2200      	movs	r2, #0
 8000568:	601a      	str	r2, [r3, #0]
		}
		setTimer(6, 100);
 800056a:	2164      	movs	r1, #100	; 0x64
 800056c:	2006      	movs	r0, #6
 800056e:	f001 fc73 	bl	8001e58 <setTimer>
	}
}
 8000572:	bf00      	nop
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	20000100 	.word	0x20000100
 800057c:	20000038 	.word	0x20000038
 8000580:	20000064 	.word	0x20000064
 8000584:	20000068 	.word	0x20000068
 8000588:	66666667 	.word	0x66666667

0800058c <fsm_automatic_runx>:
void fsm_automatic_runx(){
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
	switch(statusx){
 8000590:	4b48      	ldr	r3, [pc, #288]	; (80006b4 <fsm_automatic_runx+0x128>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	3b01      	subs	r3, #1
 8000596:	2b03      	cmp	r3, #3
 8000598:	f200 8082 	bhi.w	80006a0 <fsm_automatic_runx+0x114>
 800059c:	a201      	add	r2, pc, #4	; (adr r2, 80005a4 <fsm_automatic_runx+0x18>)
 800059e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005a2:	bf00      	nop
 80005a4:	080005b5 	.word	0x080005b5
 80005a8:	080005e1 	.word	0x080005e1
 80005ac:	08000621 	.word	0x08000621
 80005b0:	08000661 	.word	0x08000661
	case INIT:
		statusx = AUTO_RED;
 80005b4:	4b3f      	ldr	r3, [pc, #252]	; (80006b4 <fsm_automatic_runx+0x128>)
 80005b6:	2202      	movs	r2, #2
 80005b8:	601a      	str	r2, [r3, #0]
		number_clock1 = Time_red;
 80005ba:	4b3f      	ldr	r3, [pc, #252]	; (80006b8 <fsm_automatic_runx+0x12c>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4a3f      	ldr	r2, [pc, #252]	; (80006bc <fsm_automatic_runx+0x130>)
 80005c0:	6013      	str	r3, [r2, #0]
		setTimer(0,number_clock1 * 1000);
 80005c2:	4b3e      	ldr	r3, [pc, #248]	; (80006bc <fsm_automatic_runx+0x130>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005ca:	fb02 f303 	mul.w	r3, r2, r3
 80005ce:	4619      	mov	r1, r3
 80005d0:	2000      	movs	r0, #0
 80005d2:	f001 fc41 	bl	8001e58 <setTimer>
		setTimer(2,100);
 80005d6:	2164      	movs	r1, #100	; 0x64
 80005d8:	2002      	movs	r0, #2
 80005da:	f001 fc3d 	bl	8001e58 <setTimer>
		break;
 80005de:	e066      	b.n	80006ae <fsm_automatic_runx+0x122>
	case AUTO_RED:
		DisplayREDX();
 80005e0:	f001 f938 	bl	8001854 <DisplayREDX>
		fsm_clock();
 80005e4:	f7ff fec6 	bl	8000374 <fsm_clock>
		SetMode();
 80005e8:	f7ff fdb0 	bl	800014c <SetMode>
		ChangeModeX();
 80005ec:	f7ff fdfc 	bl	80001e8 <ChangeModeX>
		if(timer_flag[0] == 1){
 80005f0:	4b33      	ldr	r3, [pc, #204]	; (80006c0 <fsm_automatic_runx+0x134>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d155      	bne.n	80006a4 <fsm_automatic_runx+0x118>
			InitLED();
 80005f8:	f001 f9ee 	bl	80019d8 <InitLED>
			statusx = AUTO_GREEN;
 80005fc:	4b2d      	ldr	r3, [pc, #180]	; (80006b4 <fsm_automatic_runx+0x128>)
 80005fe:	2203      	movs	r2, #3
 8000600:	601a      	str	r2, [r3, #0]
			number_clock1 = Time_green;
 8000602:	4b30      	ldr	r3, [pc, #192]	; (80006c4 <fsm_automatic_runx+0x138>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	4a2d      	ldr	r2, [pc, #180]	; (80006bc <fsm_automatic_runx+0x130>)
 8000608:	6013      	str	r3, [r2, #0]
			setTimer(0,number_clock1 * 1000);
 800060a:	4b2c      	ldr	r3, [pc, #176]	; (80006bc <fsm_automatic_runx+0x130>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000612:	fb02 f303 	mul.w	r3, r2, r3
 8000616:	4619      	mov	r1, r3
 8000618:	2000      	movs	r0, #0
 800061a:	f001 fc1d 	bl	8001e58 <setTimer>
		}
		break;
 800061e:	e041      	b.n	80006a4 <fsm_automatic_runx+0x118>
	case AUTO_GREEN:
		DisplayGREENX();
 8000620:	f001 f944 	bl	80018ac <DisplayGREENX>
		fsm_clock();
 8000624:	f7ff fea6 	bl	8000374 <fsm_clock>
		SetMode();
 8000628:	f7ff fd90 	bl	800014c <SetMode>
		ChangeModeX();
 800062c:	f7ff fddc 	bl	80001e8 <ChangeModeX>
		if(timer_flag[0] == 1){
 8000630:	4b23      	ldr	r3, [pc, #140]	; (80006c0 <fsm_automatic_runx+0x134>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	2b01      	cmp	r3, #1
 8000636:	d137      	bne.n	80006a8 <fsm_automatic_runx+0x11c>
			InitLED();
 8000638:	f001 f9ce 	bl	80019d8 <InitLED>
			statusx = AUTO_YELLOW;
 800063c:	4b1d      	ldr	r3, [pc, #116]	; (80006b4 <fsm_automatic_runx+0x128>)
 800063e:	2204      	movs	r2, #4
 8000640:	601a      	str	r2, [r3, #0]
			number_clock1 = Time_yellow;
 8000642:	4b21      	ldr	r3, [pc, #132]	; (80006c8 <fsm_automatic_runx+0x13c>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4a1d      	ldr	r2, [pc, #116]	; (80006bc <fsm_automatic_runx+0x130>)
 8000648:	6013      	str	r3, [r2, #0]
			setTimer(0,number_clock1 * 1000);
 800064a:	4b1c      	ldr	r3, [pc, #112]	; (80006bc <fsm_automatic_runx+0x130>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000652:	fb02 f303 	mul.w	r3, r2, r3
 8000656:	4619      	mov	r1, r3
 8000658:	2000      	movs	r0, #0
 800065a:	f001 fbfd 	bl	8001e58 <setTimer>
		}
		break;
 800065e:	e023      	b.n	80006a8 <fsm_automatic_runx+0x11c>
	case AUTO_YELLOW:
		DisplayYELLOWX();
 8000660:	f001 f90e 	bl	8001880 <DisplayYELLOWX>
		fsm_clock();
 8000664:	f7ff fe86 	bl	8000374 <fsm_clock>
		SetMode();
 8000668:	f7ff fd70 	bl	800014c <SetMode>
		ChangeModeX();
 800066c:	f7ff fdbc 	bl	80001e8 <ChangeModeX>
		if(timer_flag[0] == 1){
 8000670:	4b13      	ldr	r3, [pc, #76]	; (80006c0 <fsm_automatic_runx+0x134>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	2b01      	cmp	r3, #1
 8000676:	d119      	bne.n	80006ac <fsm_automatic_runx+0x120>
			InitLED();
 8000678:	f001 f9ae 	bl	80019d8 <InitLED>
			statusx = AUTO_RED;
 800067c:	4b0d      	ldr	r3, [pc, #52]	; (80006b4 <fsm_automatic_runx+0x128>)
 800067e:	2202      	movs	r2, #2
 8000680:	601a      	str	r2, [r3, #0]
			number_clock1 = Time_red;
 8000682:	4b0d      	ldr	r3, [pc, #52]	; (80006b8 <fsm_automatic_runx+0x12c>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4a0d      	ldr	r2, [pc, #52]	; (80006bc <fsm_automatic_runx+0x130>)
 8000688:	6013      	str	r3, [r2, #0]
			setTimer(0,number_clock1 * 1000);
 800068a:	4b0c      	ldr	r3, [pc, #48]	; (80006bc <fsm_automatic_runx+0x130>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000692:	fb02 f303 	mul.w	r3, r2, r3
 8000696:	4619      	mov	r1, r3
 8000698:	2000      	movs	r0, #0
 800069a:	f001 fbdd 	bl	8001e58 <setTimer>
		}
		break;
 800069e:	e005      	b.n	80006ac <fsm_automatic_runx+0x120>
	default:
		break;
 80006a0:	bf00      	nop
 80006a2:	e004      	b.n	80006ae <fsm_automatic_runx+0x122>
		break;
 80006a4:	bf00      	nop
 80006a6:	e002      	b.n	80006ae <fsm_automatic_runx+0x122>
		break;
 80006a8:	bf00      	nop
 80006aa:	e000      	b.n	80006ae <fsm_automatic_runx+0x122>
		break;
 80006ac:	bf00      	nop
	}
}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	20000050 	.word	0x20000050
 80006b8:	20000000 	.word	0x20000000
 80006bc:	20000058 	.word	0x20000058
 80006c0:	20000100 	.word	0x20000100
 80006c4:	20000004 	.word	0x20000004
 80006c8:	20000008 	.word	0x20000008

080006cc <fsm_automatic_runy>:
void fsm_automatic_runy(){
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
	switch(statusy){
 80006d0:	4b6e      	ldr	r3, [pc, #440]	; (800088c <fsm_automatic_runy+0x1c0>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	3b01      	subs	r3, #1
 80006d6:	2b03      	cmp	r3, #3
 80006d8:	f200 80cf 	bhi.w	800087a <fsm_automatic_runy+0x1ae>
 80006dc:	a201      	add	r2, pc, #4	; (adr r2, 80006e4 <fsm_automatic_runy+0x18>)
 80006de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006e2:	bf00      	nop
 80006e4:	080006f5 	.word	0x080006f5
 80006e8:	0800071d 	.word	0x0800071d
 80006ec:	0800078f 	.word	0x0800078f
 80006f0:	08000805 	.word	0x08000805
	case INIT:
		DisplayGREENY();
 80006f4:	f001 f91c 	bl	8001930 <DisplayGREENY>
		statusy = AUTO_GREEN;
 80006f8:	4b64      	ldr	r3, [pc, #400]	; (800088c <fsm_automatic_runy+0x1c0>)
 80006fa:	2203      	movs	r2, #3
 80006fc:	601a      	str	r2, [r3, #0]
		number_clock2 = Time_green;
 80006fe:	4b64      	ldr	r3, [pc, #400]	; (8000890 <fsm_automatic_runy+0x1c4>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	4a64      	ldr	r2, [pc, #400]	; (8000894 <fsm_automatic_runy+0x1c8>)
 8000704:	6013      	str	r3, [r2, #0]
		setTimer(1,number_clock2 * 1000);
 8000706:	4b63      	ldr	r3, [pc, #396]	; (8000894 <fsm_automatic_runy+0x1c8>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800070e:	fb02 f303 	mul.w	r3, r2, r3
 8000712:	4619      	mov	r1, r3
 8000714:	2001      	movs	r0, #1
 8000716:	f001 fb9f 	bl	8001e58 <setTimer>
		break;
 800071a:	e0b5      	b.n	8000888 <fsm_automatic_runy+0x1bc>
	case AUTO_RED:
		DisplayREDY();
 800071c:	f001 f8dc 	bl	80018d8 <DisplayREDY>
		SetMode();
 8000720:	f7ff fd14 	bl	800014c <SetMode>
		ChangeModeY();
 8000724:	f7ff fda2 	bl	800026c <ChangeModeY>
		if(mode2_flag == 1){
 8000728:	4b5b      	ldr	r3, [pc, #364]	; (8000898 <fsm_automatic_runy+0x1cc>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	2b01      	cmp	r3, #1
 800072e:	d118      	bne.n	8000762 <fsm_automatic_runy+0x96>
			InitLED();
 8000730:	f001 f952 	bl	80019d8 <InitLED>
			statusy = MAN_RED;
 8000734:	4b55      	ldr	r3, [pc, #340]	; (800088c <fsm_automatic_runy+0x1c0>)
 8000736:	2205      	movs	r2, #5
 8000738:	601a      	str	r2, [r3, #0]
			setTimer(1, save_counterTimeSet*1000);
 800073a:	4b58      	ldr	r3, [pc, #352]	; (800089c <fsm_automatic_runy+0x1d0>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000742:	fb02 f303 	mul.w	r3, r2, r3
 8000746:	4619      	mov	r1, r3
 8000748:	2001      	movs	r0, #1
 800074a:	f001 fb85 	bl	8001e58 <setTimer>
			number_clock2 = timer_counter[1]/100;
 800074e:	4b54      	ldr	r3, [pc, #336]	; (80008a0 <fsm_automatic_runy+0x1d4>)
 8000750:	685b      	ldr	r3, [r3, #4]
 8000752:	4a54      	ldr	r2, [pc, #336]	; (80008a4 <fsm_automatic_runy+0x1d8>)
 8000754:	fb82 1203 	smull	r1, r2, r2, r3
 8000758:	1152      	asrs	r2, r2, #5
 800075a:	17db      	asrs	r3, r3, #31
 800075c:	1ad3      	subs	r3, r2, r3
 800075e:	4a4d      	ldr	r2, [pc, #308]	; (8000894 <fsm_automatic_runy+0x1c8>)
 8000760:	6013      	str	r3, [r2, #0]
		}
		if(timer_flag[1] == 1){
 8000762:	4b51      	ldr	r3, [pc, #324]	; (80008a8 <fsm_automatic_runy+0x1dc>)
 8000764:	685b      	ldr	r3, [r3, #4]
 8000766:	2b01      	cmp	r3, #1
 8000768:	f040 8089 	bne.w	800087e <fsm_automatic_runy+0x1b2>
			InitLED();
 800076c:	f001 f934 	bl	80019d8 <InitLED>
			number_clock2 = Time_green;
 8000770:	4b47      	ldr	r3, [pc, #284]	; (8000890 <fsm_automatic_runy+0x1c4>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a47      	ldr	r2, [pc, #284]	; (8000894 <fsm_automatic_runy+0x1c8>)
 8000776:	6013      	str	r3, [r2, #0]
			setTimer(1,number_clock2 * 1000);
 8000778:	4b46      	ldr	r3, [pc, #280]	; (8000894 <fsm_automatic_runy+0x1c8>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000780:	fb02 f303 	mul.w	r3, r2, r3
 8000784:	4619      	mov	r1, r3
 8000786:	2001      	movs	r0, #1
 8000788:	f001 fb66 	bl	8001e58 <setTimer>
		}
		break;
 800078c:	e077      	b.n	800087e <fsm_automatic_runy+0x1b2>
	case AUTO_GREEN:
		DisplayGREENY();
 800078e:	f001 f8cf 	bl	8001930 <DisplayGREENY>
		SetMode();
 8000792:	f7ff fcdb 	bl	800014c <SetMode>
		ChangeModeY();
 8000796:	f7ff fd69 	bl	800026c <ChangeModeY>
		if(mode3_flag == 1){
 800079a:	4b44      	ldr	r3, [pc, #272]	; (80008ac <fsm_automatic_runy+0x1e0>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	2b01      	cmp	r3, #1
 80007a0:	d118      	bne.n	80007d4 <fsm_automatic_runy+0x108>
			InitLED();
 80007a2:	f001 f919 	bl	80019d8 <InitLED>
			statusy = MAN_GREEN;
 80007a6:	4b39      	ldr	r3, [pc, #228]	; (800088c <fsm_automatic_runy+0x1c0>)
 80007a8:	2206      	movs	r2, #6
 80007aa:	601a      	str	r2, [r3, #0]
			setTimer(1, save_counterTimeSet*1000);
 80007ac:	4b3b      	ldr	r3, [pc, #236]	; (800089c <fsm_automatic_runy+0x1d0>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007b4:	fb02 f303 	mul.w	r3, r2, r3
 80007b8:	4619      	mov	r1, r3
 80007ba:	2001      	movs	r0, #1
 80007bc:	f001 fb4c 	bl	8001e58 <setTimer>
			number_clock2 = timer_counter[1]/100;
 80007c0:	4b37      	ldr	r3, [pc, #220]	; (80008a0 <fsm_automatic_runy+0x1d4>)
 80007c2:	685b      	ldr	r3, [r3, #4]
 80007c4:	4a37      	ldr	r2, [pc, #220]	; (80008a4 <fsm_automatic_runy+0x1d8>)
 80007c6:	fb82 1203 	smull	r1, r2, r2, r3
 80007ca:	1152      	asrs	r2, r2, #5
 80007cc:	17db      	asrs	r3, r3, #31
 80007ce:	1ad3      	subs	r3, r2, r3
 80007d0:	4a30      	ldr	r2, [pc, #192]	; (8000894 <fsm_automatic_runy+0x1c8>)
 80007d2:	6013      	str	r3, [r2, #0]
		}
		if(timer_flag[1] == 1){
 80007d4:	4b34      	ldr	r3, [pc, #208]	; (80008a8 <fsm_automatic_runy+0x1dc>)
 80007d6:	685b      	ldr	r3, [r3, #4]
 80007d8:	2b01      	cmp	r3, #1
 80007da:	d152      	bne.n	8000882 <fsm_automatic_runy+0x1b6>
			InitLED();
 80007dc:	f001 f8fc 	bl	80019d8 <InitLED>
			statusy = AUTO_YELLOW;
 80007e0:	4b2a      	ldr	r3, [pc, #168]	; (800088c <fsm_automatic_runy+0x1c0>)
 80007e2:	2204      	movs	r2, #4
 80007e4:	601a      	str	r2, [r3, #0]
			number_clock2 = Time_yellow;
 80007e6:	4b32      	ldr	r3, [pc, #200]	; (80008b0 <fsm_automatic_runy+0x1e4>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	4a2a      	ldr	r2, [pc, #168]	; (8000894 <fsm_automatic_runy+0x1c8>)
 80007ec:	6013      	str	r3, [r2, #0]
			setTimer(1,number_clock2 * 1000);
 80007ee:	4b29      	ldr	r3, [pc, #164]	; (8000894 <fsm_automatic_runy+0x1c8>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007f6:	fb02 f303 	mul.w	r3, r2, r3
 80007fa:	4619      	mov	r1, r3
 80007fc:	2001      	movs	r0, #1
 80007fe:	f001 fb2b 	bl	8001e58 <setTimer>
		}
		break;
 8000802:	e03e      	b.n	8000882 <fsm_automatic_runy+0x1b6>
	case AUTO_YELLOW:
		DisplayYELLOWY();
 8000804:	f001 f87e 	bl	8001904 <DisplayYELLOWY>
		SetMode();
 8000808:	f7ff fca0 	bl	800014c <SetMode>
		ChangeModeY();
 800080c:	f7ff fd2e 	bl	800026c <ChangeModeY>
		if(mode4_flag == 1){
 8000810:	4b28      	ldr	r3, [pc, #160]	; (80008b4 <fsm_automatic_runy+0x1e8>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	2b01      	cmp	r3, #1
 8000816:	d118      	bne.n	800084a <fsm_automatic_runy+0x17e>
			InitLED();
 8000818:	f001 f8de 	bl	80019d8 <InitLED>
			statusy = MAN_YELLOW;
 800081c:	4b1b      	ldr	r3, [pc, #108]	; (800088c <fsm_automatic_runy+0x1c0>)
 800081e:	2207      	movs	r2, #7
 8000820:	601a      	str	r2, [r3, #0]
			setTimer(1, save_counterTimeSet*1000);
 8000822:	4b1e      	ldr	r3, [pc, #120]	; (800089c <fsm_automatic_runy+0x1d0>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800082a:	fb02 f303 	mul.w	r3, r2, r3
 800082e:	4619      	mov	r1, r3
 8000830:	2001      	movs	r0, #1
 8000832:	f001 fb11 	bl	8001e58 <setTimer>
			number_clock2 = timer_counter[1]/100;
 8000836:	4b1a      	ldr	r3, [pc, #104]	; (80008a0 <fsm_automatic_runy+0x1d4>)
 8000838:	685b      	ldr	r3, [r3, #4]
 800083a:	4a1a      	ldr	r2, [pc, #104]	; (80008a4 <fsm_automatic_runy+0x1d8>)
 800083c:	fb82 1203 	smull	r1, r2, r2, r3
 8000840:	1152      	asrs	r2, r2, #5
 8000842:	17db      	asrs	r3, r3, #31
 8000844:	1ad3      	subs	r3, r2, r3
 8000846:	4a13      	ldr	r2, [pc, #76]	; (8000894 <fsm_automatic_runy+0x1c8>)
 8000848:	6013      	str	r3, [r2, #0]
		}
		if(timer_flag[1] == 1){
 800084a:	4b17      	ldr	r3, [pc, #92]	; (80008a8 <fsm_automatic_runy+0x1dc>)
 800084c:	685b      	ldr	r3, [r3, #4]
 800084e:	2b01      	cmp	r3, #1
 8000850:	d119      	bne.n	8000886 <fsm_automatic_runy+0x1ba>
			InitLED();
 8000852:	f001 f8c1 	bl	80019d8 <InitLED>
			statusy = AUTO_RED;
 8000856:	4b0d      	ldr	r3, [pc, #52]	; (800088c <fsm_automatic_runy+0x1c0>)
 8000858:	2202      	movs	r2, #2
 800085a:	601a      	str	r2, [r3, #0]
			number_clock2 = Time_red;
 800085c:	4b16      	ldr	r3, [pc, #88]	; (80008b8 <fsm_automatic_runy+0x1ec>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a0c      	ldr	r2, [pc, #48]	; (8000894 <fsm_automatic_runy+0x1c8>)
 8000862:	6013      	str	r3, [r2, #0]
			setTimer(1,number_clock2 * 1000);
 8000864:	4b0b      	ldr	r3, [pc, #44]	; (8000894 <fsm_automatic_runy+0x1c8>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800086c:	fb02 f303 	mul.w	r3, r2, r3
 8000870:	4619      	mov	r1, r3
 8000872:	2001      	movs	r0, #1
 8000874:	f001 faf0 	bl	8001e58 <setTimer>
		}
		break;
 8000878:	e005      	b.n	8000886 <fsm_automatic_runy+0x1ba>
	default:
		break;
 800087a:	bf00      	nop
 800087c:	e004      	b.n	8000888 <fsm_automatic_runy+0x1bc>
		break;
 800087e:	bf00      	nop
 8000880:	e002      	b.n	8000888 <fsm_automatic_runy+0x1bc>
		break;
 8000882:	bf00      	nop
 8000884:	e000      	b.n	8000888 <fsm_automatic_runy+0x1bc>
		break;
 8000886:	bf00      	nop
	}
}
 8000888:	bf00      	nop
 800088a:	bd80      	pop	{r7, pc}
 800088c:	20000054 	.word	0x20000054
 8000890:	20000004 	.word	0x20000004
 8000894:	2000005c 	.word	0x2000005c
 8000898:	20000040 	.word	0x20000040
 800089c:	2000004c 	.word	0x2000004c
 80008a0:	200000d8 	.word	0x200000d8
 80008a4:	51eb851f 	.word	0x51eb851f
 80008a8:	20000100 	.word	0x20000100
 80008ac:	20000044 	.word	0x20000044
 80008b0:	20000008 	.word	0x20000008
 80008b4:	20000048 	.word	0x20000048
 80008b8:	20000000 	.word	0x20000000

080008bc <fsm_manual_run1>:

#include "fsm_manual.h"
#include "led_display.h"
#include "input_processing.h"
#include "fsm_automatic.h"
void fsm_manual_run1(void){
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
	switch(statusx){
 80008c0:	4b99      	ldr	r3, [pc, #612]	; (8000b28 <fsm_manual_run1+0x26c>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	3b05      	subs	r3, #5
 80008c6:	2b05      	cmp	r3, #5
 80008c8:	f200 81f0 	bhi.w	8000cac <fsm_manual_run1+0x3f0>
 80008cc:	a201      	add	r2, pc, #4	; (adr r2, 80008d4 <fsm_manual_run1+0x18>)
 80008ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008d2:	bf00      	nop
 80008d4:	0800098d 	.word	0x0800098d
 80008d8:	08000aa9 	.word	0x08000aa9
 80008dc:	08000c11 	.word	0x08000c11
 80008e0:	080008ed 	.word	0x080008ed
 80008e4:	08000a09 	.word	0x08000a09
 80008e8:	08000b55 	.word	0x08000b55
	case CONF_RED:
		if(timer_flag[4] == 1){
 80008ec:	4b8f      	ldr	r3, [pc, #572]	; (8000b2c <fsm_manual_run1+0x270>)
 80008ee:	691b      	ldr	r3, [r3, #16]
 80008f0:	2b01      	cmp	r3, #1
 80008f2:	d106      	bne.n	8000902 <fsm_manual_run1+0x46>
			DisplayMAN_REDX();
 80008f4:	f001 f832 	bl	800195c <DisplayMAN_REDX>
			setTimer(4, 500);
 80008f8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80008fc:	2004      	movs	r0, #4
 80008fe:	f001 faab 	bl	8001e58 <setTimer>
		}
		if(counterMode == 3){
 8000902:	4b8b      	ldr	r3, [pc, #556]	; (8000b30 <fsm_manual_run1+0x274>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	2b03      	cmp	r3, #3
 8000908:	d104      	bne.n	8000914 <fsm_manual_run1+0x58>
			statusx = CONF_GREEN;
 800090a:	4b87      	ldr	r3, [pc, #540]	; (8000b28 <fsm_manual_run1+0x26c>)
 800090c:	2209      	movs	r2, #9
 800090e:	601a      	str	r2, [r3, #0]
			InitLED();
 8000910:	f001 f862 	bl	80019d8 <InitLED>
		}
		fsm_mode();
 8000914:	f7ff fddc 	bl	80004d0 <fsm_mode>
		SetMode();
 8000918:	f7ff fc18 	bl	800014c <SetMode>
		if(mode2_flag == 1){
 800091c:	4b85      	ldr	r3, [pc, #532]	; (8000b34 <fsm_manual_run1+0x278>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	2b01      	cmp	r3, #1
 8000922:	f040 81c5 	bne.w	8000cb0 <fsm_manual_run1+0x3f4>
			statusx = MAN_RED;
 8000926:	4b80      	ldr	r3, [pc, #512]	; (8000b28 <fsm_manual_run1+0x26c>)
 8000928:	2205      	movs	r2, #5
 800092a:	601a      	str	r2, [r3, #0]
			setTimer(0, save_counterTimeSet*1000);
 800092c:	4b82      	ldr	r3, [pc, #520]	; (8000b38 <fsm_manual_run1+0x27c>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000934:	fb02 f303 	mul.w	r3, r2, r3
 8000938:	4619      	mov	r1, r3
 800093a:	2000      	movs	r0, #0
 800093c:	f001 fa8c 	bl	8001e58 <setTimer>
			number_clock1 = timer_counter[0]/100;
 8000940:	4b7e      	ldr	r3, [pc, #504]	; (8000b3c <fsm_manual_run1+0x280>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a7e      	ldr	r2, [pc, #504]	; (8000b40 <fsm_manual_run1+0x284>)
 8000946:	fb82 1203 	smull	r1, r2, r2, r3
 800094a:	1152      	asrs	r2, r2, #5
 800094c:	17db      	asrs	r3, r3, #31
 800094e:	1ad3      	subs	r3, r2, r3
 8000950:	4a7c      	ldr	r2, [pc, #496]	; (8000b44 <fsm_manual_run1+0x288>)
 8000952:	6013      	str	r3, [r2, #0]
			statusy = AUTO_GREEN;
 8000954:	4b7c      	ldr	r3, [pc, #496]	; (8000b48 <fsm_manual_run1+0x28c>)
 8000956:	2203      	movs	r2, #3
 8000958:	601a      	str	r2, [r3, #0]
			setTimer(1, save_counterTimeSet*1000 - 2000);
 800095a:	4b77      	ldr	r3, [pc, #476]	; (8000b38 <fsm_manual_run1+0x27c>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000962:	fb02 f303 	mul.w	r3, r2, r3
 8000966:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 800096a:	4619      	mov	r1, r3
 800096c:	2001      	movs	r0, #1
 800096e:	f001 fa73 	bl	8001e58 <setTimer>
			number_clock2 = timer_counter[1]/100;
 8000972:	4b72      	ldr	r3, [pc, #456]	; (8000b3c <fsm_manual_run1+0x280>)
 8000974:	685b      	ldr	r3, [r3, #4]
 8000976:	4a72      	ldr	r2, [pc, #456]	; (8000b40 <fsm_manual_run1+0x284>)
 8000978:	fb82 1203 	smull	r1, r2, r2, r3
 800097c:	1152      	asrs	r2, r2, #5
 800097e:	17db      	asrs	r3, r3, #31
 8000980:	1ad3      	subs	r3, r2, r3
 8000982:	4a72      	ldr	r2, [pc, #456]	; (8000b4c <fsm_manual_run1+0x290>)
 8000984:	6013      	str	r3, [r2, #0]
			InitLED();
 8000986:	f001 f827 	bl	80019d8 <InitLED>
		}
		break;
 800098a:	e191      	b.n	8000cb0 <fsm_manual_run1+0x3f4>
	case MAN_RED:
		if(timer_flag[4] == 1){
 800098c:	4b67      	ldr	r3, [pc, #412]	; (8000b2c <fsm_manual_run1+0x270>)
 800098e:	691b      	ldr	r3, [r3, #16]
 8000990:	2b01      	cmp	r3, #1
 8000992:	d106      	bne.n	80009a2 <fsm_manual_run1+0xe6>
			DisplayMAN_REDX();
 8000994:	f000 ffe2 	bl	800195c <DisplayMAN_REDX>
			setTimer(4, 500);
 8000998:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800099c:	2004      	movs	r0, #4
 800099e:	f001 fa5b 	bl	8001e58 <setTimer>
		}
		ChangeModeX();
 80009a2:	f7ff fc21 	bl	80001e8 <ChangeModeX>
		fsm_clock();
 80009a6:	f7ff fce5 	bl	8000374 <fsm_clock>
		if(timer_flag[0] == 1){
 80009aa:	4b60      	ldr	r3, [pc, #384]	; (8000b2c <fsm_manual_run1+0x270>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	2b01      	cmp	r3, #1
 80009b0:	f040 8180 	bne.w	8000cb4 <fsm_manual_run1+0x3f8>
			InitLED();
 80009b4:	f001 f810 	bl	80019d8 <InitLED>
			statusx = AUTO_GREEN;
 80009b8:	4b5b      	ldr	r3, [pc, #364]	; (8000b28 <fsm_manual_run1+0x26c>)
 80009ba:	2203      	movs	r2, #3
 80009bc:	601a      	str	r2, [r3, #0]
			if(mode2_flag == 1){
 80009be:	4b5d      	ldr	r3, [pc, #372]	; (8000b34 <fsm_manual_run1+0x278>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	2b01      	cmp	r3, #1
 80009c4:	d10c      	bne.n	80009e0 <fsm_manual_run1+0x124>
				setTimer(0,save_counterTimeSet*1000 - 2000);
 80009c6:	4b5c      	ldr	r3, [pc, #368]	; (8000b38 <fsm_manual_run1+0x27c>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009ce:	fb02 f303 	mul.w	r3, r2, r3
 80009d2:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 80009d6:	4619      	mov	r1, r3
 80009d8:	2000      	movs	r0, #0
 80009da:	f001 fa3d 	bl	8001e58 <setTimer>
 80009de:	e004      	b.n	80009ea <fsm_manual_run1+0x12e>
			}
			else{
				setTimer(0,3000);
 80009e0:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80009e4:	2000      	movs	r0, #0
 80009e6:	f001 fa37 	bl	8001e58 <setTimer>
			}
			setTimer(2, 10);
 80009ea:	210a      	movs	r1, #10
 80009ec:	2002      	movs	r0, #2
 80009ee:	f001 fa33 	bl	8001e58 <setTimer>
			number_clock1 = timer_counter[0]/100;
 80009f2:	4b52      	ldr	r3, [pc, #328]	; (8000b3c <fsm_manual_run1+0x280>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	4a52      	ldr	r2, [pc, #328]	; (8000b40 <fsm_manual_run1+0x284>)
 80009f8:	fb82 1203 	smull	r1, r2, r2, r3
 80009fc:	1152      	asrs	r2, r2, #5
 80009fe:	17db      	asrs	r3, r3, #31
 8000a00:	1ad3      	subs	r3, r2, r3
 8000a02:	4a50      	ldr	r2, [pc, #320]	; (8000b44 <fsm_manual_run1+0x288>)
 8000a04:	6013      	str	r3, [r2, #0]
		}
		break;
 8000a06:	e155      	b.n	8000cb4 <fsm_manual_run1+0x3f8>
	case CONF_GREEN:
		if(timer_flag[4] == 1){
 8000a08:	4b48      	ldr	r3, [pc, #288]	; (8000b2c <fsm_manual_run1+0x270>)
 8000a0a:	691b      	ldr	r3, [r3, #16]
 8000a0c:	2b01      	cmp	r3, #1
 8000a0e:	d106      	bne.n	8000a1e <fsm_manual_run1+0x162>
			DisplayMAN_GREENX();
 8000a10:	f000 ffb8 	bl	8001984 <DisplayMAN_GREENX>
			setTimer(4, 500);
 8000a14:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000a18:	2004      	movs	r0, #4
 8000a1a:	f001 fa1d 	bl	8001e58 <setTimer>
		}
		if(counterMode == 4){
 8000a1e:	4b44      	ldr	r3, [pc, #272]	; (8000b30 <fsm_manual_run1+0x274>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	2b04      	cmp	r3, #4
 8000a24:	d104      	bne.n	8000a30 <fsm_manual_run1+0x174>
			statusx = CONF_YELLOW;
 8000a26:	4b40      	ldr	r3, [pc, #256]	; (8000b28 <fsm_manual_run1+0x26c>)
 8000a28:	220a      	movs	r2, #10
 8000a2a:	601a      	str	r2, [r3, #0]
			InitLED();
 8000a2c:	f000 ffd4 	bl	80019d8 <InitLED>
		}
		fsm_mode();
 8000a30:	f7ff fd4e 	bl	80004d0 <fsm_mode>
		SetMode();
 8000a34:	f7ff fb8a 	bl	800014c <SetMode>
		if(mode3_flag == 1){
 8000a38:	4b45      	ldr	r3, [pc, #276]	; (8000b50 <fsm_manual_run1+0x294>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	2b01      	cmp	r3, #1
 8000a3e:	f040 813b 	bne.w	8000cb8 <fsm_manual_run1+0x3fc>
			statusx = AUTO_RED;
 8000a42:	4b39      	ldr	r3, [pc, #228]	; (8000b28 <fsm_manual_run1+0x26c>)
 8000a44:	2202      	movs	r2, #2
 8000a46:	601a      	str	r2, [r3, #0]
			setTimer(0, save_counterTimeSet*1000 + 2000);
 8000a48:	4b3b      	ldr	r3, [pc, #236]	; (8000b38 <fsm_manual_run1+0x27c>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a50:	fb02 f303 	mul.w	r3, r2, r3
 8000a54:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000a58:	4619      	mov	r1, r3
 8000a5a:	2000      	movs	r0, #0
 8000a5c:	f001 f9fc 	bl	8001e58 <setTimer>
			number_clock1 = timer_counter[0]/100;
 8000a60:	4b36      	ldr	r3, [pc, #216]	; (8000b3c <fsm_manual_run1+0x280>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a36      	ldr	r2, [pc, #216]	; (8000b40 <fsm_manual_run1+0x284>)
 8000a66:	fb82 1203 	smull	r1, r2, r2, r3
 8000a6a:	1152      	asrs	r2, r2, #5
 8000a6c:	17db      	asrs	r3, r3, #31
 8000a6e:	1ad3      	subs	r3, r2, r3
 8000a70:	4a34      	ldr	r2, [pc, #208]	; (8000b44 <fsm_manual_run1+0x288>)
 8000a72:	6013      	str	r3, [r2, #0]
			statusy = MAN_GREEN;
 8000a74:	4b34      	ldr	r3, [pc, #208]	; (8000b48 <fsm_manual_run1+0x28c>)
 8000a76:	2206      	movs	r2, #6
 8000a78:	601a      	str	r2, [r3, #0]
			setTimer(1, save_counterTimeSet*1000);
 8000a7a:	4b2f      	ldr	r3, [pc, #188]	; (8000b38 <fsm_manual_run1+0x27c>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a82:	fb02 f303 	mul.w	r3, r2, r3
 8000a86:	4619      	mov	r1, r3
 8000a88:	2001      	movs	r0, #1
 8000a8a:	f001 f9e5 	bl	8001e58 <setTimer>
			number_clock2 = timer_counter[1]/100;
 8000a8e:	4b2b      	ldr	r3, [pc, #172]	; (8000b3c <fsm_manual_run1+0x280>)
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	4a2b      	ldr	r2, [pc, #172]	; (8000b40 <fsm_manual_run1+0x284>)
 8000a94:	fb82 1203 	smull	r1, r2, r2, r3
 8000a98:	1152      	asrs	r2, r2, #5
 8000a9a:	17db      	asrs	r3, r3, #31
 8000a9c:	1ad3      	subs	r3, r2, r3
 8000a9e:	4a2b      	ldr	r2, [pc, #172]	; (8000b4c <fsm_manual_run1+0x290>)
 8000aa0:	6013      	str	r3, [r2, #0]
			InitLED();
 8000aa2:	f000 ff99 	bl	80019d8 <InitLED>
		}
		break;
 8000aa6:	e107      	b.n	8000cb8 <fsm_manual_run1+0x3fc>
	case MAN_GREEN:
		if(timer_flag[4] == 1){
 8000aa8:	4b20      	ldr	r3, [pc, #128]	; (8000b2c <fsm_manual_run1+0x270>)
 8000aaa:	691b      	ldr	r3, [r3, #16]
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	d106      	bne.n	8000abe <fsm_manual_run1+0x202>
			setTimer(4, 500);
 8000ab0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000ab4:	2004      	movs	r0, #4
 8000ab6:	f001 f9cf 	bl	8001e58 <setTimer>
			DisplayMAN_GREENX();
 8000aba:	f000 ff63 	bl	8001984 <DisplayMAN_GREENX>
		}
		ChangeModeX();
 8000abe:	f7ff fb93 	bl	80001e8 <ChangeModeX>
		fsm_clock();
 8000ac2:	f7ff fc57 	bl	8000374 <fsm_clock>
		if(timer_flag[0] == 1){
 8000ac6:	4b19      	ldr	r3, [pc, #100]	; (8000b2c <fsm_manual_run1+0x270>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	2b01      	cmp	r3, #1
 8000acc:	f040 80f6 	bne.w	8000cbc <fsm_manual_run1+0x400>
			InitLED();
 8000ad0:	f000 ff82 	bl	80019d8 <InitLED>
			statusx = AUTO_YELLOW;
 8000ad4:	4b14      	ldr	r3, [pc, #80]	; (8000b28 <fsm_manual_run1+0x26c>)
 8000ad6:	2204      	movs	r2, #4
 8000ad8:	601a      	str	r2, [r3, #0]
			if(mode2_flag == 1){
 8000ada:	4b16      	ldr	r3, [pc, #88]	; (8000b34 <fsm_manual_run1+0x278>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	2b01      	cmp	r3, #1
 8000ae0:	d10e      	bne.n	8000b00 <fsm_manual_run1+0x244>
				if(save_counterTimeSet < 2){
 8000ae2:	4b15      	ldr	r3, [pc, #84]	; (8000b38 <fsm_manual_run1+0x27c>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	2b01      	cmp	r3, #1
 8000ae8:	dc0f      	bgt.n	8000b0a <fsm_manual_run1+0x24e>
					setTimer(0,save_counterTimeSet*1000);
 8000aea:	4b13      	ldr	r3, [pc, #76]	; (8000b38 <fsm_manual_run1+0x27c>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000af2:	fb02 f303 	mul.w	r3, r2, r3
 8000af6:	4619      	mov	r1, r3
 8000af8:	2000      	movs	r0, #0
 8000afa:	f001 f9ad 	bl	8001e58 <setTimer>
 8000afe:	e004      	b.n	8000b0a <fsm_manual_run1+0x24e>
				}
			}
			else{
				setTimer(0,2000);
 8000b00:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000b04:	2000      	movs	r0, #0
 8000b06:	f001 f9a7 	bl	8001e58 <setTimer>
			}
			setTimer(2, 10);
 8000b0a:	210a      	movs	r1, #10
 8000b0c:	2002      	movs	r0, #2
 8000b0e:	f001 f9a3 	bl	8001e58 <setTimer>
			number_clock1 = timer_counter[0]/100;
 8000b12:	4b0a      	ldr	r3, [pc, #40]	; (8000b3c <fsm_manual_run1+0x280>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4a0a      	ldr	r2, [pc, #40]	; (8000b40 <fsm_manual_run1+0x284>)
 8000b18:	fb82 1203 	smull	r1, r2, r2, r3
 8000b1c:	1152      	asrs	r2, r2, #5
 8000b1e:	17db      	asrs	r3, r3, #31
 8000b20:	1ad3      	subs	r3, r2, r3
 8000b22:	4a08      	ldr	r2, [pc, #32]	; (8000b44 <fsm_manual_run1+0x288>)
 8000b24:	6013      	str	r3, [r2, #0]
		}
		break;
 8000b26:	e0c9      	b.n	8000cbc <fsm_manual_run1+0x400>
 8000b28:	20000050 	.word	0x20000050
 8000b2c:	20000100 	.word	0x20000100
 8000b30:	20000064 	.word	0x20000064
 8000b34:	20000040 	.word	0x20000040
 8000b38:	2000004c 	.word	0x2000004c
 8000b3c:	200000d8 	.word	0x200000d8
 8000b40:	51eb851f 	.word	0x51eb851f
 8000b44:	20000058 	.word	0x20000058
 8000b48:	20000054 	.word	0x20000054
 8000b4c:	2000005c 	.word	0x2000005c
 8000b50:	20000044 	.word	0x20000044
	case CONF_YELLOW:
		if(timer_flag[4] == 1){
 8000b54:	4b5d      	ldr	r3, [pc, #372]	; (8000ccc <fsm_manual_run1+0x410>)
 8000b56:	691b      	ldr	r3, [r3, #16]
 8000b58:	2b01      	cmp	r3, #1
 8000b5a:	d106      	bne.n	8000b6a <fsm_manual_run1+0x2ae>
			DisplayMAN_YELLOWX();
 8000b5c:	f000 ff28 	bl	80019b0 <DisplayMAN_YELLOWX>
			setTimer(4, 500);
 8000b60:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000b64:	2004      	movs	r0, #4
 8000b66:	f001 f977 	bl	8001e58 <setTimer>
		}
		if(counterMode == 1){
 8000b6a:	4b59      	ldr	r3, [pc, #356]	; (8000cd0 <fsm_manual_run1+0x414>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	2b01      	cmp	r3, #1
 8000b70:	d117      	bne.n	8000ba2 <fsm_manual_run1+0x2e6>
			statusx = AUTO_RED;
 8000b72:	4b58      	ldr	r3, [pc, #352]	; (8000cd4 <fsm_manual_run1+0x418>)
 8000b74:	2202      	movs	r2, #2
 8000b76:	601a      	str	r2, [r3, #0]
			setTimer(0,5000);
 8000b78:	f241 3188 	movw	r1, #5000	; 0x1388
 8000b7c:	2000      	movs	r0, #0
 8000b7e:	f001 f96b 	bl	8001e58 <setTimer>
			setTimer(2,100);
 8000b82:	2164      	movs	r1, #100	; 0x64
 8000b84:	2002      	movs	r0, #2
 8000b86:	f001 f967 	bl	8001e58 <setTimer>
			number_clock1 = timer_counter[0]/100;
 8000b8a:	4b53      	ldr	r3, [pc, #332]	; (8000cd8 <fsm_manual_run1+0x41c>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4a53      	ldr	r2, [pc, #332]	; (8000cdc <fsm_manual_run1+0x420>)
 8000b90:	fb82 1203 	smull	r1, r2, r2, r3
 8000b94:	1152      	asrs	r2, r2, #5
 8000b96:	17db      	asrs	r3, r3, #31
 8000b98:	1ad3      	subs	r3, r2, r3
 8000b9a:	4a51      	ldr	r2, [pc, #324]	; (8000ce0 <fsm_manual_run1+0x424>)
 8000b9c:	6013      	str	r3, [r2, #0]
			InitLED();
 8000b9e:	f000 ff1b 	bl	80019d8 <InitLED>
		}
		fsm_mode();
 8000ba2:	f7ff fc95 	bl	80004d0 <fsm_mode>
		SetMode();
 8000ba6:	f7ff fad1 	bl	800014c <SetMode>
		if(mode4_flag == 1){
 8000baa:	4b4e      	ldr	r3, [pc, #312]	; (8000ce4 <fsm_manual_run1+0x428>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	2b01      	cmp	r3, #1
 8000bb0:	f040 8086 	bne.w	8000cc0 <fsm_manual_run1+0x404>
			statusx = AUTO_RED;
 8000bb4:	4b47      	ldr	r3, [pc, #284]	; (8000cd4 <fsm_manual_run1+0x418>)
 8000bb6:	2202      	movs	r2, #2
 8000bb8:	601a      	str	r2, [r3, #0]
			setTimer(0, save_counterTimeSet*1000 + 3000);
 8000bba:	4b4b      	ldr	r3, [pc, #300]	; (8000ce8 <fsm_manual_run1+0x42c>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000bc2:	fb02 f303 	mul.w	r3, r2, r3
 8000bc6:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 8000bca:	4619      	mov	r1, r3
 8000bcc:	2000      	movs	r0, #0
 8000bce:	f001 f943 	bl	8001e58 <setTimer>
			number_clock1 = timer_counter[0]/100;
 8000bd2:	4b41      	ldr	r3, [pc, #260]	; (8000cd8 <fsm_manual_run1+0x41c>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4a41      	ldr	r2, [pc, #260]	; (8000cdc <fsm_manual_run1+0x420>)
 8000bd8:	fb82 1203 	smull	r1, r2, r2, r3
 8000bdc:	1152      	asrs	r2, r2, #5
 8000bde:	17db      	asrs	r3, r3, #31
 8000be0:	1ad3      	subs	r3, r2, r3
 8000be2:	4a3f      	ldr	r2, [pc, #252]	; (8000ce0 <fsm_manual_run1+0x424>)
 8000be4:	6013      	str	r3, [r2, #0]
			statusy = AUTO_GREEN;
 8000be6:	4b41      	ldr	r3, [pc, #260]	; (8000cec <fsm_manual_run1+0x430>)
 8000be8:	2203      	movs	r2, #3
 8000bea:	601a      	str	r2, [r3, #0]
			setTimer(1, 3000);
 8000bec:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8000bf0:	2001      	movs	r0, #1
 8000bf2:	f001 f931 	bl	8001e58 <setTimer>
			number_clock2 = timer_counter[1]/100;
 8000bf6:	4b38      	ldr	r3, [pc, #224]	; (8000cd8 <fsm_manual_run1+0x41c>)
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	4a38      	ldr	r2, [pc, #224]	; (8000cdc <fsm_manual_run1+0x420>)
 8000bfc:	fb82 1203 	smull	r1, r2, r2, r3
 8000c00:	1152      	asrs	r2, r2, #5
 8000c02:	17db      	asrs	r3, r3, #31
 8000c04:	1ad3      	subs	r3, r2, r3
 8000c06:	4a3a      	ldr	r2, [pc, #232]	; (8000cf0 <fsm_manual_run1+0x434>)
 8000c08:	6013      	str	r3, [r2, #0]
			InitLED();
 8000c0a:	f000 fee5 	bl	80019d8 <InitLED>
		}
		break;
 8000c0e:	e057      	b.n	8000cc0 <fsm_manual_run1+0x404>
	case MAN_YELLOW:
		if(timer_flag[4] == 1){
 8000c10:	4b2e      	ldr	r3, [pc, #184]	; (8000ccc <fsm_manual_run1+0x410>)
 8000c12:	691b      	ldr	r3, [r3, #16]
 8000c14:	2b01      	cmp	r3, #1
 8000c16:	d106      	bne.n	8000c26 <fsm_manual_run1+0x36a>
			setTimer(4, 500);
 8000c18:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000c1c:	2004      	movs	r0, #4
 8000c1e:	f001 f91b 	bl	8001e58 <setTimer>
			DisplayMAN_YELLOWX();
 8000c22:	f000 fec5 	bl	80019b0 <DisplayMAN_YELLOWX>
		}
		ChangeModeX();
 8000c26:	f7ff fadf 	bl	80001e8 <ChangeModeX>
		fsm_clock();
 8000c2a:	f7ff fba3 	bl	8000374 <fsm_clock>
		if(timer_flag[0] == 1){
 8000c2e:	4b27      	ldr	r3, [pc, #156]	; (8000ccc <fsm_manual_run1+0x410>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	2b01      	cmp	r3, #1
 8000c34:	d146      	bne.n	8000cc4 <fsm_manual_run1+0x408>
			InitLED();
 8000c36:	f000 fecf 	bl	80019d8 <InitLED>
			statusx = AUTO_RED;
 8000c3a:	4b26      	ldr	r3, [pc, #152]	; (8000cd4 <fsm_manual_run1+0x418>)
 8000c3c:	2202      	movs	r2, #2
 8000c3e:	601a      	str	r2, [r3, #0]
			if(mode3_flag == 1){
 8000c40:	4b2c      	ldr	r3, [pc, #176]	; (8000cf4 <fsm_manual_run1+0x438>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d10c      	bne.n	8000c62 <fsm_manual_run1+0x3a6>
				setTimer(0,save_counterTimeSet*1000 + 2000);
 8000c48:	4b27      	ldr	r3, [pc, #156]	; (8000ce8 <fsm_manual_run1+0x42c>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c50:	fb02 f303 	mul.w	r3, r2, r3
 8000c54:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000c58:	4619      	mov	r1, r3
 8000c5a:	2000      	movs	r0, #0
 8000c5c:	f001 f8fc 	bl	8001e58 <setTimer>
 8000c60:	e015      	b.n	8000c8e <fsm_manual_run1+0x3d2>
			}
			else if(mode4_flag == 1){
 8000c62:	4b20      	ldr	r3, [pc, #128]	; (8000ce4 <fsm_manual_run1+0x428>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	2b01      	cmp	r3, #1
 8000c68:	d10c      	bne.n	8000c84 <fsm_manual_run1+0x3c8>
				setTimer(0,save_counterTimeSet*1000 + 3000);
 8000c6a:	4b1f      	ldr	r3, [pc, #124]	; (8000ce8 <fsm_manual_run1+0x42c>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c72:	fb02 f303 	mul.w	r3, r2, r3
 8000c76:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	2000      	movs	r0, #0
 8000c7e:	f001 f8eb 	bl	8001e58 <setTimer>
 8000c82:	e004      	b.n	8000c8e <fsm_manual_run1+0x3d2>
			}
			else{
				setTimer(0,5000);
 8000c84:	f241 3188 	movw	r1, #5000	; 0x1388
 8000c88:	2000      	movs	r0, #0
 8000c8a:	f001 f8e5 	bl	8001e58 <setTimer>
			}
			setTimer(2, 10);
 8000c8e:	210a      	movs	r1, #10
 8000c90:	2002      	movs	r0, #2
 8000c92:	f001 f8e1 	bl	8001e58 <setTimer>
			number_clock1 = timer_counter[0]/100;
 8000c96:	4b10      	ldr	r3, [pc, #64]	; (8000cd8 <fsm_manual_run1+0x41c>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4a10      	ldr	r2, [pc, #64]	; (8000cdc <fsm_manual_run1+0x420>)
 8000c9c:	fb82 1203 	smull	r1, r2, r2, r3
 8000ca0:	1152      	asrs	r2, r2, #5
 8000ca2:	17db      	asrs	r3, r3, #31
 8000ca4:	1ad3      	subs	r3, r2, r3
 8000ca6:	4a0e      	ldr	r2, [pc, #56]	; (8000ce0 <fsm_manual_run1+0x424>)
 8000ca8:	6013      	str	r3, [r2, #0]
		}
		break;
 8000caa:	e00b      	b.n	8000cc4 <fsm_manual_run1+0x408>
	default:
		break;
 8000cac:	bf00      	nop
 8000cae:	e00a      	b.n	8000cc6 <fsm_manual_run1+0x40a>
		break;
 8000cb0:	bf00      	nop
 8000cb2:	e008      	b.n	8000cc6 <fsm_manual_run1+0x40a>
		break;
 8000cb4:	bf00      	nop
 8000cb6:	e006      	b.n	8000cc6 <fsm_manual_run1+0x40a>
		break;
 8000cb8:	bf00      	nop
 8000cba:	e004      	b.n	8000cc6 <fsm_manual_run1+0x40a>
		break;
 8000cbc:	bf00      	nop
 8000cbe:	e002      	b.n	8000cc6 <fsm_manual_run1+0x40a>
		break;
 8000cc0:	bf00      	nop
 8000cc2:	e000      	b.n	8000cc6 <fsm_manual_run1+0x40a>
		break;
 8000cc4:	bf00      	nop
	}
}
 8000cc6:	bf00      	nop
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	20000100 	.word	0x20000100
 8000cd0:	20000064 	.word	0x20000064
 8000cd4:	20000050 	.word	0x20000050
 8000cd8:	200000d8 	.word	0x200000d8
 8000cdc:	51eb851f 	.word	0x51eb851f
 8000ce0:	20000058 	.word	0x20000058
 8000ce4:	20000048 	.word	0x20000048
 8000ce8:	2000004c 	.word	0x2000004c
 8000cec:	20000054 	.word	0x20000054
 8000cf0:	2000005c 	.word	0x2000005c
 8000cf4:	20000044 	.word	0x20000044

08000cf8 <fsm_manual_run2>:
void fsm_manual_run2(void){
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
	switch(statusy){
 8000cfc:	4b9b      	ldr	r3, [pc, #620]	; (8000f6c <fsm_manual_run2+0x274>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	3b05      	subs	r3, #5
 8000d02:	2b05      	cmp	r3, #5
 8000d04:	f200 8122 	bhi.w	8000f4c <fsm_manual_run2+0x254>
 8000d08:	a201      	add	r2, pc, #4	; (adr r2, 8000d10 <fsm_manual_run2+0x18>)
 8000d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d0e:	bf00      	nop
 8000d10:	08000d59 	.word	0x08000d59
 8000d14:	08000e01 	.word	0x08000e01
 8000d18:	08000eb5 	.word	0x08000eb5
 8000d1c:	08000d29 	.word	0x08000d29
 8000d20:	08000dd1 	.word	0x08000dd1
 8000d24:	08000e7d 	.word	0x08000e7d
	case CONF_RED:
		fsm_mode();
 8000d28:	f7ff fbd2 	bl	80004d0 <fsm_mode>
		if(timer_flag[5] == 1){
 8000d2c:	4b90      	ldr	r3, [pc, #576]	; (8000f70 <fsm_manual_run2+0x278>)
 8000d2e:	695b      	ldr	r3, [r3, #20]
 8000d30:	2b01      	cmp	r3, #1
 8000d32:	d106      	bne.n	8000d42 <fsm_manual_run2+0x4a>
			DisplayMAN_REDY();
 8000d34:	f000 fe1c 	bl	8001970 <DisplayMAN_REDY>
			setTimer(5, 500);
 8000d38:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000d3c:	2005      	movs	r0, #5
 8000d3e:	f001 f88b 	bl	8001e58 <setTimer>
		}
		if(counterMode == 3){
 8000d42:	4b8c      	ldr	r3, [pc, #560]	; (8000f74 <fsm_manual_run2+0x27c>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	2b03      	cmp	r3, #3
 8000d48:	f040 8102 	bne.w	8000f50 <fsm_manual_run2+0x258>
			statusy = CONF_GREEN;
 8000d4c:	4b87      	ldr	r3, [pc, #540]	; (8000f6c <fsm_manual_run2+0x274>)
 8000d4e:	2209      	movs	r2, #9
 8000d50:	601a      	str	r2, [r3, #0]
			InitLED();
 8000d52:	f000 fe41 	bl	80019d8 <InitLED>
		}
		break;
 8000d56:	e0fb      	b.n	8000f50 <fsm_manual_run2+0x258>
	case MAN_RED:
		if(timer_flag[5] == 1){
 8000d58:	4b85      	ldr	r3, [pc, #532]	; (8000f70 <fsm_manual_run2+0x278>)
 8000d5a:	695b      	ldr	r3, [r3, #20]
 8000d5c:	2b01      	cmp	r3, #1
 8000d5e:	d106      	bne.n	8000d6e <fsm_manual_run2+0x76>
			DisplayMAN_REDY();
 8000d60:	f000 fe06 	bl	8001970 <DisplayMAN_REDY>
			setTimer(5, 500);
 8000d64:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000d68:	2005      	movs	r0, #5
 8000d6a:	f001 f875 	bl	8001e58 <setTimer>
		}
		ChangeModeY();
 8000d6e:	f7ff fa7d 	bl	800026c <ChangeModeY>
		if(timer_flag[1] == 1){
 8000d72:	4b7f      	ldr	r3, [pc, #508]	; (8000f70 <fsm_manual_run2+0x278>)
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	f040 80ec 	bne.w	8000f54 <fsm_manual_run2+0x25c>
			InitLED();
 8000d7c:	f000 fe2c 	bl	80019d8 <InitLED>
			statusy = AUTO_GREEN;
 8000d80:	4b7a      	ldr	r3, [pc, #488]	; (8000f6c <fsm_manual_run2+0x274>)
 8000d82:	2203      	movs	r2, #3
 8000d84:	601a      	str	r2, [r3, #0]
			if(mode2_flag == 1){
 8000d86:	4b7c      	ldr	r3, [pc, #496]	; (8000f78 <fsm_manual_run2+0x280>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	2b01      	cmp	r3, #1
 8000d8c:	d10c      	bne.n	8000da8 <fsm_manual_run2+0xb0>
				setTimer(1,save_counterTimeSet*1000 - 2000);
 8000d8e:	4b7b      	ldr	r3, [pc, #492]	; (8000f7c <fsm_manual_run2+0x284>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d96:	fb02 f303 	mul.w	r3, r2, r3
 8000d9a:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 8000d9e:	4619      	mov	r1, r3
 8000da0:	2001      	movs	r0, #1
 8000da2:	f001 f859 	bl	8001e58 <setTimer>
 8000da6:	e004      	b.n	8000db2 <fsm_manual_run2+0xba>
			}
			else{
				setTimer(1,3000);
 8000da8:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8000dac:	2001      	movs	r0, #1
 8000dae:	f001 f853 	bl	8001e58 <setTimer>
			}
			setTimer(3, 10);
 8000db2:	210a      	movs	r1, #10
 8000db4:	2003      	movs	r0, #3
 8000db6:	f001 f84f 	bl	8001e58 <setTimer>
			number_clock2 = timer_counter[1]/100;
 8000dba:	4b71      	ldr	r3, [pc, #452]	; (8000f80 <fsm_manual_run2+0x288>)
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	4a71      	ldr	r2, [pc, #452]	; (8000f84 <fsm_manual_run2+0x28c>)
 8000dc0:	fb82 1203 	smull	r1, r2, r2, r3
 8000dc4:	1152      	asrs	r2, r2, #5
 8000dc6:	17db      	asrs	r3, r3, #31
 8000dc8:	1ad3      	subs	r3, r2, r3
 8000dca:	4a6f      	ldr	r2, [pc, #444]	; (8000f88 <fsm_manual_run2+0x290>)
 8000dcc:	6013      	str	r3, [r2, #0]
		}
		break;
 8000dce:	e0c1      	b.n	8000f54 <fsm_manual_run2+0x25c>
	case CONF_GREEN:
		fsm_mode();
 8000dd0:	f7ff fb7e 	bl	80004d0 <fsm_mode>
		if(timer_flag[5] == 1){
 8000dd4:	4b66      	ldr	r3, [pc, #408]	; (8000f70 <fsm_manual_run2+0x278>)
 8000dd6:	695b      	ldr	r3, [r3, #20]
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	d106      	bne.n	8000dea <fsm_manual_run2+0xf2>
			DisplayMAN_GREENY();
 8000ddc:	f000 fddc 	bl	8001998 <DisplayMAN_GREENY>
			setTimer(5, 500);
 8000de0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000de4:	2005      	movs	r0, #5
 8000de6:	f001 f837 	bl	8001e58 <setTimer>
		}
		if(counterMode == 4){
 8000dea:	4b62      	ldr	r3, [pc, #392]	; (8000f74 <fsm_manual_run2+0x27c>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	2b04      	cmp	r3, #4
 8000df0:	f040 80b2 	bne.w	8000f58 <fsm_manual_run2+0x260>
			statusy = CONF_YELLOW;
 8000df4:	4b5d      	ldr	r3, [pc, #372]	; (8000f6c <fsm_manual_run2+0x274>)
 8000df6:	220a      	movs	r2, #10
 8000df8:	601a      	str	r2, [r3, #0]
			InitLED();
 8000dfa:	f000 fded 	bl	80019d8 <InitLED>
		}
		break;
 8000dfe:	e0ab      	b.n	8000f58 <fsm_manual_run2+0x260>
	case MAN_GREEN:
		if(timer_flag[5] == 1){
 8000e00:	4b5b      	ldr	r3, [pc, #364]	; (8000f70 <fsm_manual_run2+0x278>)
 8000e02:	695b      	ldr	r3, [r3, #20]
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	d106      	bne.n	8000e16 <fsm_manual_run2+0x11e>
			DisplayMAN_GREENY();
 8000e08:	f000 fdc6 	bl	8001998 <DisplayMAN_GREENY>
			setTimer(5, 500);
 8000e0c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000e10:	2005      	movs	r0, #5
 8000e12:	f001 f821 	bl	8001e58 <setTimer>
		}
		ChangeModeY();
 8000e16:	f7ff fa29 	bl	800026c <ChangeModeY>
		if(timer_flag[1] == 1){
 8000e1a:	4b55      	ldr	r3, [pc, #340]	; (8000f70 <fsm_manual_run2+0x278>)
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	f040 809c 	bne.w	8000f5c <fsm_manual_run2+0x264>
			InitLED();
 8000e24:	f000 fdd8 	bl	80019d8 <InitLED>
			statusy = AUTO_YELLOW;
 8000e28:	4b50      	ldr	r3, [pc, #320]	; (8000f6c <fsm_manual_run2+0x274>)
 8000e2a:	2204      	movs	r2, #4
 8000e2c:	601a      	str	r2, [r3, #0]
			if(mode2_flag == 1){
 8000e2e:	4b52      	ldr	r3, [pc, #328]	; (8000f78 <fsm_manual_run2+0x280>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d10e      	bne.n	8000e54 <fsm_manual_run2+0x15c>
				if(save_counterTimeSet < 2){
 8000e36:	4b51      	ldr	r3, [pc, #324]	; (8000f7c <fsm_manual_run2+0x284>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	dc0f      	bgt.n	8000e5e <fsm_manual_run2+0x166>
					setTimer(1,save_counterTimeSet*1000);
 8000e3e:	4b4f      	ldr	r3, [pc, #316]	; (8000f7c <fsm_manual_run2+0x284>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e46:	fb02 f303 	mul.w	r3, r2, r3
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	f001 f803 	bl	8001e58 <setTimer>
 8000e52:	e004      	b.n	8000e5e <fsm_manual_run2+0x166>
				}
			}
			else{
				setTimer(1,2000);
 8000e54:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000e58:	2001      	movs	r0, #1
 8000e5a:	f000 fffd 	bl	8001e58 <setTimer>
			}
			setTimer(3, 10);
 8000e5e:	210a      	movs	r1, #10
 8000e60:	2003      	movs	r0, #3
 8000e62:	f000 fff9 	bl	8001e58 <setTimer>
			number_clock2 = timer_counter[1]/100;
 8000e66:	4b46      	ldr	r3, [pc, #280]	; (8000f80 <fsm_manual_run2+0x288>)
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	4a46      	ldr	r2, [pc, #280]	; (8000f84 <fsm_manual_run2+0x28c>)
 8000e6c:	fb82 1203 	smull	r1, r2, r2, r3
 8000e70:	1152      	asrs	r2, r2, #5
 8000e72:	17db      	asrs	r3, r3, #31
 8000e74:	1ad3      	subs	r3, r2, r3
 8000e76:	4a44      	ldr	r2, [pc, #272]	; (8000f88 <fsm_manual_run2+0x290>)
 8000e78:	6013      	str	r3, [r2, #0]
		}
		break;
 8000e7a:	e06f      	b.n	8000f5c <fsm_manual_run2+0x264>
	case CONF_YELLOW:
		fsm_mode();
 8000e7c:	f7ff fb28 	bl	80004d0 <fsm_mode>
		if(timer_flag[5] == 1){
 8000e80:	4b3b      	ldr	r3, [pc, #236]	; (8000f70 <fsm_manual_run2+0x278>)
 8000e82:	695b      	ldr	r3, [r3, #20]
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	d106      	bne.n	8000e96 <fsm_manual_run2+0x19e>
			DisplayMAN_YELLOWY();
 8000e88:	f000 fd9c 	bl	80019c4 <DisplayMAN_YELLOWY>
			setTimer(5, 500);
 8000e8c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000e90:	2005      	movs	r0, #5
 8000e92:	f000 ffe1 	bl	8001e58 <setTimer>
		}
		if(counterMode == 1){
 8000e96:	4b37      	ldr	r3, [pc, #220]	; (8000f74 <fsm_manual_run2+0x27c>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d160      	bne.n	8000f60 <fsm_manual_run2+0x268>
			InitLED();
 8000e9e:	f000 fd9b 	bl	80019d8 <InitLED>
			statusy = AUTO_GREEN;
 8000ea2:	4b32      	ldr	r3, [pc, #200]	; (8000f6c <fsm_manual_run2+0x274>)
 8000ea4:	2203      	movs	r2, #3
 8000ea6:	601a      	str	r2, [r3, #0]
			setTimer(1,3000);
 8000ea8:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8000eac:	2001      	movs	r0, #1
 8000eae:	f000 ffd3 	bl	8001e58 <setTimer>
		}
		break;
 8000eb2:	e055      	b.n	8000f60 <fsm_manual_run2+0x268>
	case MAN_YELLOW:
		if(timer_flag[5] == 1){
 8000eb4:	4b2e      	ldr	r3, [pc, #184]	; (8000f70 <fsm_manual_run2+0x278>)
 8000eb6:	695b      	ldr	r3, [r3, #20]
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d106      	bne.n	8000eca <fsm_manual_run2+0x1d2>
			DisplayMAN_YELLOWY();
 8000ebc:	f000 fd82 	bl	80019c4 <DisplayMAN_YELLOWY>
			setTimer(5, 500);
 8000ec0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000ec4:	2005      	movs	r0, #5
 8000ec6:	f000 ffc7 	bl	8001e58 <setTimer>
		}
		ChangeModeY();
 8000eca:	f7ff f9cf 	bl	800026c <ChangeModeY>
		if(timer_flag[1] == 1){
 8000ece:	4b28      	ldr	r3, [pc, #160]	; (8000f70 <fsm_manual_run2+0x278>)
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d146      	bne.n	8000f64 <fsm_manual_run2+0x26c>
			InitLED();
 8000ed6:	f000 fd7f 	bl	80019d8 <InitLED>
			statusy = AUTO_RED;
 8000eda:	4b24      	ldr	r3, [pc, #144]	; (8000f6c <fsm_manual_run2+0x274>)
 8000edc:	2202      	movs	r2, #2
 8000ede:	601a      	str	r2, [r3, #0]
			if(mode3_flag == 1){
 8000ee0:	4b2a      	ldr	r3, [pc, #168]	; (8000f8c <fsm_manual_run2+0x294>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d10c      	bne.n	8000f02 <fsm_manual_run2+0x20a>
				setTimer(1,save_counterTimeSet*1000 + 2000);
 8000ee8:	4b24      	ldr	r3, [pc, #144]	; (8000f7c <fsm_manual_run2+0x284>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ef0:	fb02 f303 	mul.w	r3, r2, r3
 8000ef4:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000ef8:	4619      	mov	r1, r3
 8000efa:	2001      	movs	r0, #1
 8000efc:	f000 ffac 	bl	8001e58 <setTimer>
 8000f00:	e015      	b.n	8000f2e <fsm_manual_run2+0x236>
			}
			else if(mode4_flag == 1){
 8000f02:	4b23      	ldr	r3, [pc, #140]	; (8000f90 <fsm_manual_run2+0x298>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d10c      	bne.n	8000f24 <fsm_manual_run2+0x22c>
				setTimer(1,save_counterTimeSet*1000 + 3000);
 8000f0a:	4b1c      	ldr	r3, [pc, #112]	; (8000f7c <fsm_manual_run2+0x284>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f12:	fb02 f303 	mul.w	r3, r2, r3
 8000f16:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	2001      	movs	r0, #1
 8000f1e:	f000 ff9b 	bl	8001e58 <setTimer>
 8000f22:	e004      	b.n	8000f2e <fsm_manual_run2+0x236>
			}
			else{
				setTimer(1,5000);
 8000f24:	f241 3188 	movw	r1, #5000	; 0x1388
 8000f28:	2001      	movs	r0, #1
 8000f2a:	f000 ff95 	bl	8001e58 <setTimer>
			}
			setTimer(3, 10);
 8000f2e:	210a      	movs	r1, #10
 8000f30:	2003      	movs	r0, #3
 8000f32:	f000 ff91 	bl	8001e58 <setTimer>
			number_clock2 = timer_counter[1]/100;
 8000f36:	4b12      	ldr	r3, [pc, #72]	; (8000f80 <fsm_manual_run2+0x288>)
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	4a12      	ldr	r2, [pc, #72]	; (8000f84 <fsm_manual_run2+0x28c>)
 8000f3c:	fb82 1203 	smull	r1, r2, r2, r3
 8000f40:	1152      	asrs	r2, r2, #5
 8000f42:	17db      	asrs	r3, r3, #31
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	4a10      	ldr	r2, [pc, #64]	; (8000f88 <fsm_manual_run2+0x290>)
 8000f48:	6013      	str	r3, [r2, #0]
		}
		break;
 8000f4a:	e00b      	b.n	8000f64 <fsm_manual_run2+0x26c>
	default:
		break;
 8000f4c:	bf00      	nop
 8000f4e:	e00a      	b.n	8000f66 <fsm_manual_run2+0x26e>
		break;
 8000f50:	bf00      	nop
 8000f52:	e008      	b.n	8000f66 <fsm_manual_run2+0x26e>
		break;
 8000f54:	bf00      	nop
 8000f56:	e006      	b.n	8000f66 <fsm_manual_run2+0x26e>
		break;
 8000f58:	bf00      	nop
 8000f5a:	e004      	b.n	8000f66 <fsm_manual_run2+0x26e>
		break;
 8000f5c:	bf00      	nop
 8000f5e:	e002      	b.n	8000f66 <fsm_manual_run2+0x26e>
		break;
 8000f60:	bf00      	nop
 8000f62:	e000      	b.n	8000f66 <fsm_manual_run2+0x26e>
		break;
 8000f64:	bf00      	nop
	}
}
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000054 	.word	0x20000054
 8000f70:	20000100 	.word	0x20000100
 8000f74:	20000064 	.word	0x20000064
 8000f78:	20000040 	.word	0x20000040
 8000f7c:	2000004c 	.word	0x2000004c
 8000f80:	200000d8 	.word	0x200000d8
 8000f84:	51eb851f 	.word	0x51eb851f
 8000f88:	2000005c 	.word	0x2000005c
 8000f8c:	20000044 	.word	0x20000044
 8000f90:	20000048 	.word	0x20000048

08000f94 <fsm_for_input_processing1>:
enum ButtonState buttonState1 = BUTTON_RELEASED;
enum ButtonState buttonState2 = BUTTON_RELEASED;
enum ButtonState buttonState3 = BUTTON_RELEASED;
int counterMode = 0;
int counterTimeSet = 0;
void fsm_for_input_processing1(void){
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
	switch(buttonState1){
 8000f98:	4b26      	ldr	r3, [pc, #152]	; (8001034 <fsm_for_input_processing1+0xa0>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	2b02      	cmp	r3, #2
 8000f9e:	d038      	beq.n	8001012 <fsm_for_input_processing1+0x7e>
 8000fa0:	2b02      	cmp	r3, #2
 8000fa2:	dc45      	bgt.n	8001030 <fsm_for_input_processing1+0x9c>
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d002      	beq.n	8000fae <fsm_for_input_processing1+0x1a>
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d01e      	beq.n	8000fea <fsm_for_input_processing1+0x56>
			if(!is_button_pressed(0)){
				buttonState1 = BUTTON_RELEASED;
			}
		break;
		}
	}
 8000fac:	e040      	b.n	8001030 <fsm_for_input_processing1+0x9c>
			if(is_button_pressed(0)){
 8000fae:	2000      	movs	r0, #0
 8000fb0:	f000 f9d8 	bl	8001364 <is_button_pressed>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d035      	beq.n	8001026 <fsm_for_input_processing1+0x92>
				buttonState1 = BUTTON_PRESSED ;
 8000fba:	4b1e      	ldr	r3, [pc, #120]	; (8001034 <fsm_for_input_processing1+0xa0>)
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	701a      	strb	r2, [r3, #0]
				if(ProcessButton1() == 1){
 8000fc0:	f000 f8da 	bl	8001178 <ProcessButton1>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b01      	cmp	r3, #1
 8000fc8:	d12d      	bne.n	8001026 <fsm_for_input_processing1+0x92>
					  counterMode++;
 8000fca:	4b1b      	ldr	r3, [pc, #108]	; (8001038 <fsm_for_input_processing1+0xa4>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	3301      	adds	r3, #1
 8000fd0:	4a19      	ldr	r2, [pc, #100]	; (8001038 <fsm_for_input_processing1+0xa4>)
 8000fd2:	6013      	str	r3, [r2, #0]
					  counterTimeSet = 0;
 8000fd4:	4b19      	ldr	r3, [pc, #100]	; (800103c <fsm_for_input_processing1+0xa8>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	601a      	str	r2, [r3, #0]
					  if(counterMode > 4){
 8000fda:	4b17      	ldr	r3, [pc, #92]	; (8001038 <fsm_for_input_processing1+0xa4>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	2b04      	cmp	r3, #4
 8000fe0:	dd21      	ble.n	8001026 <fsm_for_input_processing1+0x92>
						  counterMode = 1;
 8000fe2:	4b15      	ldr	r3, [pc, #84]	; (8001038 <fsm_for_input_processing1+0xa4>)
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	601a      	str	r2, [r3, #0]
		break;
 8000fe8:	e01d      	b.n	8001026 <fsm_for_input_processing1+0x92>
			if(!is_button_pressed(0)){
 8000fea:	2000      	movs	r0, #0
 8000fec:	f000 f9ba 	bl	8001364 <is_button_pressed>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d103      	bne.n	8000ffe <fsm_for_input_processing1+0x6a>
				buttonState1 = BUTTON_RELEASED;
 8000ff6:	4b0f      	ldr	r3, [pc, #60]	; (8001034 <fsm_for_input_processing1+0xa0>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	701a      	strb	r2, [r3, #0]
		break;
 8000ffc:	e015      	b.n	800102a <fsm_for_input_processing1+0x96>
				if(is_button_pressed_1s(0) == 1){
 8000ffe:	2000      	movs	r0, #0
 8001000:	f000 f9ca 	bl	8001398 <is_button_pressed_1s>
 8001004:	4603      	mov	r3, r0
 8001006:	2b01      	cmp	r3, #1
 8001008:	d10f      	bne.n	800102a <fsm_for_input_processing1+0x96>
					buttonState1 = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 800100a:	4b0a      	ldr	r3, [pc, #40]	; (8001034 <fsm_for_input_processing1+0xa0>)
 800100c:	2202      	movs	r2, #2
 800100e:	701a      	strb	r2, [r3, #0]
		break;
 8001010:	e00b      	b.n	800102a <fsm_for_input_processing1+0x96>
			if(!is_button_pressed(0)){
 8001012:	2000      	movs	r0, #0
 8001014:	f000 f9a6 	bl	8001364 <is_button_pressed>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d107      	bne.n	800102e <fsm_for_input_processing1+0x9a>
				buttonState1 = BUTTON_RELEASED;
 800101e:	4b05      	ldr	r3, [pc, #20]	; (8001034 <fsm_for_input_processing1+0xa0>)
 8001020:	2200      	movs	r2, #0
 8001022:	701a      	strb	r2, [r3, #0]
		break;
 8001024:	e003      	b.n	800102e <fsm_for_input_processing1+0x9a>
		break;
 8001026:	bf00      	nop
 8001028:	e002      	b.n	8001030 <fsm_for_input_processing1+0x9c>
		break;
 800102a:	bf00      	nop
 800102c:	e000      	b.n	8001030 <fsm_for_input_processing1+0x9c>
		break;
 800102e:	bf00      	nop
	}
 8001030:	bf00      	nop
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20000060 	.word	0x20000060
 8001038:	20000064 	.word	0x20000064
 800103c:	20000068 	.word	0x20000068

08001040 <fsm_for_input_processing2>:
void fsm_for_input_processing2(void){
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
	switch(buttonState2){
 8001044:	4b25      	ldr	r3, [pc, #148]	; (80010dc <fsm_for_input_processing2+0x9c>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	2b02      	cmp	r3, #2
 800104a:	d035      	beq.n	80010b8 <fsm_for_input_processing2+0x78>
 800104c:	2b02      	cmp	r3, #2
 800104e:	dc42      	bgt.n	80010d6 <fsm_for_input_processing2+0x96>
 8001050:	2b00      	cmp	r3, #0
 8001052:	d002      	beq.n	800105a <fsm_for_input_processing2+0x1a>
 8001054:	2b01      	cmp	r3, #1
 8001056:	d01b      	beq.n	8001090 <fsm_for_input_processing2+0x50>
			if(!is_button_pressed(1)){
				buttonState2 = BUTTON_RELEASED;
			}
		break;
		}
	}
 8001058:	e03d      	b.n	80010d6 <fsm_for_input_processing2+0x96>
			if(is_button_pressed(1)){
 800105a:	2001      	movs	r0, #1
 800105c:	f000 f982 	bl	8001364 <is_button_pressed>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d032      	beq.n	80010cc <fsm_for_input_processing2+0x8c>
				buttonState2 = BUTTON_PRESSED ;
 8001066:	4b1d      	ldr	r3, [pc, #116]	; (80010dc <fsm_for_input_processing2+0x9c>)
 8001068:	2201      	movs	r2, #1
 800106a:	701a      	strb	r2, [r3, #0]
				if(ProcessButton2() == 1){
 800106c:	f000 f8a2 	bl	80011b4 <ProcessButton2>
 8001070:	4603      	mov	r3, r0
 8001072:	2b01      	cmp	r3, #1
 8001074:	d12a      	bne.n	80010cc <fsm_for_input_processing2+0x8c>
					  counterTimeSet++;
 8001076:	4b1a      	ldr	r3, [pc, #104]	; (80010e0 <fsm_for_input_processing2+0xa0>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	3301      	adds	r3, #1
 800107c:	4a18      	ldr	r2, [pc, #96]	; (80010e0 <fsm_for_input_processing2+0xa0>)
 800107e:	6013      	str	r3, [r2, #0]
					  if(counterTimeSet > 99){
 8001080:	4b17      	ldr	r3, [pc, #92]	; (80010e0 <fsm_for_input_processing2+0xa0>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2b63      	cmp	r3, #99	; 0x63
 8001086:	dd21      	ble.n	80010cc <fsm_for_input_processing2+0x8c>
						  counterTimeSet = 0;
 8001088:	4b15      	ldr	r3, [pc, #84]	; (80010e0 <fsm_for_input_processing2+0xa0>)
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
		break;
 800108e:	e01d      	b.n	80010cc <fsm_for_input_processing2+0x8c>
			if(!is_button_pressed(1)){
 8001090:	2001      	movs	r0, #1
 8001092:	f000 f967 	bl	8001364 <is_button_pressed>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d103      	bne.n	80010a4 <fsm_for_input_processing2+0x64>
				buttonState2 = BUTTON_RELEASED;
 800109c:	4b0f      	ldr	r3, [pc, #60]	; (80010dc <fsm_for_input_processing2+0x9c>)
 800109e:	2200      	movs	r2, #0
 80010a0:	701a      	strb	r2, [r3, #0]
		break;
 80010a2:	e015      	b.n	80010d0 <fsm_for_input_processing2+0x90>
				if(is_button_pressed_1s(1) == 1){
 80010a4:	2001      	movs	r0, #1
 80010a6:	f000 f977 	bl	8001398 <is_button_pressed_1s>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d10f      	bne.n	80010d0 <fsm_for_input_processing2+0x90>
					buttonState2 = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 80010b0:	4b0a      	ldr	r3, [pc, #40]	; (80010dc <fsm_for_input_processing2+0x9c>)
 80010b2:	2202      	movs	r2, #2
 80010b4:	701a      	strb	r2, [r3, #0]
		break;
 80010b6:	e00b      	b.n	80010d0 <fsm_for_input_processing2+0x90>
			if(!is_button_pressed(1)){
 80010b8:	2001      	movs	r0, #1
 80010ba:	f000 f953 	bl	8001364 <is_button_pressed>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d107      	bne.n	80010d4 <fsm_for_input_processing2+0x94>
				buttonState2 = BUTTON_RELEASED;
 80010c4:	4b05      	ldr	r3, [pc, #20]	; (80010dc <fsm_for_input_processing2+0x9c>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	701a      	strb	r2, [r3, #0]
		break;
 80010ca:	e003      	b.n	80010d4 <fsm_for_input_processing2+0x94>
		break;
 80010cc:	bf00      	nop
 80010ce:	e002      	b.n	80010d6 <fsm_for_input_processing2+0x96>
		break;
 80010d0:	bf00      	nop
 80010d2:	e000      	b.n	80010d6 <fsm_for_input_processing2+0x96>
		break;
 80010d4:	bf00      	nop
	}
 80010d6:	bf00      	nop
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	20000061 	.word	0x20000061
 80010e0:	20000068 	.word	0x20000068

080010e4 <fsm_for_input_processing3>:
void fsm_for_input_processing3(void){
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
	switch(buttonState3){
 80010e8:	4b1c      	ldr	r3, [pc, #112]	; (800115c <fsm_for_input_processing3+0x78>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	2b02      	cmp	r3, #2
 80010ee:	d024      	beq.n	800113a <fsm_for_input_processing3+0x56>
 80010f0:	2b02      	cmp	r3, #2
 80010f2:	dc31      	bgt.n	8001158 <fsm_for_input_processing3+0x74>
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d002      	beq.n	80010fe <fsm_for_input_processing3+0x1a>
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d00a      	beq.n	8001112 <fsm_for_input_processing3+0x2e>
			if(!is_button_pressed(2)){
				buttonState3 = BUTTON_RELEASED;
			}
		break;
		}
	}
 80010fc:	e02c      	b.n	8001158 <fsm_for_input_processing3+0x74>
			if(is_button_pressed(2)){
 80010fe:	2002      	movs	r0, #2
 8001100:	f000 f930 	bl	8001364 <is_button_pressed>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d021      	beq.n	800114e <fsm_for_input_processing3+0x6a>
				buttonState3 = BUTTON_PRESSED ;
 800110a:	4b14      	ldr	r3, [pc, #80]	; (800115c <fsm_for_input_processing3+0x78>)
 800110c:	2201      	movs	r2, #1
 800110e:	701a      	strb	r2, [r3, #0]
		break;
 8001110:	e01d      	b.n	800114e <fsm_for_input_processing3+0x6a>
			if(!is_button_pressed(2)){
 8001112:	2002      	movs	r0, #2
 8001114:	f000 f926 	bl	8001364 <is_button_pressed>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d103      	bne.n	8001126 <fsm_for_input_processing3+0x42>
				buttonState3 = BUTTON_RELEASED;
 800111e:	4b0f      	ldr	r3, [pc, #60]	; (800115c <fsm_for_input_processing3+0x78>)
 8001120:	2200      	movs	r2, #0
 8001122:	701a      	strb	r2, [r3, #0]
		break;
 8001124:	e015      	b.n	8001152 <fsm_for_input_processing3+0x6e>
				if(is_button_pressed_1s(2) == 1){
 8001126:	2002      	movs	r0, #2
 8001128:	f000 f936 	bl	8001398 <is_button_pressed_1s>
 800112c:	4603      	mov	r3, r0
 800112e:	2b01      	cmp	r3, #1
 8001130:	d10f      	bne.n	8001152 <fsm_for_input_processing3+0x6e>
					buttonState3 = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 8001132:	4b0a      	ldr	r3, [pc, #40]	; (800115c <fsm_for_input_processing3+0x78>)
 8001134:	2202      	movs	r2, #2
 8001136:	701a      	strb	r2, [r3, #0]
		break;
 8001138:	e00b      	b.n	8001152 <fsm_for_input_processing3+0x6e>
			if(!is_button_pressed(2)){
 800113a:	2002      	movs	r0, #2
 800113c:	f000 f912 	bl	8001364 <is_button_pressed>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d107      	bne.n	8001156 <fsm_for_input_processing3+0x72>
				buttonState3 = BUTTON_RELEASED;
 8001146:	4b05      	ldr	r3, [pc, #20]	; (800115c <fsm_for_input_processing3+0x78>)
 8001148:	2200      	movs	r2, #0
 800114a:	701a      	strb	r2, [r3, #0]
		break;
 800114c:	e003      	b.n	8001156 <fsm_for_input_processing3+0x72>
		break;
 800114e:	bf00      	nop
 8001150:	e002      	b.n	8001158 <fsm_for_input_processing3+0x74>
		break;
 8001152:	bf00      	nop
 8001154:	e000      	b.n	8001158 <fsm_for_input_processing3+0x74>
		break;
 8001156:	bf00      	nop
	}
 8001158:	bf00      	nop
 800115a:	bd80      	pop	{r7, pc}
 800115c:	20000062 	.word	0x20000062

08001160 <Button1Run>:
static uint8_t flagForButtonPress1s[N0_OF_BUTTONS];
static uint16_t counterForButtonPress1s[N0_OF_BUTTONS];
int button1_flag = 0;
int button2_flag = 0;
int button3_flag = 0;
void Button1Run(void){
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
 	button1_flag = 1;
 8001164:	4b03      	ldr	r3, [pc, #12]	; (8001174 <Button1Run+0x14>)
 8001166:	2201      	movs	r2, #1
 8001168:	601a      	str	r2, [r3, #0]
 }
 800116a:	bf00      	nop
 800116c:	46bd      	mov	sp, r7
 800116e:	bc80      	pop	{r7}
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	20000084 	.word	0x20000084

08001178 <ProcessButton1>:
int ProcessButton1(void){
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
	 if(button1_flag == 1){
 800117c:	4b06      	ldr	r3, [pc, #24]	; (8001198 <ProcessButton1+0x20>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	2b01      	cmp	r3, #1
 8001182:	d104      	bne.n	800118e <ProcessButton1+0x16>
		 button1_flag = 0;
 8001184:	4b04      	ldr	r3, [pc, #16]	; (8001198 <ProcessButton1+0x20>)
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
		 return 1;
 800118a:	2301      	movs	r3, #1
 800118c:	e000      	b.n	8001190 <ProcessButton1+0x18>
	 }
	 return 0;
 800118e:	2300      	movs	r3, #0
 }
 8001190:	4618      	mov	r0, r3
 8001192:	46bd      	mov	sp, r7
 8001194:	bc80      	pop	{r7}
 8001196:	4770      	bx	lr
 8001198:	20000084 	.word	0x20000084

0800119c <Button2Run>:
void Button2Run(void){
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
 	button2_flag = 1;
 80011a0:	4b03      	ldr	r3, [pc, #12]	; (80011b0 <Button2Run+0x14>)
 80011a2:	2201      	movs	r2, #1
 80011a4:	601a      	str	r2, [r3, #0]
 }
 80011a6:	bf00      	nop
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bc80      	pop	{r7}
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	20000088 	.word	0x20000088

080011b4 <ProcessButton2>:
int ProcessButton2(void){
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
	 if(button2_flag == 1){
 80011b8:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <ProcessButton2+0x20>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d104      	bne.n	80011ca <ProcessButton2+0x16>
		 button2_flag = 0;
 80011c0:	4b04      	ldr	r3, [pc, #16]	; (80011d4 <ProcessButton2+0x20>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
		 return 1;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e000      	b.n	80011cc <ProcessButton2+0x18>
	 }
	 return 0;
 80011ca:	2300      	movs	r3, #0
 }
 80011cc:	4618      	mov	r0, r3
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bc80      	pop	{r7}
 80011d2:	4770      	bx	lr
 80011d4:	20000088 	.word	0x20000088

080011d8 <Button3Run>:
void Button3Run(void){
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
 	button3_flag = 1;
 80011dc:	4b03      	ldr	r3, [pc, #12]	; (80011ec <Button3Run+0x14>)
 80011de:	2201      	movs	r2, #1
 80011e0:	601a      	str	r2, [r3, #0]
 }
 80011e2:	bf00      	nop
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bc80      	pop	{r7}
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	2000008c 	.word	0x2000008c

080011f0 <ProcessButton3>:
int ProcessButton3(void){
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
	 if(button3_flag == 1){
 80011f4:	4b06      	ldr	r3, [pc, #24]	; (8001210 <ProcessButton3+0x20>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d104      	bne.n	8001206 <ProcessButton3+0x16>
		 button3_flag = 0;
 80011fc:	4b04      	ldr	r3, [pc, #16]	; (8001210 <ProcessButton3+0x20>)
 80011fe:	2200      	movs	r2, #0
 8001200:	601a      	str	r2, [r3, #0]
		 return 1;
 8001202:	2301      	movs	r3, #1
 8001204:	e000      	b.n	8001208 <ProcessButton3+0x18>
	 }
	 return 0;
 8001206:	2300      	movs	r3, #0
 }
 8001208:	4618      	mov	r0, r3
 800120a:	46bd      	mov	sp, r7
 800120c:	bc80      	pop	{r7}
 800120e:	4770      	bx	lr
 8001210:	2000008c 	.word	0x2000008c

08001214 <button_reading>:
		void button_reading(void){
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
			 for(unsigned char i = 0;i < N0_OF_BUTTONS;i++){
 800121a:	2300      	movs	r3, #0
 800121c:	71fb      	strb	r3, [r7, #7]
 800121e:	e08b      	b.n	8001338 <button_reading+0x124>
				 debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8001220:	79fa      	ldrb	r2, [r7, #7]
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	4949      	ldr	r1, [pc, #292]	; (800134c <button_reading+0x138>)
 8001226:	5c89      	ldrb	r1, [r1, r2]
 8001228:	4a49      	ldr	r2, [pc, #292]	; (8001350 <button_reading+0x13c>)
 800122a:	54d1      	strb	r1, [r2, r3]
				 if(i == 0){
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d108      	bne.n	8001244 <button_reading+0x30>
				 debounceButtonBuffer1[0] = HAL_GPIO_ReadPin(Button_GPIO_Port,Button_Pin);
 8001232:	2101      	movs	r1, #1
 8001234:	4847      	ldr	r0, [pc, #284]	; (8001354 <button_reading+0x140>)
 8001236:	f001 f97f 	bl	8002538 <HAL_GPIO_ReadPin>
 800123a:	4603      	mov	r3, r0
 800123c:	461a      	mov	r2, r3
 800123e:	4b43      	ldr	r3, [pc, #268]	; (800134c <button_reading+0x138>)
 8001240:	701a      	strb	r2, [r3, #0]
 8001242:	e016      	b.n	8001272 <button_reading+0x5e>
				 }
				 else if(i == 1){
 8001244:	79fb      	ldrb	r3, [r7, #7]
 8001246:	2b01      	cmp	r3, #1
 8001248:	d108      	bne.n	800125c <button_reading+0x48>
				 debounceButtonBuffer1[1] = HAL_GPIO_ReadPin(Button1_GPIO_Port,Button1_Pin);
 800124a:	2102      	movs	r1, #2
 800124c:	4841      	ldr	r0, [pc, #260]	; (8001354 <button_reading+0x140>)
 800124e:	f001 f973 	bl	8002538 <HAL_GPIO_ReadPin>
 8001252:	4603      	mov	r3, r0
 8001254:	461a      	mov	r2, r3
 8001256:	4b3d      	ldr	r3, [pc, #244]	; (800134c <button_reading+0x138>)
 8001258:	705a      	strb	r2, [r3, #1]
 800125a:	e00a      	b.n	8001272 <button_reading+0x5e>
				 }
				 else if(i == 2){
 800125c:	79fb      	ldrb	r3, [r7, #7]
 800125e:	2b02      	cmp	r3, #2
 8001260:	d107      	bne.n	8001272 <button_reading+0x5e>
				 debounceButtonBuffer1[2] = HAL_GPIO_ReadPin(Button2_GPIO_Port,Button2_Pin);
 8001262:	2104      	movs	r1, #4
 8001264:	483b      	ldr	r0, [pc, #236]	; (8001354 <button_reading+0x140>)
 8001266:	f001 f967 	bl	8002538 <HAL_GPIO_ReadPin>
 800126a:	4603      	mov	r3, r0
 800126c:	461a      	mov	r2, r3
 800126e:	4b37      	ldr	r3, [pc, #220]	; (800134c <button_reading+0x138>)
 8001270:	709a      	strb	r2, [r3, #2]
				 }
				 if(debounceButtonBuffer1[i] == debounceButtonBuffer2[i]){
 8001272:	79fb      	ldrb	r3, [r7, #7]
 8001274:	4a35      	ldr	r2, [pc, #212]	; (800134c <button_reading+0x138>)
 8001276:	5cd2      	ldrb	r2, [r2, r3]
 8001278:	79fb      	ldrb	r3, [r7, #7]
 800127a:	4935      	ldr	r1, [pc, #212]	; (8001350 <button_reading+0x13c>)
 800127c:	5ccb      	ldrb	r3, [r1, r3]
 800127e:	429a      	cmp	r2, r3
 8001280:	d14e      	bne.n	8001320 <button_reading+0x10c>
					 buttonBuffer[i] = debounceButtonBuffer1[i];
 8001282:	79fa      	ldrb	r2, [r7, #7]
 8001284:	79fb      	ldrb	r3, [r7, #7]
 8001286:	4931      	ldr	r1, [pc, #196]	; (800134c <button_reading+0x138>)
 8001288:	5c89      	ldrb	r1, [r1, r2]
 800128a:	4a33      	ldr	r2, [pc, #204]	; (8001358 <button_reading+0x144>)
 800128c:	54d1      	strb	r1, [r2, r3]
					 if(buttonBuffer[i] == BUTTON_IS_PRESSED){
 800128e:	79fb      	ldrb	r3, [r7, #7]
 8001290:	4a31      	ldr	r2, [pc, #196]	; (8001358 <button_reading+0x144>)
 8001292:	5cd3      	ldrb	r3, [r2, r3]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d14c      	bne.n	8001332 <button_reading+0x11e>
						 if(i == 0){
 8001298:	79fb      	ldrb	r3, [r7, #7]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d102      	bne.n	80012a4 <button_reading+0x90>
							 Button1Run();
 800129e:	f7ff ff5f 	bl	8001160 <Button1Run>
 80012a2:	e00a      	b.n	80012ba <button_reading+0xa6>
						 }
						 else if(i == 1){
 80012a4:	79fb      	ldrb	r3, [r7, #7]
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d102      	bne.n	80012b0 <button_reading+0x9c>
							 Button2Run();
 80012aa:	f7ff ff77 	bl	800119c <Button2Run>
 80012ae:	e004      	b.n	80012ba <button_reading+0xa6>
						 }
						 else if(i == 2){
 80012b0:	79fb      	ldrb	r3, [r7, #7]
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d101      	bne.n	80012ba <button_reading+0xa6>
							 Button3Run();
 80012b6:	f7ff ff8f 	bl	80011d8 <Button3Run>
						 }
						 if(counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING && flagForButtonPress1s[i] == 0){
 80012ba:	79fb      	ldrb	r3, [r7, #7]
 80012bc:	4a27      	ldr	r2, [pc, #156]	; (800135c <button_reading+0x148>)
 80012be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012c2:	2b63      	cmp	r3, #99	; 0x63
 80012c4:	d80e      	bhi.n	80012e4 <button_reading+0xd0>
 80012c6:	79fb      	ldrb	r3, [r7, #7]
 80012c8:	4a25      	ldr	r2, [pc, #148]	; (8001360 <button_reading+0x14c>)
 80012ca:	5cd3      	ldrb	r3, [r2, r3]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d109      	bne.n	80012e4 <button_reading+0xd0>
							 counterForButtonPress1s[i]++;
 80012d0:	79fb      	ldrb	r3, [r7, #7]
 80012d2:	4a22      	ldr	r2, [pc, #136]	; (800135c <button_reading+0x148>)
 80012d4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80012d8:	3201      	adds	r2, #1
 80012da:	b291      	uxth	r1, r2
 80012dc:	4a1f      	ldr	r2, [pc, #124]	; (800135c <button_reading+0x148>)
 80012de:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80012e2:	e026      	b.n	8001332 <button_reading+0x11e>
						 }
						 else{
							 flagForButtonPress1s[i] = 1;
 80012e4:	79fb      	ldrb	r3, [r7, #7]
 80012e6:	4a1e      	ldr	r2, [pc, #120]	; (8001360 <button_reading+0x14c>)
 80012e8:	2101      	movs	r1, #1
 80012ea:	54d1      	strb	r1, [r2, r3]

							 if(counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING2){
 80012ec:	79fb      	ldrb	r3, [r7, #7]
 80012ee:	4a1b      	ldr	r2, [pc, #108]	; (800135c <button_reading+0x148>)
 80012f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012f4:	2b95      	cmp	r3, #149	; 0x95
 80012f6:	d809      	bhi.n	800130c <button_reading+0xf8>
								counterForButtonPress1s[i]++;
 80012f8:	79fb      	ldrb	r3, [r7, #7]
 80012fa:	4a18      	ldr	r2, [pc, #96]	; (800135c <button_reading+0x148>)
 80012fc:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001300:	3201      	adds	r2, #1
 8001302:	b291      	uxth	r1, r2
 8001304:	4a15      	ldr	r2, [pc, #84]	; (800135c <button_reading+0x148>)
 8001306:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800130a:	e012      	b.n	8001332 <button_reading+0x11e>
							 }
							 else{
								buttonBuffer[i] = BUTTON_IS_RELEASED;
 800130c:	79fb      	ldrb	r3, [r7, #7]
 800130e:	4a12      	ldr	r2, [pc, #72]	; (8001358 <button_reading+0x144>)
 8001310:	2101      	movs	r1, #1
 8001312:	54d1      	strb	r1, [r2, r3]
								counterForButtonPress1s[i] = 100;
 8001314:	79fb      	ldrb	r3, [r7, #7]
 8001316:	4a11      	ldr	r2, [pc, #68]	; (800135c <button_reading+0x148>)
 8001318:	2164      	movs	r1, #100	; 0x64
 800131a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800131e:	e008      	b.n	8001332 <button_reading+0x11e>

						 }
					 }
				 }
					 else{
						 counterForButtonPress1s[i] = 0;
 8001320:	79fb      	ldrb	r3, [r7, #7]
 8001322:	4a0e      	ldr	r2, [pc, #56]	; (800135c <button_reading+0x148>)
 8001324:	2100      	movs	r1, #0
 8001326:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						 flagForButtonPress1s[i] = 0;
 800132a:	79fb      	ldrb	r3, [r7, #7]
 800132c:	4a0c      	ldr	r2, [pc, #48]	; (8001360 <button_reading+0x14c>)
 800132e:	2100      	movs	r1, #0
 8001330:	54d1      	strb	r1, [r2, r3]
			 for(unsigned char i = 0;i < N0_OF_BUTTONS;i++){
 8001332:	79fb      	ldrb	r3, [r7, #7]
 8001334:	3301      	adds	r3, #1
 8001336:	71fb      	strb	r3, [r7, #7]
 8001338:	79fb      	ldrb	r3, [r7, #7]
 800133a:	2b02      	cmp	r3, #2
 800133c:	f67f af70 	bls.w	8001220 <button_reading+0xc>
					 }
				 }
			}
 8001340:	bf00      	nop
 8001342:	bf00      	nop
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	20000070 	.word	0x20000070
 8001350:	20000074 	.word	0x20000074
 8001354:	40010c00 	.word	0x40010c00
 8001358:	2000006c 	.word	0x2000006c
 800135c:	2000007c 	.word	0x2000007c
 8001360:	20000078 	.word	0x20000078

08001364 <is_button_pressed>:
unsigned char is_button_pressed(uint8_t index){
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	4603      	mov	r3, r0
 800136c:	71fb      	strb	r3, [r7, #7]
	if(index >= N0_OF_BUTTONS) return 0;
 800136e:	79fb      	ldrb	r3, [r7, #7]
 8001370:	2b02      	cmp	r3, #2
 8001372:	d901      	bls.n	8001378 <is_button_pressed+0x14>
 8001374:	2300      	movs	r3, #0
 8001376:	e007      	b.n	8001388 <is_button_pressed+0x24>
	return (buttonBuffer[index] == BUTTON_IS_PRESSED);
 8001378:	79fb      	ldrb	r3, [r7, #7]
 800137a:	4a06      	ldr	r2, [pc, #24]	; (8001394 <is_button_pressed+0x30>)
 800137c:	5cd3      	ldrb	r3, [r2, r3]
 800137e:	2b00      	cmp	r3, #0
 8001380:	bf0c      	ite	eq
 8001382:	2301      	moveq	r3, #1
 8001384:	2300      	movne	r3, #0
 8001386:	b2db      	uxtb	r3, r3
}
 8001388:	4618      	mov	r0, r3
 800138a:	370c      	adds	r7, #12
 800138c:	46bd      	mov	sp, r7
 800138e:	bc80      	pop	{r7}
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	2000006c 	.word	0x2000006c

08001398 <is_button_pressed_1s>:
unsigned char is_button_pressed_1s(unsigned char index){
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	71fb      	strb	r3, [r7, #7]
	if(index >= N0_OF_BUTTONS) return 0xff;
 80013a2:	79fb      	ldrb	r3, [r7, #7]
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d901      	bls.n	80013ac <is_button_pressed_1s+0x14>
 80013a8:	23ff      	movs	r3, #255	; 0xff
 80013aa:	e007      	b.n	80013bc <is_button_pressed_1s+0x24>
	return (flagForButtonPress1s[index] == 1) ;
 80013ac:	79fb      	ldrb	r3, [r7, #7]
 80013ae:	4a06      	ldr	r2, [pc, #24]	; (80013c8 <is_button_pressed_1s+0x30>)
 80013b0:	5cd3      	ldrb	r3, [r2, r3]
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	bf0c      	ite	eq
 80013b6:	2301      	moveq	r3, #1
 80013b8:	2300      	movne	r3, #0
 80013ba:	b2db      	uxtb	r3, r3
}
 80013bc:	4618      	mov	r0, r3
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bc80      	pop	{r7}
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	20000078 	.word	0x20000078

080013cc <Display7Seg>:
 *
 *  Created on: Sep 27, 2024
 *      Author: Genki
 */
#include "main.h"
void Display7Seg(int x){
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
	if(x == 0){
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d128      	bne.n	800142c <Display7Seg+0x60>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80013da:	2200      	movs	r2, #0
 80013dc:	2180      	movs	r1, #128	; 0x80
 80013de:	48d2      	ldr	r0, [pc, #840]	; (8001728 <Display7Seg+0x35c>)
 80013e0:	f001 f8c1 	bl	8002566 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80013e4:	2200      	movs	r2, #0
 80013e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013ea:	48cf      	ldr	r0, [pc, #828]	; (8001728 <Display7Seg+0x35c>)
 80013ec:	f001 f8bb 	bl	8002566 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 80013f0:	2200      	movs	r2, #0
 80013f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013f6:	48cc      	ldr	r0, [pc, #816]	; (8001728 <Display7Seg+0x35c>)
 80013f8:	f001 f8b5 	bl	8002566 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 80013fc:	2200      	movs	r2, #0
 80013fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001402:	48c9      	ldr	r0, [pc, #804]	; (8001728 <Display7Seg+0x35c>)
 8001404:	f001 f8af 	bl	8002566 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_RESET);
 8001408:	2200      	movs	r2, #0
 800140a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800140e:	48c6      	ldr	r0, [pc, #792]	; (8001728 <Display7Seg+0x35c>)
 8001410:	f001 f8a9 	bl	8002566 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 8001414:	2200      	movs	r2, #0
 8001416:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800141a:	48c3      	ldr	r0, [pc, #780]	; (8001728 <Display7Seg+0x35c>)
 800141c:	f001 f8a3 	bl	8002566 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_SET);
 8001420:	2201      	movs	r2, #1
 8001422:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001426:	48c0      	ldr	r0, [pc, #768]	; (8001728 <Display7Seg+0x35c>)
 8001428:	f001 f89d 	bl	8002566 <HAL_GPIO_WritePin>
	}
	if(x == 1){
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2b01      	cmp	r3, #1
 8001430:	d128      	bne.n	8001484 <Display7Seg+0xb8>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8001432:	2201      	movs	r2, #1
 8001434:	2180      	movs	r1, #128	; 0x80
 8001436:	48bc      	ldr	r0, [pc, #752]	; (8001728 <Display7Seg+0x35c>)
 8001438:	f001 f895 	bl	8002566 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 800143c:	2200      	movs	r2, #0
 800143e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001442:	48b9      	ldr	r0, [pc, #740]	; (8001728 <Display7Seg+0x35c>)
 8001444:	f001 f88f 	bl	8002566 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8001448:	2200      	movs	r2, #0
 800144a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800144e:	48b6      	ldr	r0, [pc, #728]	; (8001728 <Display7Seg+0x35c>)
 8001450:	f001 f889 	bl	8002566 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 8001454:	2201      	movs	r2, #1
 8001456:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800145a:	48b3      	ldr	r0, [pc, #716]	; (8001728 <Display7Seg+0x35c>)
 800145c:	f001 f883 	bl	8002566 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_SET);
 8001460:	2201      	movs	r2, #1
 8001462:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001466:	48b0      	ldr	r0, [pc, #704]	; (8001728 <Display7Seg+0x35c>)
 8001468:	f001 f87d 	bl	8002566 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_SET);
 800146c:	2201      	movs	r2, #1
 800146e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001472:	48ad      	ldr	r0, [pc, #692]	; (8001728 <Display7Seg+0x35c>)
 8001474:	f001 f877 	bl	8002566 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_SET);
 8001478:	2201      	movs	r2, #1
 800147a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800147e:	48aa      	ldr	r0, [pc, #680]	; (8001728 <Display7Seg+0x35c>)
 8001480:	f001 f871 	bl	8002566 <HAL_GPIO_WritePin>
		}
	if(x == 2){
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2b02      	cmp	r3, #2
 8001488:	d128      	bne.n	80014dc <Display7Seg+0x110>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800148a:	2200      	movs	r2, #0
 800148c:	2180      	movs	r1, #128	; 0x80
 800148e:	48a6      	ldr	r0, [pc, #664]	; (8001728 <Display7Seg+0x35c>)
 8001490:	f001 f869 	bl	8002566 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8001494:	2200      	movs	r2, #0
 8001496:	f44f 7180 	mov.w	r1, #256	; 0x100
 800149a:	48a3      	ldr	r0, [pc, #652]	; (8001728 <Display7Seg+0x35c>)
 800149c:	f001 f863 	bl	8002566 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 80014a0:	2201      	movs	r2, #1
 80014a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014a6:	48a0      	ldr	r0, [pc, #640]	; (8001728 <Display7Seg+0x35c>)
 80014a8:	f001 f85d 	bl	8002566 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 80014ac:	2200      	movs	r2, #0
 80014ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014b2:	489d      	ldr	r0, [pc, #628]	; (8001728 <Display7Seg+0x35c>)
 80014b4:	f001 f857 	bl	8002566 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_RESET);
 80014b8:	2200      	movs	r2, #0
 80014ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014be:	489a      	ldr	r0, [pc, #616]	; (8001728 <Display7Seg+0x35c>)
 80014c0:	f001 f851 	bl	8002566 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_SET);
 80014c4:	2201      	movs	r2, #1
 80014c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014ca:	4897      	ldr	r0, [pc, #604]	; (8001728 <Display7Seg+0x35c>)
 80014cc:	f001 f84b 	bl	8002566 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_RESET);
 80014d0:	2200      	movs	r2, #0
 80014d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014d6:	4894      	ldr	r0, [pc, #592]	; (8001728 <Display7Seg+0x35c>)
 80014d8:	f001 f845 	bl	8002566 <HAL_GPIO_WritePin>
		}
	if(x == 3){
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2b03      	cmp	r3, #3
 80014e0:	d128      	bne.n	8001534 <Display7Seg+0x168>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80014e2:	2200      	movs	r2, #0
 80014e4:	2180      	movs	r1, #128	; 0x80
 80014e6:	4890      	ldr	r0, [pc, #576]	; (8001728 <Display7Seg+0x35c>)
 80014e8:	f001 f83d 	bl	8002566 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80014ec:	2200      	movs	r2, #0
 80014ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014f2:	488d      	ldr	r0, [pc, #564]	; (8001728 <Display7Seg+0x35c>)
 80014f4:	f001 f837 	bl	8002566 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 80014f8:	2200      	movs	r2, #0
 80014fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014fe:	488a      	ldr	r0, [pc, #552]	; (8001728 <Display7Seg+0x35c>)
 8001500:	f001 f831 	bl	8002566 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8001504:	2200      	movs	r2, #0
 8001506:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800150a:	4887      	ldr	r0, [pc, #540]	; (8001728 <Display7Seg+0x35c>)
 800150c:	f001 f82b 	bl	8002566 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_SET);
 8001510:	2201      	movs	r2, #1
 8001512:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001516:	4884      	ldr	r0, [pc, #528]	; (8001728 <Display7Seg+0x35c>)
 8001518:	f001 f825 	bl	8002566 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_SET);
 800151c:	2201      	movs	r2, #1
 800151e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001522:	4881      	ldr	r0, [pc, #516]	; (8001728 <Display7Seg+0x35c>)
 8001524:	f001 f81f 	bl	8002566 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_RESET);
 8001528:	2200      	movs	r2, #0
 800152a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800152e:	487e      	ldr	r0, [pc, #504]	; (8001728 <Display7Seg+0x35c>)
 8001530:	f001 f819 	bl	8002566 <HAL_GPIO_WritePin>
		}
	if(x == 4){
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2b04      	cmp	r3, #4
 8001538:	d128      	bne.n	800158c <Display7Seg+0x1c0>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 800153a:	2201      	movs	r2, #1
 800153c:	2180      	movs	r1, #128	; 0x80
 800153e:	487a      	ldr	r0, [pc, #488]	; (8001728 <Display7Seg+0x35c>)
 8001540:	f001 f811 	bl	8002566 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8001544:	2200      	movs	r2, #0
 8001546:	f44f 7180 	mov.w	r1, #256	; 0x100
 800154a:	4877      	ldr	r0, [pc, #476]	; (8001728 <Display7Seg+0x35c>)
 800154c:	f001 f80b 	bl	8002566 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8001550:	2200      	movs	r2, #0
 8001552:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001556:	4874      	ldr	r0, [pc, #464]	; (8001728 <Display7Seg+0x35c>)
 8001558:	f001 f805 	bl	8002566 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 800155c:	2201      	movs	r2, #1
 800155e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001562:	4871      	ldr	r0, [pc, #452]	; (8001728 <Display7Seg+0x35c>)
 8001564:	f000 ffff 	bl	8002566 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_SET);
 8001568:	2201      	movs	r2, #1
 800156a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800156e:	486e      	ldr	r0, [pc, #440]	; (8001728 <Display7Seg+0x35c>)
 8001570:	f000 fff9 	bl	8002566 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 8001574:	2200      	movs	r2, #0
 8001576:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800157a:	486b      	ldr	r0, [pc, #428]	; (8001728 <Display7Seg+0x35c>)
 800157c:	f000 fff3 	bl	8002566 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_RESET);
 8001580:	2200      	movs	r2, #0
 8001582:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001586:	4868      	ldr	r0, [pc, #416]	; (8001728 <Display7Seg+0x35c>)
 8001588:	f000 ffed 	bl	8002566 <HAL_GPIO_WritePin>
		}
	if(x == 5){
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2b05      	cmp	r3, #5
 8001590:	d128      	bne.n	80015e4 <Display7Seg+0x218>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001592:	2200      	movs	r2, #0
 8001594:	2180      	movs	r1, #128	; 0x80
 8001596:	4864      	ldr	r0, [pc, #400]	; (8001728 <Display7Seg+0x35c>)
 8001598:	f000 ffe5 	bl	8002566 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 800159c:	2201      	movs	r2, #1
 800159e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015a2:	4861      	ldr	r0, [pc, #388]	; (8001728 <Display7Seg+0x35c>)
 80015a4:	f000 ffdf 	bl	8002566 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 80015a8:	2200      	movs	r2, #0
 80015aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015ae:	485e      	ldr	r0, [pc, #376]	; (8001728 <Display7Seg+0x35c>)
 80015b0:	f000 ffd9 	bl	8002566 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 80015b4:	2200      	movs	r2, #0
 80015b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015ba:	485b      	ldr	r0, [pc, #364]	; (8001728 <Display7Seg+0x35c>)
 80015bc:	f000 ffd3 	bl	8002566 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_SET);
 80015c0:	2201      	movs	r2, #1
 80015c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015c6:	4858      	ldr	r0, [pc, #352]	; (8001728 <Display7Seg+0x35c>)
 80015c8:	f000 ffcd 	bl	8002566 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 80015cc:	2200      	movs	r2, #0
 80015ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015d2:	4855      	ldr	r0, [pc, #340]	; (8001728 <Display7Seg+0x35c>)
 80015d4:	f000 ffc7 	bl	8002566 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_RESET);
 80015d8:	2200      	movs	r2, #0
 80015da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015de:	4852      	ldr	r0, [pc, #328]	; (8001728 <Display7Seg+0x35c>)
 80015e0:	f000 ffc1 	bl	8002566 <HAL_GPIO_WritePin>
		}
	if(x == 6){
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2b06      	cmp	r3, #6
 80015e8:	d128      	bne.n	800163c <Display7Seg+0x270>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80015ea:	2200      	movs	r2, #0
 80015ec:	2180      	movs	r1, #128	; 0x80
 80015ee:	484e      	ldr	r0, [pc, #312]	; (8001728 <Display7Seg+0x35c>)
 80015f0:	f000 ffb9 	bl	8002566 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80015f4:	2201      	movs	r2, #1
 80015f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015fa:	484b      	ldr	r0, [pc, #300]	; (8001728 <Display7Seg+0x35c>)
 80015fc:	f000 ffb3 	bl	8002566 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8001600:	2200      	movs	r2, #0
 8001602:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001606:	4848      	ldr	r0, [pc, #288]	; (8001728 <Display7Seg+0x35c>)
 8001608:	f000 ffad 	bl	8002566 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 800160c:	2200      	movs	r2, #0
 800160e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001612:	4845      	ldr	r0, [pc, #276]	; (8001728 <Display7Seg+0x35c>)
 8001614:	f000 ffa7 	bl	8002566 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_RESET);
 8001618:	2200      	movs	r2, #0
 800161a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800161e:	4842      	ldr	r0, [pc, #264]	; (8001728 <Display7Seg+0x35c>)
 8001620:	f000 ffa1 	bl	8002566 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 8001624:	2200      	movs	r2, #0
 8001626:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800162a:	483f      	ldr	r0, [pc, #252]	; (8001728 <Display7Seg+0x35c>)
 800162c:	f000 ff9b 	bl	8002566 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_RESET);
 8001630:	2200      	movs	r2, #0
 8001632:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001636:	483c      	ldr	r0, [pc, #240]	; (8001728 <Display7Seg+0x35c>)
 8001638:	f000 ff95 	bl	8002566 <HAL_GPIO_WritePin>
		}
	if(x == 7){
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2b07      	cmp	r3, #7
 8001640:	d128      	bne.n	8001694 <Display7Seg+0x2c8>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001642:	2200      	movs	r2, #0
 8001644:	2180      	movs	r1, #128	; 0x80
 8001646:	4838      	ldr	r0, [pc, #224]	; (8001728 <Display7Seg+0x35c>)
 8001648:	f000 ff8d 	bl	8002566 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 800164c:	2200      	movs	r2, #0
 800164e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001652:	4835      	ldr	r0, [pc, #212]	; (8001728 <Display7Seg+0x35c>)
 8001654:	f000 ff87 	bl	8002566 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8001658:	2200      	movs	r2, #0
 800165a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800165e:	4832      	ldr	r0, [pc, #200]	; (8001728 <Display7Seg+0x35c>)
 8001660:	f000 ff81 	bl	8002566 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 8001664:	2201      	movs	r2, #1
 8001666:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800166a:	482f      	ldr	r0, [pc, #188]	; (8001728 <Display7Seg+0x35c>)
 800166c:	f000 ff7b 	bl	8002566 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_SET);
 8001670:	2201      	movs	r2, #1
 8001672:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001676:	482c      	ldr	r0, [pc, #176]	; (8001728 <Display7Seg+0x35c>)
 8001678:	f000 ff75 	bl	8002566 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_SET);
 800167c:	2201      	movs	r2, #1
 800167e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001682:	4829      	ldr	r0, [pc, #164]	; (8001728 <Display7Seg+0x35c>)
 8001684:	f000 ff6f 	bl	8002566 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_SET);
 8001688:	2201      	movs	r2, #1
 800168a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800168e:	4826      	ldr	r0, [pc, #152]	; (8001728 <Display7Seg+0x35c>)
 8001690:	f000 ff69 	bl	8002566 <HAL_GPIO_WritePin>
		}
	if(x == 8){
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2b08      	cmp	r3, #8
 8001698:	d128      	bne.n	80016ec <Display7Seg+0x320>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800169a:	2200      	movs	r2, #0
 800169c:	2180      	movs	r1, #128	; 0x80
 800169e:	4822      	ldr	r0, [pc, #136]	; (8001728 <Display7Seg+0x35c>)
 80016a0:	f000 ff61 	bl	8002566 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80016a4:	2200      	movs	r2, #0
 80016a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016aa:	481f      	ldr	r0, [pc, #124]	; (8001728 <Display7Seg+0x35c>)
 80016ac:	f000 ff5b 	bl	8002566 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 80016b0:	2200      	movs	r2, #0
 80016b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016b6:	481c      	ldr	r0, [pc, #112]	; (8001728 <Display7Seg+0x35c>)
 80016b8:	f000 ff55 	bl	8002566 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 80016bc:	2200      	movs	r2, #0
 80016be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016c2:	4819      	ldr	r0, [pc, #100]	; (8001728 <Display7Seg+0x35c>)
 80016c4:	f000 ff4f 	bl	8002566 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_RESET);
 80016c8:	2200      	movs	r2, #0
 80016ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016ce:	4816      	ldr	r0, [pc, #88]	; (8001728 <Display7Seg+0x35c>)
 80016d0:	f000 ff49 	bl	8002566 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 80016d4:	2200      	movs	r2, #0
 80016d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016da:	4813      	ldr	r0, [pc, #76]	; (8001728 <Display7Seg+0x35c>)
 80016dc:	f000 ff43 	bl	8002566 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_RESET);
 80016e0:	2200      	movs	r2, #0
 80016e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016e6:	4810      	ldr	r0, [pc, #64]	; (8001728 <Display7Seg+0x35c>)
 80016e8:	f000 ff3d 	bl	8002566 <HAL_GPIO_WritePin>
			}
	if(x == 9){
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2b09      	cmp	r3, #9
 80016f0:	d12b      	bne.n	800174a <Display7Seg+0x37e>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80016f2:	2200      	movs	r2, #0
 80016f4:	2180      	movs	r1, #128	; 0x80
 80016f6:	480c      	ldr	r0, [pc, #48]	; (8001728 <Display7Seg+0x35c>)
 80016f8:	f000 ff35 	bl	8002566 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80016fc:	2200      	movs	r2, #0
 80016fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001702:	4809      	ldr	r0, [pc, #36]	; (8001728 <Display7Seg+0x35c>)
 8001704:	f000 ff2f 	bl	8002566 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8001708:	2200      	movs	r2, #0
 800170a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800170e:	4806      	ldr	r0, [pc, #24]	; (8001728 <Display7Seg+0x35c>)
 8001710:	f000 ff29 	bl	8002566 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8001714:	2200      	movs	r2, #0
 8001716:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800171a:	4803      	ldr	r0, [pc, #12]	; (8001728 <Display7Seg+0x35c>)
 800171c:	f000 ff23 	bl	8002566 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_SET);
 8001720:	2201      	movs	r2, #1
 8001722:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001726:	e001      	b.n	800172c <Display7Seg+0x360>
 8001728:	40010800 	.word	0x40010800
 800172c:	4809      	ldr	r0, [pc, #36]	; (8001754 <Display7Seg+0x388>)
 800172e:	f000 ff1a 	bl	8002566 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 8001732:	2200      	movs	r2, #0
 8001734:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001738:	4806      	ldr	r0, [pc, #24]	; (8001754 <Display7Seg+0x388>)
 800173a:	f000 ff14 	bl	8002566 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_RESET);
 800173e:	2200      	movs	r2, #0
 8001740:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001744:	4803      	ldr	r0, [pc, #12]	; (8001754 <Display7Seg+0x388>)
 8001746:	f000 ff0e 	bl	8002566 <HAL_GPIO_WritePin>
	}
}
 800174a:	bf00      	nop
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	40010800 	.word	0x40010800

08001758 <Display>:
void Display(int x){
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2b03      	cmp	r3, #3
 8001764:	d86e      	bhi.n	8001844 <Display+0xec>
 8001766:	a201      	add	r2, pc, #4	; (adr r2, 800176c <Display+0x14>)
 8001768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800176c:	0800177d 	.word	0x0800177d
 8001770:	080017af 	.word	0x080017af
 8001774:	080017e1 	.word	0x080017e1
 8001778:	08001813 	.word	0x08001813
	switch(x){
	case 0:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 800177c:	2200      	movs	r2, #0
 800177e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001782:	4833      	ldr	r0, [pc, #204]	; (8001850 <Display+0xf8>)
 8001784:	f000 feef 	bl	8002566 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8001788:	2201      	movs	r2, #1
 800178a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800178e:	4830      	ldr	r0, [pc, #192]	; (8001850 <Display+0xf8>)
 8001790:	f000 fee9 	bl	8002566 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8001794:	2201      	movs	r2, #1
 8001796:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800179a:	482d      	ldr	r0, [pc, #180]	; (8001850 <Display+0xf8>)
 800179c:	f000 fee3 	bl	8002566 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 80017a0:	2201      	movs	r2, #1
 80017a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017a6:	482a      	ldr	r0, [pc, #168]	; (8001850 <Display+0xf8>)
 80017a8:	f000 fedd 	bl	8002566 <HAL_GPIO_WritePin>
		break;
 80017ac:	e04b      	b.n	8001846 <Display+0xee>
	case 1:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 80017ae:	2201      	movs	r2, #1
 80017b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017b4:	4826      	ldr	r0, [pc, #152]	; (8001850 <Display+0xf8>)
 80017b6:	f000 fed6 	bl	8002566 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 80017ba:	2200      	movs	r2, #0
 80017bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017c0:	4823      	ldr	r0, [pc, #140]	; (8001850 <Display+0xf8>)
 80017c2:	f000 fed0 	bl	8002566 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 80017c6:	2201      	movs	r2, #1
 80017c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017cc:	4820      	ldr	r0, [pc, #128]	; (8001850 <Display+0xf8>)
 80017ce:	f000 feca 	bl	8002566 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 80017d2:	2201      	movs	r2, #1
 80017d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017d8:	481d      	ldr	r0, [pc, #116]	; (8001850 <Display+0xf8>)
 80017da:	f000 fec4 	bl	8002566 <HAL_GPIO_WritePin>
		break;
 80017de:	e032      	b.n	8001846 <Display+0xee>
	case 2:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 80017e0:	2201      	movs	r2, #1
 80017e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017e6:	481a      	ldr	r0, [pc, #104]	; (8001850 <Display+0xf8>)
 80017e8:	f000 febd 	bl	8002566 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 80017ec:	2201      	movs	r2, #1
 80017ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017f2:	4817      	ldr	r0, [pc, #92]	; (8001850 <Display+0xf8>)
 80017f4:	f000 feb7 	bl	8002566 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 80017f8:	2200      	movs	r2, #0
 80017fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017fe:	4814      	ldr	r0, [pc, #80]	; (8001850 <Display+0xf8>)
 8001800:	f000 feb1 	bl	8002566 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8001804:	2201      	movs	r2, #1
 8001806:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800180a:	4811      	ldr	r0, [pc, #68]	; (8001850 <Display+0xf8>)
 800180c:	f000 feab 	bl	8002566 <HAL_GPIO_WritePin>
		break;
 8001810:	e019      	b.n	8001846 <Display+0xee>
	case 3:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8001812:	2201      	movs	r2, #1
 8001814:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001818:	480d      	ldr	r0, [pc, #52]	; (8001850 <Display+0xf8>)
 800181a:	f000 fea4 	bl	8002566 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 800181e:	2201      	movs	r2, #1
 8001820:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001824:	480a      	ldr	r0, [pc, #40]	; (8001850 <Display+0xf8>)
 8001826:	f000 fe9e 	bl	8002566 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 800182a:	2201      	movs	r2, #1
 800182c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001830:	4807      	ldr	r0, [pc, #28]	; (8001850 <Display+0xf8>)
 8001832:	f000 fe98 	bl	8002566 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 8001836:	2200      	movs	r2, #0
 8001838:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800183c:	4804      	ldr	r0, [pc, #16]	; (8001850 <Display+0xf8>)
 800183e:	f000 fe92 	bl	8002566 <HAL_GPIO_WritePin>

		break;
 8001842:	e000      	b.n	8001846 <Display+0xee>
	default:
		break;
 8001844:	bf00      	nop
	}
}
 8001846:	bf00      	nop
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	40010c00 	.word	0x40010c00

08001854 <DisplayREDX>:
void DisplayREDX(void){
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_X_GPIO_Port, LED_RED_X_Pin, SET);
 8001858:	2201      	movs	r2, #1
 800185a:	2108      	movs	r1, #8
 800185c:	4807      	ldr	r0, [pc, #28]	; (800187c <DisplayREDX+0x28>)
 800185e:	f000 fe82 	bl	8002566 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_X_GPIO_Port, LED_GREEN_X_Pin, RESET);
 8001862:	2200      	movs	r2, #0
 8001864:	2120      	movs	r1, #32
 8001866:	4805      	ldr	r0, [pc, #20]	; (800187c <DisplayREDX+0x28>)
 8001868:	f000 fe7d 	bl	8002566 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_X_GPIO_Port, LED_YELLOW_X_Pin, RESET);
 800186c:	2200      	movs	r2, #0
 800186e:	2110      	movs	r1, #16
 8001870:	4802      	ldr	r0, [pc, #8]	; (800187c <DisplayREDX+0x28>)
 8001872:	f000 fe78 	bl	8002566 <HAL_GPIO_WritePin>
}
 8001876:	bf00      	nop
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	40010c00 	.word	0x40010c00

08001880 <DisplayYELLOWX>:
void DisplayYELLOWX(void){
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_X_GPIO_Port, LED_RED_X_Pin, RESET);
 8001884:	2200      	movs	r2, #0
 8001886:	2108      	movs	r1, #8
 8001888:	4807      	ldr	r0, [pc, #28]	; (80018a8 <DisplayYELLOWX+0x28>)
 800188a:	f000 fe6c 	bl	8002566 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_X_GPIO_Port, LED_GREEN_X_Pin, RESET);
 800188e:	2200      	movs	r2, #0
 8001890:	2120      	movs	r1, #32
 8001892:	4805      	ldr	r0, [pc, #20]	; (80018a8 <DisplayYELLOWX+0x28>)
 8001894:	f000 fe67 	bl	8002566 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_X_GPIO_Port, LED_YELLOW_X_Pin, SET);
 8001898:	2201      	movs	r2, #1
 800189a:	2110      	movs	r1, #16
 800189c:	4802      	ldr	r0, [pc, #8]	; (80018a8 <DisplayYELLOWX+0x28>)
 800189e:	f000 fe62 	bl	8002566 <HAL_GPIO_WritePin>
}
 80018a2:	bf00      	nop
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	40010c00 	.word	0x40010c00

080018ac <DisplayGREENX>:
void DisplayGREENX(void){
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_X_GPIO_Port, LED_RED_X_Pin, RESET);
 80018b0:	2200      	movs	r2, #0
 80018b2:	2108      	movs	r1, #8
 80018b4:	4807      	ldr	r0, [pc, #28]	; (80018d4 <DisplayGREENX+0x28>)
 80018b6:	f000 fe56 	bl	8002566 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_X_GPIO_Port, LED_GREEN_X_Pin, SET);
 80018ba:	2201      	movs	r2, #1
 80018bc:	2120      	movs	r1, #32
 80018be:	4805      	ldr	r0, [pc, #20]	; (80018d4 <DisplayGREENX+0x28>)
 80018c0:	f000 fe51 	bl	8002566 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_X_GPIO_Port, LED_YELLOW_X_Pin, RESET);
 80018c4:	2200      	movs	r2, #0
 80018c6:	2110      	movs	r1, #16
 80018c8:	4802      	ldr	r0, [pc, #8]	; (80018d4 <DisplayGREENX+0x28>)
 80018ca:	f000 fe4c 	bl	8002566 <HAL_GPIO_WritePin>
}
 80018ce:	bf00      	nop
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	40010c00 	.word	0x40010c00

080018d8 <DisplayREDY>:
void DisplayREDY(void){
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_Y_GPIO_Port, LED_RED_Y_Pin, SET);
 80018dc:	2201      	movs	r2, #1
 80018de:	2140      	movs	r1, #64	; 0x40
 80018e0:	4807      	ldr	r0, [pc, #28]	; (8001900 <DisplayREDY+0x28>)
 80018e2:	f000 fe40 	bl	8002566 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_Y_GPIO_Port, LED_GREEN_Y_Pin, RESET);
 80018e6:	2200      	movs	r2, #0
 80018e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018ec:	4804      	ldr	r0, [pc, #16]	; (8001900 <DisplayREDY+0x28>)
 80018ee:	f000 fe3a 	bl	8002566 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_Y_GPIO_Port, LED_YELLOW_Y_Pin, RESET);
 80018f2:	2200      	movs	r2, #0
 80018f4:	2180      	movs	r1, #128	; 0x80
 80018f6:	4802      	ldr	r0, [pc, #8]	; (8001900 <DisplayREDY+0x28>)
 80018f8:	f000 fe35 	bl	8002566 <HAL_GPIO_WritePin>
}
 80018fc:	bf00      	nop
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	40010c00 	.word	0x40010c00

08001904 <DisplayYELLOWY>:
void DisplayYELLOWY(void){
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_Y_GPIO_Port, LED_RED_Y_Pin, RESET);
 8001908:	2200      	movs	r2, #0
 800190a:	2140      	movs	r1, #64	; 0x40
 800190c:	4807      	ldr	r0, [pc, #28]	; (800192c <DisplayYELLOWY+0x28>)
 800190e:	f000 fe2a 	bl	8002566 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_Y_GPIO_Port, LED_GREEN_Y_Pin, RESET);
 8001912:	2200      	movs	r2, #0
 8001914:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001918:	4804      	ldr	r0, [pc, #16]	; (800192c <DisplayYELLOWY+0x28>)
 800191a:	f000 fe24 	bl	8002566 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_Y_GPIO_Port, LED_YELLOW_Y_Pin, SET);
 800191e:	2201      	movs	r2, #1
 8001920:	2180      	movs	r1, #128	; 0x80
 8001922:	4802      	ldr	r0, [pc, #8]	; (800192c <DisplayYELLOWY+0x28>)
 8001924:	f000 fe1f 	bl	8002566 <HAL_GPIO_WritePin>
}
 8001928:	bf00      	nop
 800192a:	bd80      	pop	{r7, pc}
 800192c:	40010c00 	.word	0x40010c00

08001930 <DisplayGREENY>:
void DisplayGREENY(void){
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_Y_GPIO_Port, LED_RED_Y_Pin, RESET);
 8001934:	2200      	movs	r2, #0
 8001936:	2140      	movs	r1, #64	; 0x40
 8001938:	4807      	ldr	r0, [pc, #28]	; (8001958 <DisplayGREENY+0x28>)
 800193a:	f000 fe14 	bl	8002566 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_Y_GPIO_Port, LED_GREEN_Y_Pin, SET);
 800193e:	2201      	movs	r2, #1
 8001940:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001944:	4804      	ldr	r0, [pc, #16]	; (8001958 <DisplayGREENY+0x28>)
 8001946:	f000 fe0e 	bl	8002566 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_Y_GPIO_Port, LED_YELLOW_Y_Pin, RESET);
 800194a:	2200      	movs	r2, #0
 800194c:	2180      	movs	r1, #128	; 0x80
 800194e:	4802      	ldr	r0, [pc, #8]	; (8001958 <DisplayGREENY+0x28>)
 8001950:	f000 fe09 	bl	8002566 <HAL_GPIO_WritePin>
}
 8001954:	bf00      	nop
 8001956:	bd80      	pop	{r7, pc}
 8001958:	40010c00 	.word	0x40010c00

0800195c <DisplayMAN_REDX>:
void DisplayMAN_REDX(void){
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_RED_X_GPIO_Port, LED_RED_X_Pin);
 8001960:	2108      	movs	r1, #8
 8001962:	4802      	ldr	r0, [pc, #8]	; (800196c <DisplayMAN_REDX+0x10>)
 8001964:	f000 fe17 	bl	8002596 <HAL_GPIO_TogglePin>
}
 8001968:	bf00      	nop
 800196a:	bd80      	pop	{r7, pc}
 800196c:	40010c00 	.word	0x40010c00

08001970 <DisplayMAN_REDY>:
void DisplayMAN_REDY(void){
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_RED_Y_GPIO_Port, LED_RED_Y_Pin);
 8001974:	2140      	movs	r1, #64	; 0x40
 8001976:	4802      	ldr	r0, [pc, #8]	; (8001980 <DisplayMAN_REDY+0x10>)
 8001978:	f000 fe0d 	bl	8002596 <HAL_GPIO_TogglePin>
}
 800197c:	bf00      	nop
 800197e:	bd80      	pop	{r7, pc}
 8001980:	40010c00 	.word	0x40010c00

08001984 <DisplayMAN_GREENX>:
void DisplayMAN_GREENX(void){
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_GREEN_X_GPIO_Port, LED_GREEN_X_Pin);
 8001988:	2120      	movs	r1, #32
 800198a:	4802      	ldr	r0, [pc, #8]	; (8001994 <DisplayMAN_GREENX+0x10>)
 800198c:	f000 fe03 	bl	8002596 <HAL_GPIO_TogglePin>
}
 8001990:	bf00      	nop
 8001992:	bd80      	pop	{r7, pc}
 8001994:	40010c00 	.word	0x40010c00

08001998 <DisplayMAN_GREENY>:
void DisplayMAN_GREENY(void){
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_GREEN_Y_GPIO_Port, LED_GREEN_Y_Pin);
 800199c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019a0:	4802      	ldr	r0, [pc, #8]	; (80019ac <DisplayMAN_GREENY+0x14>)
 80019a2:	f000 fdf8 	bl	8002596 <HAL_GPIO_TogglePin>
}
 80019a6:	bf00      	nop
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	40010c00 	.word	0x40010c00

080019b0 <DisplayMAN_YELLOWX>:
void DisplayMAN_YELLOWX(void){
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_YELLOW_X_GPIO_Port, LED_YELLOW_X_Pin);
 80019b4:	2110      	movs	r1, #16
 80019b6:	4802      	ldr	r0, [pc, #8]	; (80019c0 <DisplayMAN_YELLOWX+0x10>)
 80019b8:	f000 fded 	bl	8002596 <HAL_GPIO_TogglePin>
}
 80019bc:	bf00      	nop
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	40010c00 	.word	0x40010c00

080019c4 <DisplayMAN_YELLOWY>:
void DisplayMAN_YELLOWY(void){
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_YELLOW_Y_GPIO_Port, LED_YELLOW_Y_Pin);
 80019c8:	2180      	movs	r1, #128	; 0x80
 80019ca:	4802      	ldr	r0, [pc, #8]	; (80019d4 <DisplayMAN_YELLOWY+0x10>)
 80019cc:	f000 fde3 	bl	8002596 <HAL_GPIO_TogglePin>
}
 80019d0:	bf00      	nop
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	40010c00 	.word	0x40010c00

080019d8 <InitLED>:
void InitLED(void){
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_X_GPIO_Port, LED_RED_X_Pin, RESET);
 80019dc:	2200      	movs	r2, #0
 80019de:	2108      	movs	r1, #8
 80019e0:	480f      	ldr	r0, [pc, #60]	; (8001a20 <InitLED+0x48>)
 80019e2:	f000 fdc0 	bl	8002566 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_X_GPIO_Port, LED_GREEN_X_Pin, RESET);
 80019e6:	2200      	movs	r2, #0
 80019e8:	2120      	movs	r1, #32
 80019ea:	480d      	ldr	r0, [pc, #52]	; (8001a20 <InitLED+0x48>)
 80019ec:	f000 fdbb 	bl	8002566 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_X_GPIO_Port, LED_YELLOW_X_Pin, RESET);
 80019f0:	2200      	movs	r2, #0
 80019f2:	2110      	movs	r1, #16
 80019f4:	480a      	ldr	r0, [pc, #40]	; (8001a20 <InitLED+0x48>)
 80019f6:	f000 fdb6 	bl	8002566 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_Y_GPIO_Port, LED_RED_Y_Pin, RESET);
 80019fa:	2200      	movs	r2, #0
 80019fc:	2140      	movs	r1, #64	; 0x40
 80019fe:	4808      	ldr	r0, [pc, #32]	; (8001a20 <InitLED+0x48>)
 8001a00:	f000 fdb1 	bl	8002566 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_Y_GPIO_Port, LED_GREEN_Y_Pin, RESET);
 8001a04:	2200      	movs	r2, #0
 8001a06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a0a:	4805      	ldr	r0, [pc, #20]	; (8001a20 <InitLED+0x48>)
 8001a0c:	f000 fdab 	bl	8002566 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_Y_GPIO_Port, LED_YELLOW_Y_Pin, RESET);
 8001a10:	2200      	movs	r2, #0
 8001a12:	2180      	movs	r1, #128	; 0x80
 8001a14:	4802      	ldr	r0, [pc, #8]	; (8001a20 <InitLED+0x48>)
 8001a16:	f000 fda6 	bl	8002566 <HAL_GPIO_WritePin>
}
 8001a1a:	bf00      	nop
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	40010c00 	.word	0x40010c00

08001a24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a28:	f000 fa9c 	bl	8001f64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a2c:	f000 f896 	bl	8001b5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a30:	f000 f91c 	bl	8001c6c <MX_GPIO_Init>
  MX_TIM2_Init();
 8001a34:	f000 f8ce 	bl	8001bd4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001a38:	4840      	ldr	r0, [pc, #256]	; (8001b3c <main+0x118>)
 8001a3a:	f001 f9f1 	bl	8002e20 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8001a3e:	2201      	movs	r2, #1
 8001a40:	2180      	movs	r1, #128	; 0x80
 8001a42:	483f      	ldr	r0, [pc, #252]	; (8001b40 <main+0x11c>)
 8001a44:	f000 fd8f 	bl	8002566 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8001a48:	2201      	movs	r2, #1
 8001a4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a4e:	483c      	ldr	r0, [pc, #240]	; (8001b40 <main+0x11c>)
 8001a50:	f000 fd89 	bl	8002566 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 8001a54:	2201      	movs	r2, #1
 8001a56:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a5a:	4839      	ldr	r0, [pc, #228]	; (8001b40 <main+0x11c>)
 8001a5c:	f000 fd83 	bl	8002566 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 8001a60:	2201      	movs	r2, #1
 8001a62:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a66:	4836      	ldr	r0, [pc, #216]	; (8001b40 <main+0x11c>)
 8001a68:	f000 fd7d 	bl	8002566 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_SET);
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a72:	4833      	ldr	r0, [pc, #204]	; (8001b40 <main+0x11c>)
 8001a74:	f000 fd77 	bl	8002566 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_SET);
 8001a78:	2201      	movs	r2, #1
 8001a7a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a7e:	4830      	ldr	r0, [pc, #192]	; (8001b40 <main+0x11c>)
 8001a80:	f000 fd71 	bl	8002566 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_SET);
 8001a84:	2201      	movs	r2, #1
 8001a86:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a8a:	482d      	ldr	r0, [pc, #180]	; (8001b40 <main+0x11c>)
 8001a8c:	f000 fd6b 	bl	8002566 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8001a90:	2201      	movs	r2, #1
 8001a92:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a96:	482b      	ldr	r0, [pc, #172]	; (8001b44 <main+0x120>)
 8001a98:	f000 fd65 	bl	8002566 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001aa2:	4828      	ldr	r0, [pc, #160]	; (8001b44 <main+0x120>)
 8001aa4:	f000 fd5f 	bl	8002566 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001aae:	4825      	ldr	r0, [pc, #148]	; (8001b44 <main+0x120>)
 8001ab0:	f000 fd59 	bl	8002566 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001aba:	4822      	ldr	r0, [pc, #136]	; (8001b44 <main+0x120>)
 8001abc:	f000 fd53 	bl	8002566 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, GPIO_PIN_SET);
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ac6:	481f      	ldr	r0, [pc, #124]	; (8001b44 <main+0x120>)
 8001ac8:	f000 fd4d 	bl	8002566 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN5_GPIO_Port, EN5_Pin, GPIO_PIN_SET);
 8001acc:	2201      	movs	r2, #1
 8001ace:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ad2:	481c      	ldr	r0, [pc, #112]	; (8001b44 <main+0x120>)
 8001ad4:	f000 fd47 	bl	8002566 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN6_GPIO_Port, EN6_Pin, GPIO_PIN_SET);
 8001ad8:	2201      	movs	r2, #1
 8001ada:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ade:	4819      	ldr	r0, [pc, #100]	; (8001b44 <main+0x120>)
 8001ae0:	f000 fd41 	bl	8002566 <HAL_GPIO_WritePin>
	statusx = INIT;
 8001ae4:	4b18      	ldr	r3, [pc, #96]	; (8001b48 <main+0x124>)
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	601a      	str	r2, [r3, #0]
	statusy = INIT;
 8001aea:	4b18      	ldr	r3, [pc, #96]	; (8001b4c <main+0x128>)
 8001aec:	2201      	movs	r2, #1
 8001aee:	601a      	str	r2, [r3, #0]
	counterMode = 1;
 8001af0:	4b17      	ldr	r3, [pc, #92]	; (8001b50 <main+0x12c>)
 8001af2:	2201      	movs	r2, #1
 8001af4:	601a      	str	r2, [r3, #0]
	counterTimeSet = 0;
 8001af6:	4b17      	ldr	r3, [pc, #92]	; (8001b54 <main+0x130>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
	DisplayCounter = 0;
 8001afc:	4b16      	ldr	r3, [pc, #88]	; (8001b58 <main+0x134>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	601a      	str	r2, [r3, #0]
	setTimer(6, 10);
 8001b02:	210a      	movs	r1, #10
 8001b04:	2006      	movs	r0, #6
 8001b06:	f000 f9a7 	bl	8001e58 <setTimer>
	setTimer(4, 500);
 8001b0a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001b0e:	2004      	movs	r0, #4
 8001b10:	f000 f9a2 	bl	8001e58 <setTimer>
	setTimer(5, 500);
 8001b14:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001b18:	2005      	movs	r0, #5
 8001b1a:	f000 f99d 	bl	8001e58 <setTimer>
  while (1)
  {
	  fsm_automatic_runx();
 8001b1e:	f7fe fd35 	bl	800058c <fsm_automatic_runx>
	  fsm_automatic_runy();
 8001b22:	f7fe fdd3 	bl	80006cc <fsm_automatic_runy>
	  fsm_manual_run1();
 8001b26:	f7fe fec9 	bl	80008bc <fsm_manual_run1>
	  fsm_manual_run2();
 8001b2a:	f7ff f8e5 	bl	8000cf8 <fsm_manual_run2>
	  fsm_for_input_processing1();
 8001b2e:	f7ff fa31 	bl	8000f94 <fsm_for_input_processing1>
	  fsm_for_input_processing2();
 8001b32:	f7ff fa85 	bl	8001040 <fsm_for_input_processing2>
	  fsm_for_input_processing3();
 8001b36:	f7ff fad5 	bl	80010e4 <fsm_for_input_processing3>
	  fsm_automatic_runx();
 8001b3a:	e7f0      	b.n	8001b1e <main+0xfa>
 8001b3c:	20000090 	.word	0x20000090
 8001b40:	40010800 	.word	0x40010800
 8001b44:	40010c00 	.word	0x40010c00
 8001b48:	20000050 	.word	0x20000050
 8001b4c:	20000054 	.word	0x20000054
 8001b50:	20000064 	.word	0x20000064
 8001b54:	20000068 	.word	0x20000068
 8001b58:	20000038 	.word	0x20000038

08001b5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b090      	sub	sp, #64	; 0x40
 8001b60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b62:	f107 0318 	add.w	r3, r7, #24
 8001b66:	2228      	movs	r2, #40	; 0x28
 8001b68:	2100      	movs	r1, #0
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f001 fd08 	bl	8003580 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b70:	1d3b      	adds	r3, r7, #4
 8001b72:	2200      	movs	r2, #0
 8001b74:	601a      	str	r2, [r3, #0]
 8001b76:	605a      	str	r2, [r3, #4]
 8001b78:	609a      	str	r2, [r3, #8]
 8001b7a:	60da      	str	r2, [r3, #12]
 8001b7c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b7e:	2302      	movs	r3, #2
 8001b80:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b82:	2301      	movs	r3, #1
 8001b84:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b86:	2310      	movs	r3, #16
 8001b88:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b8e:	f107 0318 	add.w	r3, r7, #24
 8001b92:	4618      	mov	r0, r3
 8001b94:	f000 fd18 	bl	80025c8 <HAL_RCC_OscConfig>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001b9e:	f000 f8c7 	bl	8001d30 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ba2:	230f      	movs	r3, #15
 8001ba4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001baa:	2300      	movs	r3, #0
 8001bac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001bb6:	1d3b      	adds	r3, r7, #4
 8001bb8:	2100      	movs	r1, #0
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f000 ff84 	bl	8002ac8 <HAL_RCC_ClockConfig>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001bc6:	f000 f8b3 	bl	8001d30 <Error_Handler>
  }
}
 8001bca:	bf00      	nop
 8001bcc:	3740      	adds	r7, #64	; 0x40
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
	...

08001bd4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b086      	sub	sp, #24
 8001bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bda:	f107 0308 	add.w	r3, r7, #8
 8001bde:	2200      	movs	r2, #0
 8001be0:	601a      	str	r2, [r3, #0]
 8001be2:	605a      	str	r2, [r3, #4]
 8001be4:	609a      	str	r2, [r3, #8]
 8001be6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001be8:	463b      	mov	r3, r7
 8001bea:	2200      	movs	r2, #0
 8001bec:	601a      	str	r2, [r3, #0]
 8001bee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001bf0:	4b1d      	ldr	r3, [pc, #116]	; (8001c68 <MX_TIM2_Init+0x94>)
 8001bf2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bf6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001bf8:	4b1b      	ldr	r3, [pc, #108]	; (8001c68 <MX_TIM2_Init+0x94>)
 8001bfa:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001bfe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c00:	4b19      	ldr	r3, [pc, #100]	; (8001c68 <MX_TIM2_Init+0x94>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001c06:	4b18      	ldr	r3, [pc, #96]	; (8001c68 <MX_TIM2_Init+0x94>)
 8001c08:	2209      	movs	r2, #9
 8001c0a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c0c:	4b16      	ldr	r3, [pc, #88]	; (8001c68 <MX_TIM2_Init+0x94>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c12:	4b15      	ldr	r3, [pc, #84]	; (8001c68 <MX_TIM2_Init+0x94>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c18:	4813      	ldr	r0, [pc, #76]	; (8001c68 <MX_TIM2_Init+0x94>)
 8001c1a:	f001 f8b1 	bl	8002d80 <HAL_TIM_Base_Init>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001c24:	f000 f884 	bl	8001d30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c2c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c2e:	f107 0308 	add.w	r3, r7, #8
 8001c32:	4619      	mov	r1, r3
 8001c34:	480c      	ldr	r0, [pc, #48]	; (8001c68 <MX_TIM2_Init+0x94>)
 8001c36:	f001 fa2f 	bl	8003098 <HAL_TIM_ConfigClockSource>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001c40:	f000 f876 	bl	8001d30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c44:	2300      	movs	r3, #0
 8001c46:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c4c:	463b      	mov	r3, r7
 8001c4e:	4619      	mov	r1, r3
 8001c50:	4805      	ldr	r0, [pc, #20]	; (8001c68 <MX_TIM2_Init+0x94>)
 8001c52:	f001 fc07 	bl	8003464 <HAL_TIMEx_MasterConfigSynchronization>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001c5c:	f000 f868 	bl	8001d30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001c60:	bf00      	nop
 8001c62:	3718      	adds	r7, #24
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	20000090 	.word	0x20000090

08001c6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b086      	sub	sp, #24
 8001c70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c72:	f107 0308 	add.w	r3, r7, #8
 8001c76:	2200      	movs	r2, #0
 8001c78:	601a      	str	r2, [r3, #0]
 8001c7a:	605a      	str	r2, [r3, #4]
 8001c7c:	609a      	str	r2, [r3, #8]
 8001c7e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c80:	4b28      	ldr	r3, [pc, #160]	; (8001d24 <MX_GPIO_Init+0xb8>)
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	4a27      	ldr	r2, [pc, #156]	; (8001d24 <MX_GPIO_Init+0xb8>)
 8001c86:	f043 0304 	orr.w	r3, r3, #4
 8001c8a:	6193      	str	r3, [r2, #24]
 8001c8c:	4b25      	ldr	r3, [pc, #148]	; (8001d24 <MX_GPIO_Init+0xb8>)
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	f003 0304 	and.w	r3, r3, #4
 8001c94:	607b      	str	r3, [r7, #4]
 8001c96:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c98:	4b22      	ldr	r3, [pc, #136]	; (8001d24 <MX_GPIO_Init+0xb8>)
 8001c9a:	699b      	ldr	r3, [r3, #24]
 8001c9c:	4a21      	ldr	r2, [pc, #132]	; (8001d24 <MX_GPIO_Init+0xb8>)
 8001c9e:	f043 0308 	orr.w	r3, r3, #8
 8001ca2:	6193      	str	r3, [r2, #24]
 8001ca4:	4b1f      	ldr	r3, [pc, #124]	; (8001d24 <MX_GPIO_Init+0xb8>)
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	f003 0308 	and.w	r3, r3, #8
 8001cac:	603b      	str	r3, [r7, #0]
 8001cae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f44f 517e 	mov.w	r1, #16256	; 0x3f80
 8001cb6:	481c      	ldr	r0, [pc, #112]	; (8001d28 <MX_GPIO_Init+0xbc>)
 8001cb8:	f000 fc55 	bl	8002566 <HAL_GPIO_WritePin>
                          |LED5_Pin|LED6_Pin|LED7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN1_Pin|EN2_Pin|EN3_Pin|EN4_Pin
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	f64f 71f8 	movw	r1, #65528	; 0xfff8
 8001cc2:	481a      	ldr	r0, [pc, #104]	; (8001d2c <MX_GPIO_Init+0xc0>)
 8001cc4:	f000 fc4f 	bl	8002566 <HAL_GPIO_WritePin>
                          |LED_GREEN_X_Pin|LED_RED_Y_Pin|LED_YELLOW_Y_Pin|LED_GREEN_Y_Pin
                          |EN0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin
                           LED5_Pin LED6_Pin LED7_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 8001cc8:	f44f 537e 	mov.w	r3, #16256	; 0x3f80
 8001ccc:	60bb      	str	r3, [r7, #8]
                          |LED5_Pin|LED6_Pin|LED7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cda:	f107 0308 	add.w	r3, r7, #8
 8001cde:	4619      	mov	r1, r3
 8001ce0:	4811      	ldr	r0, [pc, #68]	; (8001d28 <MX_GPIO_Init+0xbc>)
 8001ce2:	f000 faaf 	bl	8002244 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button_Pin Button1_Pin Button2_Pin */
  GPIO_InitStruct.Pin = Button_Pin|Button1_Pin|Button2_Pin;
 8001ce6:	2307      	movs	r3, #7
 8001ce8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cea:	2300      	movs	r3, #0
 8001cec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cf2:	f107 0308 	add.w	r3, r7, #8
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	480c      	ldr	r0, [pc, #48]	; (8001d2c <MX_GPIO_Init+0xc0>)
 8001cfa:	f000 faa3 	bl	8002244 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN1_Pin EN2_Pin EN3_Pin EN4_Pin
                           EN5_Pin EN6_Pin LED_RED_X_Pin LED_YELLOW_X_Pin
                           LED_GREEN_X_Pin LED_RED_Y_Pin LED_YELLOW_Y_Pin LED_GREEN_Y_Pin
                           EN0_Pin */
  GPIO_InitStruct.Pin = EN1_Pin|EN2_Pin|EN3_Pin|EN4_Pin
 8001cfe:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001d02:	60bb      	str	r3, [r7, #8]
                          |EN5_Pin|EN6_Pin|LED_RED_X_Pin|LED_YELLOW_X_Pin
                          |LED_GREEN_X_Pin|LED_RED_Y_Pin|LED_YELLOW_Y_Pin|LED_GREEN_Y_Pin
                          |EN0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d04:	2301      	movs	r3, #1
 8001d06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d10:	f107 0308 	add.w	r3, r7, #8
 8001d14:	4619      	mov	r1, r3
 8001d16:	4805      	ldr	r0, [pc, #20]	; (8001d2c <MX_GPIO_Init+0xc0>)
 8001d18:	f000 fa94 	bl	8002244 <HAL_GPIO_Init>

}
 8001d1c:	bf00      	nop
 8001d1e:	3718      	adds	r7, #24
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	40021000 	.word	0x40021000
 8001d28:	40010800 	.word	0x40010800
 8001d2c:	40010c00 	.word	0x40010c00

08001d30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d34:	b672      	cpsid	i
}
 8001d36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d38:	e7fe      	b.n	8001d38 <Error_Handler+0x8>
	...

08001d3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b085      	sub	sp, #20
 8001d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d42:	4b15      	ldr	r3, [pc, #84]	; (8001d98 <HAL_MspInit+0x5c>)
 8001d44:	699b      	ldr	r3, [r3, #24]
 8001d46:	4a14      	ldr	r2, [pc, #80]	; (8001d98 <HAL_MspInit+0x5c>)
 8001d48:	f043 0301 	orr.w	r3, r3, #1
 8001d4c:	6193      	str	r3, [r2, #24]
 8001d4e:	4b12      	ldr	r3, [pc, #72]	; (8001d98 <HAL_MspInit+0x5c>)
 8001d50:	699b      	ldr	r3, [r3, #24]
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	60bb      	str	r3, [r7, #8]
 8001d58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d5a:	4b0f      	ldr	r3, [pc, #60]	; (8001d98 <HAL_MspInit+0x5c>)
 8001d5c:	69db      	ldr	r3, [r3, #28]
 8001d5e:	4a0e      	ldr	r2, [pc, #56]	; (8001d98 <HAL_MspInit+0x5c>)
 8001d60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d64:	61d3      	str	r3, [r2, #28]
 8001d66:	4b0c      	ldr	r3, [pc, #48]	; (8001d98 <HAL_MspInit+0x5c>)
 8001d68:	69db      	ldr	r3, [r3, #28]
 8001d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d6e:	607b      	str	r3, [r7, #4]
 8001d70:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001d72:	4b0a      	ldr	r3, [pc, #40]	; (8001d9c <HAL_MspInit+0x60>)
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	60fb      	str	r3, [r7, #12]
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001d7e:	60fb      	str	r3, [r7, #12]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001d86:	60fb      	str	r3, [r7, #12]
 8001d88:	4a04      	ldr	r2, [pc, #16]	; (8001d9c <HAL_MspInit+0x60>)
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d8e:	bf00      	nop
 8001d90:	3714      	adds	r7, #20
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bc80      	pop	{r7}
 8001d96:	4770      	bx	lr
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	40010000 	.word	0x40010000

08001da0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001db0:	d113      	bne.n	8001dda <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001db2:	4b0c      	ldr	r3, [pc, #48]	; (8001de4 <HAL_TIM_Base_MspInit+0x44>)
 8001db4:	69db      	ldr	r3, [r3, #28]
 8001db6:	4a0b      	ldr	r2, [pc, #44]	; (8001de4 <HAL_TIM_Base_MspInit+0x44>)
 8001db8:	f043 0301 	orr.w	r3, r3, #1
 8001dbc:	61d3      	str	r3, [r2, #28]
 8001dbe:	4b09      	ldr	r3, [pc, #36]	; (8001de4 <HAL_TIM_Base_MspInit+0x44>)
 8001dc0:	69db      	ldr	r3, [r3, #28]
 8001dc2:	f003 0301 	and.w	r3, r3, #1
 8001dc6:	60fb      	str	r3, [r7, #12]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001dca:	2200      	movs	r2, #0
 8001dcc:	2100      	movs	r1, #0
 8001dce:	201c      	movs	r0, #28
 8001dd0:	f000 fa01 	bl	80021d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001dd4:	201c      	movs	r0, #28
 8001dd6:	f000 fa1a 	bl	800220e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001dda:	bf00      	nop
 8001ddc:	3710      	adds	r7, #16
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	40021000 	.word	0x40021000

08001de8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dec:	e7fe      	b.n	8001dec <NMI_Handler+0x4>

08001dee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dee:	b480      	push	{r7}
 8001df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001df2:	e7fe      	b.n	8001df2 <HardFault_Handler+0x4>

08001df4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001df8:	e7fe      	b.n	8001df8 <MemManage_Handler+0x4>

08001dfa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dfe:	e7fe      	b.n	8001dfe <BusFault_Handler+0x4>

08001e00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e04:	e7fe      	b.n	8001e04 <UsageFault_Handler+0x4>

08001e06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e06:	b480      	push	{r7}
 8001e08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e0a:	bf00      	nop
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bc80      	pop	{r7}
 8001e10:	4770      	bx	lr

08001e12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e12:	b480      	push	{r7}
 8001e14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e16:	bf00      	nop
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bc80      	pop	{r7}
 8001e1c:	4770      	bx	lr

08001e1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e22:	bf00      	nop
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bc80      	pop	{r7}
 8001e28:	4770      	bx	lr

08001e2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e2e:	f000 f8df 	bl	8001ff0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e32:	bf00      	nop
 8001e34:	bd80      	pop	{r7, pc}
	...

08001e38 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001e3c:	4802      	ldr	r0, [pc, #8]	; (8001e48 <TIM2_IRQHandler+0x10>)
 8001e3e:	f001 f83b 	bl	8002eb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001e42:	bf00      	nop
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	20000090 	.word	0x20000090

08001e4c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e50:	bf00      	nop
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bc80      	pop	{r7}
 8001e56:	4770      	bx	lr

08001e58 <setTimer>:
#include "input_reading.h"
#define MAX_COUNTER 10
int TIME_CYCLE = 10;
int timer_counter[MAX_COUNTER];
int timer_flag[MAX_COUNTER];
void setTimer(int index, int duration){
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]
	timer_counter[index] = duration/TIME_CYCLE;
 8001e62:	4b09      	ldr	r3, [pc, #36]	; (8001e88 <setTimer+0x30>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	683a      	ldr	r2, [r7, #0]
 8001e68:	fb92 f2f3 	sdiv	r2, r2, r3
 8001e6c:	4907      	ldr	r1, [pc, #28]	; (8001e8c <setTimer+0x34>)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[index] = 0;
 8001e74:	4a06      	ldr	r2, [pc, #24]	; (8001e90 <setTimer+0x38>)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2100      	movs	r1, #0
 8001e7a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001e7e:	bf00      	nop
 8001e80:	370c      	adds	r7, #12
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bc80      	pop	{r7}
 8001e86:	4770      	bx	lr
 8001e88:	20000010 	.word	0x20000010
 8001e8c:	200000d8 	.word	0x200000d8
 8001e90:	20000100 	.word	0x20000100

08001e94 <timerRun>:
void timerRun(void){
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
	for(int i = 0; i < MAX_COUNTER; i++){
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	607b      	str	r3, [r7, #4]
 8001e9e:	e01c      	b.n	8001eda <timerRun+0x46>
		if(timer_counter[i] > 0){
 8001ea0:	4a12      	ldr	r2, [pc, #72]	; (8001eec <timerRun+0x58>)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	dd13      	ble.n	8001ed4 <timerRun+0x40>
			timer_counter[i]--;
 8001eac:	4a0f      	ldr	r2, [pc, #60]	; (8001eec <timerRun+0x58>)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eb4:	1e5a      	subs	r2, r3, #1
 8001eb6:	490d      	ldr	r1, [pc, #52]	; (8001eec <timerRun+0x58>)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(timer_counter[i] <= 0){
 8001ebe:	4a0b      	ldr	r2, [pc, #44]	; (8001eec <timerRun+0x58>)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	dc04      	bgt.n	8001ed4 <timerRun+0x40>
				timer_flag[i] = 1;
 8001eca:	4a09      	ldr	r2, [pc, #36]	; (8001ef0 <timerRun+0x5c>)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2101      	movs	r1, #1
 8001ed0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < MAX_COUNTER; i++){
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	607b      	str	r3, [r7, #4]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2b09      	cmp	r3, #9
 8001ede:	dddf      	ble.n	8001ea0 <timerRun+0xc>
			}
		}
	}
}
 8001ee0:	bf00      	nop
 8001ee2:	bf00      	nop
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bc80      	pop	{r7}
 8001eea:	4770      	bx	lr
 8001eec:	200000d8 	.word	0x200000d8
 8001ef0:	20000100 	.word	0x20000100

08001ef4 <HAL_TIM_PeriodElapsedCallback>:
void ClearTimer(int index){
		timer_flag[index] = 0;
		timer_counter[index] = 0;
}
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM2){
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f04:	d103      	bne.n	8001f0e <HAL_TIM_PeriodElapsedCallback+0x1a>
		button_reading() ;
 8001f06:	f7ff f985 	bl	8001214 <button_reading>
		timerRun();
 8001f0a:	f7ff ffc3 	bl	8001e94 <timerRun>
	}
}
 8001f0e:	bf00      	nop
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
	...

08001f18 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f18:	f7ff ff98 	bl	8001e4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f1c:	480b      	ldr	r0, [pc, #44]	; (8001f4c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001f1e:	490c      	ldr	r1, [pc, #48]	; (8001f50 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001f20:	4a0c      	ldr	r2, [pc, #48]	; (8001f54 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001f22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f24:	e002      	b.n	8001f2c <LoopCopyDataInit>

08001f26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f2a:	3304      	adds	r3, #4

08001f2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f30:	d3f9      	bcc.n	8001f26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f32:	4a09      	ldr	r2, [pc, #36]	; (8001f58 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001f34:	4c09      	ldr	r4, [pc, #36]	; (8001f5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f38:	e001      	b.n	8001f3e <LoopFillZerobss>

08001f3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f3c:	3204      	adds	r2, #4

08001f3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f40:	d3fb      	bcc.n	8001f3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f42:	f001 faf9 	bl	8003538 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f46:	f7ff fd6d 	bl	8001a24 <main>
  bx lr
 8001f4a:	4770      	bx	lr
  ldr r0, =_sdata
 8001f4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f50:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8001f54:	080035d4 	.word	0x080035d4
  ldr r2, =_sbss
 8001f58:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8001f5c:	2000012c 	.word	0x2000012c

08001f60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f60:	e7fe      	b.n	8001f60 <ADC1_2_IRQHandler>
	...

08001f64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f68:	4b08      	ldr	r3, [pc, #32]	; (8001f8c <HAL_Init+0x28>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a07      	ldr	r2, [pc, #28]	; (8001f8c <HAL_Init+0x28>)
 8001f6e:	f043 0310 	orr.w	r3, r3, #16
 8001f72:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f74:	2003      	movs	r0, #3
 8001f76:	f000 f923 	bl	80021c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f7a:	200f      	movs	r0, #15
 8001f7c:	f000 f808 	bl	8001f90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f80:	f7ff fedc 	bl	8001d3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	40022000 	.word	0x40022000

08001f90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f98:	4b12      	ldr	r3, [pc, #72]	; (8001fe4 <HAL_InitTick+0x54>)
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	4b12      	ldr	r3, [pc, #72]	; (8001fe8 <HAL_InitTick+0x58>)
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fa6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f000 f93b 	bl	800222a <HAL_SYSTICK_Config>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e00e      	b.n	8001fdc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2b0f      	cmp	r3, #15
 8001fc2:	d80a      	bhi.n	8001fda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	6879      	ldr	r1, [r7, #4]
 8001fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fcc:	f000 f903 	bl	80021d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fd0:	4a06      	ldr	r2, [pc, #24]	; (8001fec <HAL_InitTick+0x5c>)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	e000      	b.n	8001fdc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3708      	adds	r7, #8
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	2000000c 	.word	0x2000000c
 8001fe8:	20000018 	.word	0x20000018
 8001fec:	20000014 	.word	0x20000014

08001ff0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ff4:	4b05      	ldr	r3, [pc, #20]	; (800200c <HAL_IncTick+0x1c>)
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	4b05      	ldr	r3, [pc, #20]	; (8002010 <HAL_IncTick+0x20>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4413      	add	r3, r2
 8002000:	4a03      	ldr	r2, [pc, #12]	; (8002010 <HAL_IncTick+0x20>)
 8002002:	6013      	str	r3, [r2, #0]
}
 8002004:	bf00      	nop
 8002006:	46bd      	mov	sp, r7
 8002008:	bc80      	pop	{r7}
 800200a:	4770      	bx	lr
 800200c:	20000018 	.word	0x20000018
 8002010:	20000128 	.word	0x20000128

08002014 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  return uwTick;
 8002018:	4b02      	ldr	r3, [pc, #8]	; (8002024 <HAL_GetTick+0x10>)
 800201a:	681b      	ldr	r3, [r3, #0]
}
 800201c:	4618      	mov	r0, r3
 800201e:	46bd      	mov	sp, r7
 8002020:	bc80      	pop	{r7}
 8002022:	4770      	bx	lr
 8002024:	20000128 	.word	0x20000128

08002028 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002028:	b480      	push	{r7}
 800202a:	b085      	sub	sp, #20
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f003 0307 	and.w	r3, r3, #7
 8002036:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002038:	4b0c      	ldr	r3, [pc, #48]	; (800206c <__NVIC_SetPriorityGrouping+0x44>)
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800203e:	68ba      	ldr	r2, [r7, #8]
 8002040:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002044:	4013      	ands	r3, r2
 8002046:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002050:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002054:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002058:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800205a:	4a04      	ldr	r2, [pc, #16]	; (800206c <__NVIC_SetPriorityGrouping+0x44>)
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	60d3      	str	r3, [r2, #12]
}
 8002060:	bf00      	nop
 8002062:	3714      	adds	r7, #20
 8002064:	46bd      	mov	sp, r7
 8002066:	bc80      	pop	{r7}
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	e000ed00 	.word	0xe000ed00

08002070 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002074:	4b04      	ldr	r3, [pc, #16]	; (8002088 <__NVIC_GetPriorityGrouping+0x18>)
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	0a1b      	lsrs	r3, r3, #8
 800207a:	f003 0307 	and.w	r3, r3, #7
}
 800207e:	4618      	mov	r0, r3
 8002080:	46bd      	mov	sp, r7
 8002082:	bc80      	pop	{r7}
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	e000ed00 	.word	0xe000ed00

0800208c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	4603      	mov	r3, r0
 8002094:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800209a:	2b00      	cmp	r3, #0
 800209c:	db0b      	blt.n	80020b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800209e:	79fb      	ldrb	r3, [r7, #7]
 80020a0:	f003 021f 	and.w	r2, r3, #31
 80020a4:	4906      	ldr	r1, [pc, #24]	; (80020c0 <__NVIC_EnableIRQ+0x34>)
 80020a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020aa:	095b      	lsrs	r3, r3, #5
 80020ac:	2001      	movs	r0, #1
 80020ae:	fa00 f202 	lsl.w	r2, r0, r2
 80020b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020b6:	bf00      	nop
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bc80      	pop	{r7}
 80020be:	4770      	bx	lr
 80020c0:	e000e100 	.word	0xe000e100

080020c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	4603      	mov	r3, r0
 80020cc:	6039      	str	r1, [r7, #0]
 80020ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	db0a      	blt.n	80020ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	b2da      	uxtb	r2, r3
 80020dc:	490c      	ldr	r1, [pc, #48]	; (8002110 <__NVIC_SetPriority+0x4c>)
 80020de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e2:	0112      	lsls	r2, r2, #4
 80020e4:	b2d2      	uxtb	r2, r2
 80020e6:	440b      	add	r3, r1
 80020e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020ec:	e00a      	b.n	8002104 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	b2da      	uxtb	r2, r3
 80020f2:	4908      	ldr	r1, [pc, #32]	; (8002114 <__NVIC_SetPriority+0x50>)
 80020f4:	79fb      	ldrb	r3, [r7, #7]
 80020f6:	f003 030f 	and.w	r3, r3, #15
 80020fa:	3b04      	subs	r3, #4
 80020fc:	0112      	lsls	r2, r2, #4
 80020fe:	b2d2      	uxtb	r2, r2
 8002100:	440b      	add	r3, r1
 8002102:	761a      	strb	r2, [r3, #24]
}
 8002104:	bf00      	nop
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	bc80      	pop	{r7}
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	e000e100 	.word	0xe000e100
 8002114:	e000ed00 	.word	0xe000ed00

08002118 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002118:	b480      	push	{r7}
 800211a:	b089      	sub	sp, #36	; 0x24
 800211c:	af00      	add	r7, sp, #0
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	60b9      	str	r1, [r7, #8]
 8002122:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f003 0307 	and.w	r3, r3, #7
 800212a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	f1c3 0307 	rsb	r3, r3, #7
 8002132:	2b04      	cmp	r3, #4
 8002134:	bf28      	it	cs
 8002136:	2304      	movcs	r3, #4
 8002138:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	3304      	adds	r3, #4
 800213e:	2b06      	cmp	r3, #6
 8002140:	d902      	bls.n	8002148 <NVIC_EncodePriority+0x30>
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	3b03      	subs	r3, #3
 8002146:	e000      	b.n	800214a <NVIC_EncodePriority+0x32>
 8002148:	2300      	movs	r3, #0
 800214a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800214c:	f04f 32ff 	mov.w	r2, #4294967295
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	fa02 f303 	lsl.w	r3, r2, r3
 8002156:	43da      	mvns	r2, r3
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	401a      	ands	r2, r3
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002160:	f04f 31ff 	mov.w	r1, #4294967295
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	fa01 f303 	lsl.w	r3, r1, r3
 800216a:	43d9      	mvns	r1, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002170:	4313      	orrs	r3, r2
         );
}
 8002172:	4618      	mov	r0, r3
 8002174:	3724      	adds	r7, #36	; 0x24
 8002176:	46bd      	mov	sp, r7
 8002178:	bc80      	pop	{r7}
 800217a:	4770      	bx	lr

0800217c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	3b01      	subs	r3, #1
 8002188:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800218c:	d301      	bcc.n	8002192 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800218e:	2301      	movs	r3, #1
 8002190:	e00f      	b.n	80021b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002192:	4a0a      	ldr	r2, [pc, #40]	; (80021bc <SysTick_Config+0x40>)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	3b01      	subs	r3, #1
 8002198:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800219a:	210f      	movs	r1, #15
 800219c:	f04f 30ff 	mov.w	r0, #4294967295
 80021a0:	f7ff ff90 	bl	80020c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021a4:	4b05      	ldr	r3, [pc, #20]	; (80021bc <SysTick_Config+0x40>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021aa:	4b04      	ldr	r3, [pc, #16]	; (80021bc <SysTick_Config+0x40>)
 80021ac:	2207      	movs	r2, #7
 80021ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021b0:	2300      	movs	r3, #0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	e000e010 	.word	0xe000e010

080021c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f7ff ff2d 	bl	8002028 <__NVIC_SetPriorityGrouping>
}
 80021ce:	bf00      	nop
 80021d0:	3708      	adds	r7, #8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021d6:	b580      	push	{r7, lr}
 80021d8:	b086      	sub	sp, #24
 80021da:	af00      	add	r7, sp, #0
 80021dc:	4603      	mov	r3, r0
 80021de:	60b9      	str	r1, [r7, #8]
 80021e0:	607a      	str	r2, [r7, #4]
 80021e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021e4:	2300      	movs	r3, #0
 80021e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021e8:	f7ff ff42 	bl	8002070 <__NVIC_GetPriorityGrouping>
 80021ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	68b9      	ldr	r1, [r7, #8]
 80021f2:	6978      	ldr	r0, [r7, #20]
 80021f4:	f7ff ff90 	bl	8002118 <NVIC_EncodePriority>
 80021f8:	4602      	mov	r2, r0
 80021fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021fe:	4611      	mov	r1, r2
 8002200:	4618      	mov	r0, r3
 8002202:	f7ff ff5f 	bl	80020c4 <__NVIC_SetPriority>
}
 8002206:	bf00      	nop
 8002208:	3718      	adds	r7, #24
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}

0800220e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800220e:	b580      	push	{r7, lr}
 8002210:	b082      	sub	sp, #8
 8002212:	af00      	add	r7, sp, #0
 8002214:	4603      	mov	r3, r0
 8002216:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002218:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800221c:	4618      	mov	r0, r3
 800221e:	f7ff ff35 	bl	800208c <__NVIC_EnableIRQ>
}
 8002222:	bf00      	nop
 8002224:	3708      	adds	r7, #8
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}

0800222a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800222a:	b580      	push	{r7, lr}
 800222c:	b082      	sub	sp, #8
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f7ff ffa2 	bl	800217c <SysTick_Config>
 8002238:	4603      	mov	r3, r0
}
 800223a:	4618      	mov	r0, r3
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
	...

08002244 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002244:	b480      	push	{r7}
 8002246:	b08b      	sub	sp, #44	; 0x2c
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800224e:	2300      	movs	r3, #0
 8002250:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002252:	2300      	movs	r3, #0
 8002254:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002256:	e148      	b.n	80024ea <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002258:	2201      	movs	r2, #1
 800225a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	69fa      	ldr	r2, [r7, #28]
 8002268:	4013      	ands	r3, r2
 800226a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	429a      	cmp	r2, r3
 8002272:	f040 8137 	bne.w	80024e4 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	4aa3      	ldr	r2, [pc, #652]	; (8002508 <HAL_GPIO_Init+0x2c4>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d05e      	beq.n	800233e <HAL_GPIO_Init+0xfa>
 8002280:	4aa1      	ldr	r2, [pc, #644]	; (8002508 <HAL_GPIO_Init+0x2c4>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d875      	bhi.n	8002372 <HAL_GPIO_Init+0x12e>
 8002286:	4aa1      	ldr	r2, [pc, #644]	; (800250c <HAL_GPIO_Init+0x2c8>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d058      	beq.n	800233e <HAL_GPIO_Init+0xfa>
 800228c:	4a9f      	ldr	r2, [pc, #636]	; (800250c <HAL_GPIO_Init+0x2c8>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d86f      	bhi.n	8002372 <HAL_GPIO_Init+0x12e>
 8002292:	4a9f      	ldr	r2, [pc, #636]	; (8002510 <HAL_GPIO_Init+0x2cc>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d052      	beq.n	800233e <HAL_GPIO_Init+0xfa>
 8002298:	4a9d      	ldr	r2, [pc, #628]	; (8002510 <HAL_GPIO_Init+0x2cc>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d869      	bhi.n	8002372 <HAL_GPIO_Init+0x12e>
 800229e:	4a9d      	ldr	r2, [pc, #628]	; (8002514 <HAL_GPIO_Init+0x2d0>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d04c      	beq.n	800233e <HAL_GPIO_Init+0xfa>
 80022a4:	4a9b      	ldr	r2, [pc, #620]	; (8002514 <HAL_GPIO_Init+0x2d0>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d863      	bhi.n	8002372 <HAL_GPIO_Init+0x12e>
 80022aa:	4a9b      	ldr	r2, [pc, #620]	; (8002518 <HAL_GPIO_Init+0x2d4>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d046      	beq.n	800233e <HAL_GPIO_Init+0xfa>
 80022b0:	4a99      	ldr	r2, [pc, #612]	; (8002518 <HAL_GPIO_Init+0x2d4>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d85d      	bhi.n	8002372 <HAL_GPIO_Init+0x12e>
 80022b6:	2b12      	cmp	r3, #18
 80022b8:	d82a      	bhi.n	8002310 <HAL_GPIO_Init+0xcc>
 80022ba:	2b12      	cmp	r3, #18
 80022bc:	d859      	bhi.n	8002372 <HAL_GPIO_Init+0x12e>
 80022be:	a201      	add	r2, pc, #4	; (adr r2, 80022c4 <HAL_GPIO_Init+0x80>)
 80022c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022c4:	0800233f 	.word	0x0800233f
 80022c8:	08002319 	.word	0x08002319
 80022cc:	0800232b 	.word	0x0800232b
 80022d0:	0800236d 	.word	0x0800236d
 80022d4:	08002373 	.word	0x08002373
 80022d8:	08002373 	.word	0x08002373
 80022dc:	08002373 	.word	0x08002373
 80022e0:	08002373 	.word	0x08002373
 80022e4:	08002373 	.word	0x08002373
 80022e8:	08002373 	.word	0x08002373
 80022ec:	08002373 	.word	0x08002373
 80022f0:	08002373 	.word	0x08002373
 80022f4:	08002373 	.word	0x08002373
 80022f8:	08002373 	.word	0x08002373
 80022fc:	08002373 	.word	0x08002373
 8002300:	08002373 	.word	0x08002373
 8002304:	08002373 	.word	0x08002373
 8002308:	08002321 	.word	0x08002321
 800230c:	08002335 	.word	0x08002335
 8002310:	4a82      	ldr	r2, [pc, #520]	; (800251c <HAL_GPIO_Init+0x2d8>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d013      	beq.n	800233e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002316:	e02c      	b.n	8002372 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	623b      	str	r3, [r7, #32]
          break;
 800231e:	e029      	b.n	8002374 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	3304      	adds	r3, #4
 8002326:	623b      	str	r3, [r7, #32]
          break;
 8002328:	e024      	b.n	8002374 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	3308      	adds	r3, #8
 8002330:	623b      	str	r3, [r7, #32]
          break;
 8002332:	e01f      	b.n	8002374 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	330c      	adds	r3, #12
 800233a:	623b      	str	r3, [r7, #32]
          break;
 800233c:	e01a      	b.n	8002374 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d102      	bne.n	800234c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002346:	2304      	movs	r3, #4
 8002348:	623b      	str	r3, [r7, #32]
          break;
 800234a:	e013      	b.n	8002374 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	2b01      	cmp	r3, #1
 8002352:	d105      	bne.n	8002360 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002354:	2308      	movs	r3, #8
 8002356:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	69fa      	ldr	r2, [r7, #28]
 800235c:	611a      	str	r2, [r3, #16]
          break;
 800235e:	e009      	b.n	8002374 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002360:	2308      	movs	r3, #8
 8002362:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	69fa      	ldr	r2, [r7, #28]
 8002368:	615a      	str	r2, [r3, #20]
          break;
 800236a:	e003      	b.n	8002374 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800236c:	2300      	movs	r3, #0
 800236e:	623b      	str	r3, [r7, #32]
          break;
 8002370:	e000      	b.n	8002374 <HAL_GPIO_Init+0x130>
          break;
 8002372:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	2bff      	cmp	r3, #255	; 0xff
 8002378:	d801      	bhi.n	800237e <HAL_GPIO_Init+0x13a>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	e001      	b.n	8002382 <HAL_GPIO_Init+0x13e>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	3304      	adds	r3, #4
 8002382:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	2bff      	cmp	r3, #255	; 0xff
 8002388:	d802      	bhi.n	8002390 <HAL_GPIO_Init+0x14c>
 800238a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	e002      	b.n	8002396 <HAL_GPIO_Init+0x152>
 8002390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002392:	3b08      	subs	r3, #8
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	210f      	movs	r1, #15
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	fa01 f303 	lsl.w	r3, r1, r3
 80023a4:	43db      	mvns	r3, r3
 80023a6:	401a      	ands	r2, r3
 80023a8:	6a39      	ldr	r1, [r7, #32]
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	fa01 f303 	lsl.w	r3, r1, r3
 80023b0:	431a      	orrs	r2, r3
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	f000 8090 	beq.w	80024e4 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80023c4:	4b56      	ldr	r3, [pc, #344]	; (8002520 <HAL_GPIO_Init+0x2dc>)
 80023c6:	699b      	ldr	r3, [r3, #24]
 80023c8:	4a55      	ldr	r2, [pc, #340]	; (8002520 <HAL_GPIO_Init+0x2dc>)
 80023ca:	f043 0301 	orr.w	r3, r3, #1
 80023ce:	6193      	str	r3, [r2, #24]
 80023d0:	4b53      	ldr	r3, [pc, #332]	; (8002520 <HAL_GPIO_Init+0x2dc>)
 80023d2:	699b      	ldr	r3, [r3, #24]
 80023d4:	f003 0301 	and.w	r3, r3, #1
 80023d8:	60bb      	str	r3, [r7, #8]
 80023da:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80023dc:	4a51      	ldr	r2, [pc, #324]	; (8002524 <HAL_GPIO_Init+0x2e0>)
 80023de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e0:	089b      	lsrs	r3, r3, #2
 80023e2:	3302      	adds	r3, #2
 80023e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023e8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80023ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ec:	f003 0303 	and.w	r3, r3, #3
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	220f      	movs	r2, #15
 80023f4:	fa02 f303 	lsl.w	r3, r2, r3
 80023f8:	43db      	mvns	r3, r3
 80023fa:	68fa      	ldr	r2, [r7, #12]
 80023fc:	4013      	ands	r3, r2
 80023fe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	4a49      	ldr	r2, [pc, #292]	; (8002528 <HAL_GPIO_Init+0x2e4>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d00d      	beq.n	8002424 <HAL_GPIO_Init+0x1e0>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	4a48      	ldr	r2, [pc, #288]	; (800252c <HAL_GPIO_Init+0x2e8>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d007      	beq.n	8002420 <HAL_GPIO_Init+0x1dc>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	4a47      	ldr	r2, [pc, #284]	; (8002530 <HAL_GPIO_Init+0x2ec>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d101      	bne.n	800241c <HAL_GPIO_Init+0x1d8>
 8002418:	2302      	movs	r3, #2
 800241a:	e004      	b.n	8002426 <HAL_GPIO_Init+0x1e2>
 800241c:	2303      	movs	r3, #3
 800241e:	e002      	b.n	8002426 <HAL_GPIO_Init+0x1e2>
 8002420:	2301      	movs	r3, #1
 8002422:	e000      	b.n	8002426 <HAL_GPIO_Init+0x1e2>
 8002424:	2300      	movs	r3, #0
 8002426:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002428:	f002 0203 	and.w	r2, r2, #3
 800242c:	0092      	lsls	r2, r2, #2
 800242e:	4093      	lsls	r3, r2
 8002430:	68fa      	ldr	r2, [r7, #12]
 8002432:	4313      	orrs	r3, r2
 8002434:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002436:	493b      	ldr	r1, [pc, #236]	; (8002524 <HAL_GPIO_Init+0x2e0>)
 8002438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243a:	089b      	lsrs	r3, r3, #2
 800243c:	3302      	adds	r3, #2
 800243e:	68fa      	ldr	r2, [r7, #12]
 8002440:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d006      	beq.n	800245e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002450:	4b38      	ldr	r3, [pc, #224]	; (8002534 <HAL_GPIO_Init+0x2f0>)
 8002452:	689a      	ldr	r2, [r3, #8]
 8002454:	4937      	ldr	r1, [pc, #220]	; (8002534 <HAL_GPIO_Init+0x2f0>)
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	4313      	orrs	r3, r2
 800245a:	608b      	str	r3, [r1, #8]
 800245c:	e006      	b.n	800246c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800245e:	4b35      	ldr	r3, [pc, #212]	; (8002534 <HAL_GPIO_Init+0x2f0>)
 8002460:	689a      	ldr	r2, [r3, #8]
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	43db      	mvns	r3, r3
 8002466:	4933      	ldr	r1, [pc, #204]	; (8002534 <HAL_GPIO_Init+0x2f0>)
 8002468:	4013      	ands	r3, r2
 800246a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d006      	beq.n	8002486 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002478:	4b2e      	ldr	r3, [pc, #184]	; (8002534 <HAL_GPIO_Init+0x2f0>)
 800247a:	68da      	ldr	r2, [r3, #12]
 800247c:	492d      	ldr	r1, [pc, #180]	; (8002534 <HAL_GPIO_Init+0x2f0>)
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	4313      	orrs	r3, r2
 8002482:	60cb      	str	r3, [r1, #12]
 8002484:	e006      	b.n	8002494 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002486:	4b2b      	ldr	r3, [pc, #172]	; (8002534 <HAL_GPIO_Init+0x2f0>)
 8002488:	68da      	ldr	r2, [r3, #12]
 800248a:	69bb      	ldr	r3, [r7, #24]
 800248c:	43db      	mvns	r3, r3
 800248e:	4929      	ldr	r1, [pc, #164]	; (8002534 <HAL_GPIO_Init+0x2f0>)
 8002490:	4013      	ands	r3, r2
 8002492:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d006      	beq.n	80024ae <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80024a0:	4b24      	ldr	r3, [pc, #144]	; (8002534 <HAL_GPIO_Init+0x2f0>)
 80024a2:	685a      	ldr	r2, [r3, #4]
 80024a4:	4923      	ldr	r1, [pc, #140]	; (8002534 <HAL_GPIO_Init+0x2f0>)
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	604b      	str	r3, [r1, #4]
 80024ac:	e006      	b.n	80024bc <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80024ae:	4b21      	ldr	r3, [pc, #132]	; (8002534 <HAL_GPIO_Init+0x2f0>)
 80024b0:	685a      	ldr	r2, [r3, #4]
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	43db      	mvns	r3, r3
 80024b6:	491f      	ldr	r1, [pc, #124]	; (8002534 <HAL_GPIO_Init+0x2f0>)
 80024b8:	4013      	ands	r3, r2
 80024ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d006      	beq.n	80024d6 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80024c8:	4b1a      	ldr	r3, [pc, #104]	; (8002534 <HAL_GPIO_Init+0x2f0>)
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	4919      	ldr	r1, [pc, #100]	; (8002534 <HAL_GPIO_Init+0x2f0>)
 80024ce:	69bb      	ldr	r3, [r7, #24]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	600b      	str	r3, [r1, #0]
 80024d4:	e006      	b.n	80024e4 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80024d6:	4b17      	ldr	r3, [pc, #92]	; (8002534 <HAL_GPIO_Init+0x2f0>)
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	43db      	mvns	r3, r3
 80024de:	4915      	ldr	r1, [pc, #84]	; (8002534 <HAL_GPIO_Init+0x2f0>)
 80024e0:	4013      	ands	r3, r2
 80024e2:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80024e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e6:	3301      	adds	r3, #1
 80024e8:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f0:	fa22 f303 	lsr.w	r3, r2, r3
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	f47f aeaf 	bne.w	8002258 <HAL_GPIO_Init+0x14>
  }
}
 80024fa:	bf00      	nop
 80024fc:	bf00      	nop
 80024fe:	372c      	adds	r7, #44	; 0x2c
 8002500:	46bd      	mov	sp, r7
 8002502:	bc80      	pop	{r7}
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	10320000 	.word	0x10320000
 800250c:	10310000 	.word	0x10310000
 8002510:	10220000 	.word	0x10220000
 8002514:	10210000 	.word	0x10210000
 8002518:	10120000 	.word	0x10120000
 800251c:	10110000 	.word	0x10110000
 8002520:	40021000 	.word	0x40021000
 8002524:	40010000 	.word	0x40010000
 8002528:	40010800 	.word	0x40010800
 800252c:	40010c00 	.word	0x40010c00
 8002530:	40011000 	.word	0x40011000
 8002534:	40010400 	.word	0x40010400

08002538 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002538:	b480      	push	{r7}
 800253a:	b085      	sub	sp, #20
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	460b      	mov	r3, r1
 8002542:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	689a      	ldr	r2, [r3, #8]
 8002548:	887b      	ldrh	r3, [r7, #2]
 800254a:	4013      	ands	r3, r2
 800254c:	2b00      	cmp	r3, #0
 800254e:	d002      	beq.n	8002556 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002550:	2301      	movs	r3, #1
 8002552:	73fb      	strb	r3, [r7, #15]
 8002554:	e001      	b.n	800255a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002556:	2300      	movs	r3, #0
 8002558:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800255a:	7bfb      	ldrb	r3, [r7, #15]
}
 800255c:	4618      	mov	r0, r3
 800255e:	3714      	adds	r7, #20
 8002560:	46bd      	mov	sp, r7
 8002562:	bc80      	pop	{r7}
 8002564:	4770      	bx	lr

08002566 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002566:	b480      	push	{r7}
 8002568:	b083      	sub	sp, #12
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
 800256e:	460b      	mov	r3, r1
 8002570:	807b      	strh	r3, [r7, #2]
 8002572:	4613      	mov	r3, r2
 8002574:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002576:	787b      	ldrb	r3, [r7, #1]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d003      	beq.n	8002584 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800257c:	887a      	ldrh	r2, [r7, #2]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002582:	e003      	b.n	800258c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002584:	887b      	ldrh	r3, [r7, #2]
 8002586:	041a      	lsls	r2, r3, #16
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	611a      	str	r2, [r3, #16]
}
 800258c:	bf00      	nop
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	bc80      	pop	{r7}
 8002594:	4770      	bx	lr

08002596 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002596:	b480      	push	{r7}
 8002598:	b085      	sub	sp, #20
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
 800259e:	460b      	mov	r3, r1
 80025a0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80025a8:	887a      	ldrh	r2, [r7, #2]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	4013      	ands	r3, r2
 80025ae:	041a      	lsls	r2, r3, #16
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	43d9      	mvns	r1, r3
 80025b4:	887b      	ldrh	r3, [r7, #2]
 80025b6:	400b      	ands	r3, r1
 80025b8:	431a      	orrs	r2, r3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	611a      	str	r2, [r3, #16]
}
 80025be:	bf00      	nop
 80025c0:	3714      	adds	r7, #20
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bc80      	pop	{r7}
 80025c6:	4770      	bx	lr

080025c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b086      	sub	sp, #24
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d101      	bne.n	80025da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e26c      	b.n	8002ab4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	f000 8087 	beq.w	80026f6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025e8:	4b92      	ldr	r3, [pc, #584]	; (8002834 <HAL_RCC_OscConfig+0x26c>)
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f003 030c 	and.w	r3, r3, #12
 80025f0:	2b04      	cmp	r3, #4
 80025f2:	d00c      	beq.n	800260e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80025f4:	4b8f      	ldr	r3, [pc, #572]	; (8002834 <HAL_RCC_OscConfig+0x26c>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f003 030c 	and.w	r3, r3, #12
 80025fc:	2b08      	cmp	r3, #8
 80025fe:	d112      	bne.n	8002626 <HAL_RCC_OscConfig+0x5e>
 8002600:	4b8c      	ldr	r3, [pc, #560]	; (8002834 <HAL_RCC_OscConfig+0x26c>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002608:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800260c:	d10b      	bne.n	8002626 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800260e:	4b89      	ldr	r3, [pc, #548]	; (8002834 <HAL_RCC_OscConfig+0x26c>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d06c      	beq.n	80026f4 <HAL_RCC_OscConfig+0x12c>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d168      	bne.n	80026f4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e246      	b.n	8002ab4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800262e:	d106      	bne.n	800263e <HAL_RCC_OscConfig+0x76>
 8002630:	4b80      	ldr	r3, [pc, #512]	; (8002834 <HAL_RCC_OscConfig+0x26c>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a7f      	ldr	r2, [pc, #508]	; (8002834 <HAL_RCC_OscConfig+0x26c>)
 8002636:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800263a:	6013      	str	r3, [r2, #0]
 800263c:	e02e      	b.n	800269c <HAL_RCC_OscConfig+0xd4>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d10c      	bne.n	8002660 <HAL_RCC_OscConfig+0x98>
 8002646:	4b7b      	ldr	r3, [pc, #492]	; (8002834 <HAL_RCC_OscConfig+0x26c>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a7a      	ldr	r2, [pc, #488]	; (8002834 <HAL_RCC_OscConfig+0x26c>)
 800264c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002650:	6013      	str	r3, [r2, #0]
 8002652:	4b78      	ldr	r3, [pc, #480]	; (8002834 <HAL_RCC_OscConfig+0x26c>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a77      	ldr	r2, [pc, #476]	; (8002834 <HAL_RCC_OscConfig+0x26c>)
 8002658:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800265c:	6013      	str	r3, [r2, #0]
 800265e:	e01d      	b.n	800269c <HAL_RCC_OscConfig+0xd4>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002668:	d10c      	bne.n	8002684 <HAL_RCC_OscConfig+0xbc>
 800266a:	4b72      	ldr	r3, [pc, #456]	; (8002834 <HAL_RCC_OscConfig+0x26c>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a71      	ldr	r2, [pc, #452]	; (8002834 <HAL_RCC_OscConfig+0x26c>)
 8002670:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002674:	6013      	str	r3, [r2, #0]
 8002676:	4b6f      	ldr	r3, [pc, #444]	; (8002834 <HAL_RCC_OscConfig+0x26c>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a6e      	ldr	r2, [pc, #440]	; (8002834 <HAL_RCC_OscConfig+0x26c>)
 800267c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002680:	6013      	str	r3, [r2, #0]
 8002682:	e00b      	b.n	800269c <HAL_RCC_OscConfig+0xd4>
 8002684:	4b6b      	ldr	r3, [pc, #428]	; (8002834 <HAL_RCC_OscConfig+0x26c>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a6a      	ldr	r2, [pc, #424]	; (8002834 <HAL_RCC_OscConfig+0x26c>)
 800268a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800268e:	6013      	str	r3, [r2, #0]
 8002690:	4b68      	ldr	r3, [pc, #416]	; (8002834 <HAL_RCC_OscConfig+0x26c>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a67      	ldr	r2, [pc, #412]	; (8002834 <HAL_RCC_OscConfig+0x26c>)
 8002696:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800269a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d013      	beq.n	80026cc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a4:	f7ff fcb6 	bl	8002014 <HAL_GetTick>
 80026a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026aa:	e008      	b.n	80026be <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026ac:	f7ff fcb2 	bl	8002014 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b64      	cmp	r3, #100	; 0x64
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e1fa      	b.n	8002ab4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026be:	4b5d      	ldr	r3, [pc, #372]	; (8002834 <HAL_RCC_OscConfig+0x26c>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d0f0      	beq.n	80026ac <HAL_RCC_OscConfig+0xe4>
 80026ca:	e014      	b.n	80026f6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026cc:	f7ff fca2 	bl	8002014 <HAL_GetTick>
 80026d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026d2:	e008      	b.n	80026e6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026d4:	f7ff fc9e 	bl	8002014 <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	2b64      	cmp	r3, #100	; 0x64
 80026e0:	d901      	bls.n	80026e6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e1e6      	b.n	8002ab4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026e6:	4b53      	ldr	r3, [pc, #332]	; (8002834 <HAL_RCC_OscConfig+0x26c>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d1f0      	bne.n	80026d4 <HAL_RCC_OscConfig+0x10c>
 80026f2:	e000      	b.n	80026f6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d063      	beq.n	80027ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002702:	4b4c      	ldr	r3, [pc, #304]	; (8002834 <HAL_RCC_OscConfig+0x26c>)
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f003 030c 	and.w	r3, r3, #12
 800270a:	2b00      	cmp	r3, #0
 800270c:	d00b      	beq.n	8002726 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800270e:	4b49      	ldr	r3, [pc, #292]	; (8002834 <HAL_RCC_OscConfig+0x26c>)
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f003 030c 	and.w	r3, r3, #12
 8002716:	2b08      	cmp	r3, #8
 8002718:	d11c      	bne.n	8002754 <HAL_RCC_OscConfig+0x18c>
 800271a:	4b46      	ldr	r3, [pc, #280]	; (8002834 <HAL_RCC_OscConfig+0x26c>)
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d116      	bne.n	8002754 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002726:	4b43      	ldr	r3, [pc, #268]	; (8002834 <HAL_RCC_OscConfig+0x26c>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0302 	and.w	r3, r3, #2
 800272e:	2b00      	cmp	r3, #0
 8002730:	d005      	beq.n	800273e <HAL_RCC_OscConfig+0x176>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	2b01      	cmp	r3, #1
 8002738:	d001      	beq.n	800273e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e1ba      	b.n	8002ab4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800273e:	4b3d      	ldr	r3, [pc, #244]	; (8002834 <HAL_RCC_OscConfig+0x26c>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	695b      	ldr	r3, [r3, #20]
 800274a:	00db      	lsls	r3, r3, #3
 800274c:	4939      	ldr	r1, [pc, #228]	; (8002834 <HAL_RCC_OscConfig+0x26c>)
 800274e:	4313      	orrs	r3, r2
 8002750:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002752:	e03a      	b.n	80027ca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	691b      	ldr	r3, [r3, #16]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d020      	beq.n	800279e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800275c:	4b36      	ldr	r3, [pc, #216]	; (8002838 <HAL_RCC_OscConfig+0x270>)
 800275e:	2201      	movs	r2, #1
 8002760:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002762:	f7ff fc57 	bl	8002014 <HAL_GetTick>
 8002766:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002768:	e008      	b.n	800277c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800276a:	f7ff fc53 	bl	8002014 <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	2b02      	cmp	r3, #2
 8002776:	d901      	bls.n	800277c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e19b      	b.n	8002ab4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800277c:	4b2d      	ldr	r3, [pc, #180]	; (8002834 <HAL_RCC_OscConfig+0x26c>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0302 	and.w	r3, r3, #2
 8002784:	2b00      	cmp	r3, #0
 8002786:	d0f0      	beq.n	800276a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002788:	4b2a      	ldr	r3, [pc, #168]	; (8002834 <HAL_RCC_OscConfig+0x26c>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	695b      	ldr	r3, [r3, #20]
 8002794:	00db      	lsls	r3, r3, #3
 8002796:	4927      	ldr	r1, [pc, #156]	; (8002834 <HAL_RCC_OscConfig+0x26c>)
 8002798:	4313      	orrs	r3, r2
 800279a:	600b      	str	r3, [r1, #0]
 800279c:	e015      	b.n	80027ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800279e:	4b26      	ldr	r3, [pc, #152]	; (8002838 <HAL_RCC_OscConfig+0x270>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a4:	f7ff fc36 	bl	8002014 <HAL_GetTick>
 80027a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027aa:	e008      	b.n	80027be <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027ac:	f7ff fc32 	bl	8002014 <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d901      	bls.n	80027be <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e17a      	b.n	8002ab4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027be:	4b1d      	ldr	r3, [pc, #116]	; (8002834 <HAL_RCC_OscConfig+0x26c>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d1f0      	bne.n	80027ac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0308 	and.w	r3, r3, #8
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d03a      	beq.n	800284c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	699b      	ldr	r3, [r3, #24]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d019      	beq.n	8002812 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027de:	4b17      	ldr	r3, [pc, #92]	; (800283c <HAL_RCC_OscConfig+0x274>)
 80027e0:	2201      	movs	r2, #1
 80027e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027e4:	f7ff fc16 	bl	8002014 <HAL_GetTick>
 80027e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027ea:	e008      	b.n	80027fe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027ec:	f7ff fc12 	bl	8002014 <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e15a      	b.n	8002ab4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027fe:	4b0d      	ldr	r3, [pc, #52]	; (8002834 <HAL_RCC_OscConfig+0x26c>)
 8002800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002802:	f003 0302 	and.w	r3, r3, #2
 8002806:	2b00      	cmp	r3, #0
 8002808:	d0f0      	beq.n	80027ec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800280a:	2001      	movs	r0, #1
 800280c:	f000 fa9a 	bl	8002d44 <RCC_Delay>
 8002810:	e01c      	b.n	800284c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002812:	4b0a      	ldr	r3, [pc, #40]	; (800283c <HAL_RCC_OscConfig+0x274>)
 8002814:	2200      	movs	r2, #0
 8002816:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002818:	f7ff fbfc 	bl	8002014 <HAL_GetTick>
 800281c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800281e:	e00f      	b.n	8002840 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002820:	f7ff fbf8 	bl	8002014 <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	2b02      	cmp	r3, #2
 800282c:	d908      	bls.n	8002840 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e140      	b.n	8002ab4 <HAL_RCC_OscConfig+0x4ec>
 8002832:	bf00      	nop
 8002834:	40021000 	.word	0x40021000
 8002838:	42420000 	.word	0x42420000
 800283c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002840:	4b9e      	ldr	r3, [pc, #632]	; (8002abc <HAL_RCC_OscConfig+0x4f4>)
 8002842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002844:	f003 0302 	and.w	r3, r3, #2
 8002848:	2b00      	cmp	r3, #0
 800284a:	d1e9      	bne.n	8002820 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0304 	and.w	r3, r3, #4
 8002854:	2b00      	cmp	r3, #0
 8002856:	f000 80a6 	beq.w	80029a6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800285a:	2300      	movs	r3, #0
 800285c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800285e:	4b97      	ldr	r3, [pc, #604]	; (8002abc <HAL_RCC_OscConfig+0x4f4>)
 8002860:	69db      	ldr	r3, [r3, #28]
 8002862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d10d      	bne.n	8002886 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800286a:	4b94      	ldr	r3, [pc, #592]	; (8002abc <HAL_RCC_OscConfig+0x4f4>)
 800286c:	69db      	ldr	r3, [r3, #28]
 800286e:	4a93      	ldr	r2, [pc, #588]	; (8002abc <HAL_RCC_OscConfig+0x4f4>)
 8002870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002874:	61d3      	str	r3, [r2, #28]
 8002876:	4b91      	ldr	r3, [pc, #580]	; (8002abc <HAL_RCC_OscConfig+0x4f4>)
 8002878:	69db      	ldr	r3, [r3, #28]
 800287a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800287e:	60bb      	str	r3, [r7, #8]
 8002880:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002882:	2301      	movs	r3, #1
 8002884:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002886:	4b8e      	ldr	r3, [pc, #568]	; (8002ac0 <HAL_RCC_OscConfig+0x4f8>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800288e:	2b00      	cmp	r3, #0
 8002890:	d118      	bne.n	80028c4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002892:	4b8b      	ldr	r3, [pc, #556]	; (8002ac0 <HAL_RCC_OscConfig+0x4f8>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a8a      	ldr	r2, [pc, #552]	; (8002ac0 <HAL_RCC_OscConfig+0x4f8>)
 8002898:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800289c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800289e:	f7ff fbb9 	bl	8002014 <HAL_GetTick>
 80028a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028a4:	e008      	b.n	80028b8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028a6:	f7ff fbb5 	bl	8002014 <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	2b64      	cmp	r3, #100	; 0x64
 80028b2:	d901      	bls.n	80028b8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	e0fd      	b.n	8002ab4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028b8:	4b81      	ldr	r3, [pc, #516]	; (8002ac0 <HAL_RCC_OscConfig+0x4f8>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d0f0      	beq.n	80028a6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d106      	bne.n	80028da <HAL_RCC_OscConfig+0x312>
 80028cc:	4b7b      	ldr	r3, [pc, #492]	; (8002abc <HAL_RCC_OscConfig+0x4f4>)
 80028ce:	6a1b      	ldr	r3, [r3, #32]
 80028d0:	4a7a      	ldr	r2, [pc, #488]	; (8002abc <HAL_RCC_OscConfig+0x4f4>)
 80028d2:	f043 0301 	orr.w	r3, r3, #1
 80028d6:	6213      	str	r3, [r2, #32]
 80028d8:	e02d      	b.n	8002936 <HAL_RCC_OscConfig+0x36e>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d10c      	bne.n	80028fc <HAL_RCC_OscConfig+0x334>
 80028e2:	4b76      	ldr	r3, [pc, #472]	; (8002abc <HAL_RCC_OscConfig+0x4f4>)
 80028e4:	6a1b      	ldr	r3, [r3, #32]
 80028e6:	4a75      	ldr	r2, [pc, #468]	; (8002abc <HAL_RCC_OscConfig+0x4f4>)
 80028e8:	f023 0301 	bic.w	r3, r3, #1
 80028ec:	6213      	str	r3, [r2, #32]
 80028ee:	4b73      	ldr	r3, [pc, #460]	; (8002abc <HAL_RCC_OscConfig+0x4f4>)
 80028f0:	6a1b      	ldr	r3, [r3, #32]
 80028f2:	4a72      	ldr	r2, [pc, #456]	; (8002abc <HAL_RCC_OscConfig+0x4f4>)
 80028f4:	f023 0304 	bic.w	r3, r3, #4
 80028f8:	6213      	str	r3, [r2, #32]
 80028fa:	e01c      	b.n	8002936 <HAL_RCC_OscConfig+0x36e>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	2b05      	cmp	r3, #5
 8002902:	d10c      	bne.n	800291e <HAL_RCC_OscConfig+0x356>
 8002904:	4b6d      	ldr	r3, [pc, #436]	; (8002abc <HAL_RCC_OscConfig+0x4f4>)
 8002906:	6a1b      	ldr	r3, [r3, #32]
 8002908:	4a6c      	ldr	r2, [pc, #432]	; (8002abc <HAL_RCC_OscConfig+0x4f4>)
 800290a:	f043 0304 	orr.w	r3, r3, #4
 800290e:	6213      	str	r3, [r2, #32]
 8002910:	4b6a      	ldr	r3, [pc, #424]	; (8002abc <HAL_RCC_OscConfig+0x4f4>)
 8002912:	6a1b      	ldr	r3, [r3, #32]
 8002914:	4a69      	ldr	r2, [pc, #420]	; (8002abc <HAL_RCC_OscConfig+0x4f4>)
 8002916:	f043 0301 	orr.w	r3, r3, #1
 800291a:	6213      	str	r3, [r2, #32]
 800291c:	e00b      	b.n	8002936 <HAL_RCC_OscConfig+0x36e>
 800291e:	4b67      	ldr	r3, [pc, #412]	; (8002abc <HAL_RCC_OscConfig+0x4f4>)
 8002920:	6a1b      	ldr	r3, [r3, #32]
 8002922:	4a66      	ldr	r2, [pc, #408]	; (8002abc <HAL_RCC_OscConfig+0x4f4>)
 8002924:	f023 0301 	bic.w	r3, r3, #1
 8002928:	6213      	str	r3, [r2, #32]
 800292a:	4b64      	ldr	r3, [pc, #400]	; (8002abc <HAL_RCC_OscConfig+0x4f4>)
 800292c:	6a1b      	ldr	r3, [r3, #32]
 800292e:	4a63      	ldr	r2, [pc, #396]	; (8002abc <HAL_RCC_OscConfig+0x4f4>)
 8002930:	f023 0304 	bic.w	r3, r3, #4
 8002934:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d015      	beq.n	800296a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800293e:	f7ff fb69 	bl	8002014 <HAL_GetTick>
 8002942:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002944:	e00a      	b.n	800295c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002946:	f7ff fb65 	bl	8002014 <HAL_GetTick>
 800294a:	4602      	mov	r2, r0
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	f241 3288 	movw	r2, #5000	; 0x1388
 8002954:	4293      	cmp	r3, r2
 8002956:	d901      	bls.n	800295c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002958:	2303      	movs	r3, #3
 800295a:	e0ab      	b.n	8002ab4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800295c:	4b57      	ldr	r3, [pc, #348]	; (8002abc <HAL_RCC_OscConfig+0x4f4>)
 800295e:	6a1b      	ldr	r3, [r3, #32]
 8002960:	f003 0302 	and.w	r3, r3, #2
 8002964:	2b00      	cmp	r3, #0
 8002966:	d0ee      	beq.n	8002946 <HAL_RCC_OscConfig+0x37e>
 8002968:	e014      	b.n	8002994 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800296a:	f7ff fb53 	bl	8002014 <HAL_GetTick>
 800296e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002970:	e00a      	b.n	8002988 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002972:	f7ff fb4f 	bl	8002014 <HAL_GetTick>
 8002976:	4602      	mov	r2, r0
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002980:	4293      	cmp	r3, r2
 8002982:	d901      	bls.n	8002988 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	e095      	b.n	8002ab4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002988:	4b4c      	ldr	r3, [pc, #304]	; (8002abc <HAL_RCC_OscConfig+0x4f4>)
 800298a:	6a1b      	ldr	r3, [r3, #32]
 800298c:	f003 0302 	and.w	r3, r3, #2
 8002990:	2b00      	cmp	r3, #0
 8002992:	d1ee      	bne.n	8002972 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002994:	7dfb      	ldrb	r3, [r7, #23]
 8002996:	2b01      	cmp	r3, #1
 8002998:	d105      	bne.n	80029a6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800299a:	4b48      	ldr	r3, [pc, #288]	; (8002abc <HAL_RCC_OscConfig+0x4f4>)
 800299c:	69db      	ldr	r3, [r3, #28]
 800299e:	4a47      	ldr	r2, [pc, #284]	; (8002abc <HAL_RCC_OscConfig+0x4f4>)
 80029a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029a4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	69db      	ldr	r3, [r3, #28]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	f000 8081 	beq.w	8002ab2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029b0:	4b42      	ldr	r3, [pc, #264]	; (8002abc <HAL_RCC_OscConfig+0x4f4>)
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f003 030c 	and.w	r3, r3, #12
 80029b8:	2b08      	cmp	r3, #8
 80029ba:	d061      	beq.n	8002a80 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	69db      	ldr	r3, [r3, #28]
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d146      	bne.n	8002a52 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029c4:	4b3f      	ldr	r3, [pc, #252]	; (8002ac4 <HAL_RCC_OscConfig+0x4fc>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ca:	f7ff fb23 	bl	8002014 <HAL_GetTick>
 80029ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029d0:	e008      	b.n	80029e4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029d2:	f7ff fb1f 	bl	8002014 <HAL_GetTick>
 80029d6:	4602      	mov	r2, r0
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d901      	bls.n	80029e4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e067      	b.n	8002ab4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029e4:	4b35      	ldr	r3, [pc, #212]	; (8002abc <HAL_RCC_OscConfig+0x4f4>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d1f0      	bne.n	80029d2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6a1b      	ldr	r3, [r3, #32]
 80029f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029f8:	d108      	bne.n	8002a0c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80029fa:	4b30      	ldr	r3, [pc, #192]	; (8002abc <HAL_RCC_OscConfig+0x4f4>)
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	492d      	ldr	r1, [pc, #180]	; (8002abc <HAL_RCC_OscConfig+0x4f4>)
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a0c:	4b2b      	ldr	r3, [pc, #172]	; (8002abc <HAL_RCC_OscConfig+0x4f4>)
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6a19      	ldr	r1, [r3, #32]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1c:	430b      	orrs	r3, r1
 8002a1e:	4927      	ldr	r1, [pc, #156]	; (8002abc <HAL_RCC_OscConfig+0x4f4>)
 8002a20:	4313      	orrs	r3, r2
 8002a22:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a24:	4b27      	ldr	r3, [pc, #156]	; (8002ac4 <HAL_RCC_OscConfig+0x4fc>)
 8002a26:	2201      	movs	r2, #1
 8002a28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a2a:	f7ff faf3 	bl	8002014 <HAL_GetTick>
 8002a2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a30:	e008      	b.n	8002a44 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a32:	f7ff faef 	bl	8002014 <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d901      	bls.n	8002a44 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	e037      	b.n	8002ab4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a44:	4b1d      	ldr	r3, [pc, #116]	; (8002abc <HAL_RCC_OscConfig+0x4f4>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d0f0      	beq.n	8002a32 <HAL_RCC_OscConfig+0x46a>
 8002a50:	e02f      	b.n	8002ab2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a52:	4b1c      	ldr	r3, [pc, #112]	; (8002ac4 <HAL_RCC_OscConfig+0x4fc>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a58:	f7ff fadc 	bl	8002014 <HAL_GetTick>
 8002a5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a5e:	e008      	b.n	8002a72 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a60:	f7ff fad8 	bl	8002014 <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d901      	bls.n	8002a72 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e020      	b.n	8002ab4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a72:	4b12      	ldr	r3, [pc, #72]	; (8002abc <HAL_RCC_OscConfig+0x4f4>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d1f0      	bne.n	8002a60 <HAL_RCC_OscConfig+0x498>
 8002a7e:	e018      	b.n	8002ab2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	69db      	ldr	r3, [r3, #28]
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d101      	bne.n	8002a8c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e013      	b.n	8002ab4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a8c:	4b0b      	ldr	r3, [pc, #44]	; (8002abc <HAL_RCC_OscConfig+0x4f4>)
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a1b      	ldr	r3, [r3, #32]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d106      	bne.n	8002aae <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d001      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e000      	b.n	8002ab4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002ab2:	2300      	movs	r3, #0
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3718      	adds	r7, #24
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	40021000 	.word	0x40021000
 8002ac0:	40007000 	.word	0x40007000
 8002ac4:	42420060 	.word	0x42420060

08002ac8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d101      	bne.n	8002adc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e0d0      	b.n	8002c7e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002adc:	4b6a      	ldr	r3, [pc, #424]	; (8002c88 <HAL_RCC_ClockConfig+0x1c0>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0307 	and.w	r3, r3, #7
 8002ae4:	683a      	ldr	r2, [r7, #0]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d910      	bls.n	8002b0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aea:	4b67      	ldr	r3, [pc, #412]	; (8002c88 <HAL_RCC_ClockConfig+0x1c0>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f023 0207 	bic.w	r2, r3, #7
 8002af2:	4965      	ldr	r1, [pc, #404]	; (8002c88 <HAL_RCC_ClockConfig+0x1c0>)
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002afa:	4b63      	ldr	r3, [pc, #396]	; (8002c88 <HAL_RCC_ClockConfig+0x1c0>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0307 	and.w	r3, r3, #7
 8002b02:	683a      	ldr	r2, [r7, #0]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d001      	beq.n	8002b0c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e0b8      	b.n	8002c7e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0302 	and.w	r3, r3, #2
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d020      	beq.n	8002b5a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0304 	and.w	r3, r3, #4
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d005      	beq.n	8002b30 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b24:	4b59      	ldr	r3, [pc, #356]	; (8002c8c <HAL_RCC_ClockConfig+0x1c4>)
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	4a58      	ldr	r2, [pc, #352]	; (8002c8c <HAL_RCC_ClockConfig+0x1c4>)
 8002b2a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002b2e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0308 	and.w	r3, r3, #8
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d005      	beq.n	8002b48 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b3c:	4b53      	ldr	r3, [pc, #332]	; (8002c8c <HAL_RCC_ClockConfig+0x1c4>)
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	4a52      	ldr	r2, [pc, #328]	; (8002c8c <HAL_RCC_ClockConfig+0x1c4>)
 8002b42:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002b46:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b48:	4b50      	ldr	r3, [pc, #320]	; (8002c8c <HAL_RCC_ClockConfig+0x1c4>)
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	494d      	ldr	r1, [pc, #308]	; (8002c8c <HAL_RCC_ClockConfig+0x1c4>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0301 	and.w	r3, r3, #1
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d040      	beq.n	8002be8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d107      	bne.n	8002b7e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b6e:	4b47      	ldr	r3, [pc, #284]	; (8002c8c <HAL_RCC_ClockConfig+0x1c4>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d115      	bne.n	8002ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e07f      	b.n	8002c7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d107      	bne.n	8002b96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b86:	4b41      	ldr	r3, [pc, #260]	; (8002c8c <HAL_RCC_ClockConfig+0x1c4>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d109      	bne.n	8002ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e073      	b.n	8002c7e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b96:	4b3d      	ldr	r3, [pc, #244]	; (8002c8c <HAL_RCC_ClockConfig+0x1c4>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0302 	and.w	r3, r3, #2
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d101      	bne.n	8002ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e06b      	b.n	8002c7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ba6:	4b39      	ldr	r3, [pc, #228]	; (8002c8c <HAL_RCC_ClockConfig+0x1c4>)
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f023 0203 	bic.w	r2, r3, #3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	4936      	ldr	r1, [pc, #216]	; (8002c8c <HAL_RCC_ClockConfig+0x1c4>)
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bb8:	f7ff fa2c 	bl	8002014 <HAL_GetTick>
 8002bbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bbe:	e00a      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bc0:	f7ff fa28 	bl	8002014 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e053      	b.n	8002c7e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bd6:	4b2d      	ldr	r3, [pc, #180]	; (8002c8c <HAL_RCC_ClockConfig+0x1c4>)
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f003 020c 	and.w	r2, r3, #12
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d1eb      	bne.n	8002bc0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002be8:	4b27      	ldr	r3, [pc, #156]	; (8002c88 <HAL_RCC_ClockConfig+0x1c0>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0307 	and.w	r3, r3, #7
 8002bf0:	683a      	ldr	r2, [r7, #0]
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d210      	bcs.n	8002c18 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bf6:	4b24      	ldr	r3, [pc, #144]	; (8002c88 <HAL_RCC_ClockConfig+0x1c0>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f023 0207 	bic.w	r2, r3, #7
 8002bfe:	4922      	ldr	r1, [pc, #136]	; (8002c88 <HAL_RCC_ClockConfig+0x1c0>)
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c06:	4b20      	ldr	r3, [pc, #128]	; (8002c88 <HAL_RCC_ClockConfig+0x1c0>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0307 	and.w	r3, r3, #7
 8002c0e:	683a      	ldr	r2, [r7, #0]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d001      	beq.n	8002c18 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e032      	b.n	8002c7e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0304 	and.w	r3, r3, #4
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d008      	beq.n	8002c36 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c24:	4b19      	ldr	r3, [pc, #100]	; (8002c8c <HAL_RCC_ClockConfig+0x1c4>)
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	4916      	ldr	r1, [pc, #88]	; (8002c8c <HAL_RCC_ClockConfig+0x1c4>)
 8002c32:	4313      	orrs	r3, r2
 8002c34:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0308 	and.w	r3, r3, #8
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d009      	beq.n	8002c56 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c42:	4b12      	ldr	r3, [pc, #72]	; (8002c8c <HAL_RCC_ClockConfig+0x1c4>)
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	691b      	ldr	r3, [r3, #16]
 8002c4e:	00db      	lsls	r3, r3, #3
 8002c50:	490e      	ldr	r1, [pc, #56]	; (8002c8c <HAL_RCC_ClockConfig+0x1c4>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c56:	f000 f821 	bl	8002c9c <HAL_RCC_GetSysClockFreq>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	4b0b      	ldr	r3, [pc, #44]	; (8002c8c <HAL_RCC_ClockConfig+0x1c4>)
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	091b      	lsrs	r3, r3, #4
 8002c62:	f003 030f 	and.w	r3, r3, #15
 8002c66:	490a      	ldr	r1, [pc, #40]	; (8002c90 <HAL_RCC_ClockConfig+0x1c8>)
 8002c68:	5ccb      	ldrb	r3, [r1, r3]
 8002c6a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c6e:	4a09      	ldr	r2, [pc, #36]	; (8002c94 <HAL_RCC_ClockConfig+0x1cc>)
 8002c70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c72:	4b09      	ldr	r3, [pc, #36]	; (8002c98 <HAL_RCC_ClockConfig+0x1d0>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7ff f98a 	bl	8001f90 <HAL_InitTick>

  return HAL_OK;
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3710      	adds	r7, #16
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	40022000 	.word	0x40022000
 8002c8c:	40021000 	.word	0x40021000
 8002c90:	080035a8 	.word	0x080035a8
 8002c94:	2000000c 	.word	0x2000000c
 8002c98:	20000014 	.word	0x20000014

08002c9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b087      	sub	sp, #28
 8002ca0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	60fb      	str	r3, [r7, #12]
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	60bb      	str	r3, [r7, #8]
 8002caa:	2300      	movs	r3, #0
 8002cac:	617b      	str	r3, [r7, #20]
 8002cae:	2300      	movs	r3, #0
 8002cb0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002cb6:	4b1e      	ldr	r3, [pc, #120]	; (8002d30 <HAL_RCC_GetSysClockFreq+0x94>)
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f003 030c 	and.w	r3, r3, #12
 8002cc2:	2b04      	cmp	r3, #4
 8002cc4:	d002      	beq.n	8002ccc <HAL_RCC_GetSysClockFreq+0x30>
 8002cc6:	2b08      	cmp	r3, #8
 8002cc8:	d003      	beq.n	8002cd2 <HAL_RCC_GetSysClockFreq+0x36>
 8002cca:	e027      	b.n	8002d1c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ccc:	4b19      	ldr	r3, [pc, #100]	; (8002d34 <HAL_RCC_GetSysClockFreq+0x98>)
 8002cce:	613b      	str	r3, [r7, #16]
      break;
 8002cd0:	e027      	b.n	8002d22 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	0c9b      	lsrs	r3, r3, #18
 8002cd6:	f003 030f 	and.w	r3, r3, #15
 8002cda:	4a17      	ldr	r2, [pc, #92]	; (8002d38 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002cdc:	5cd3      	ldrb	r3, [r2, r3]
 8002cde:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d010      	beq.n	8002d0c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002cea:	4b11      	ldr	r3, [pc, #68]	; (8002d30 <HAL_RCC_GetSysClockFreq+0x94>)
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	0c5b      	lsrs	r3, r3, #17
 8002cf0:	f003 0301 	and.w	r3, r3, #1
 8002cf4:	4a11      	ldr	r2, [pc, #68]	; (8002d3c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002cf6:	5cd3      	ldrb	r3, [r2, r3]
 8002cf8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a0d      	ldr	r2, [pc, #52]	; (8002d34 <HAL_RCC_GetSysClockFreq+0x98>)
 8002cfe:	fb02 f203 	mul.w	r2, r2, r3
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d08:	617b      	str	r3, [r7, #20]
 8002d0a:	e004      	b.n	8002d16 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	4a0c      	ldr	r2, [pc, #48]	; (8002d40 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002d10:	fb02 f303 	mul.w	r3, r2, r3
 8002d14:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	613b      	str	r3, [r7, #16]
      break;
 8002d1a:	e002      	b.n	8002d22 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d1c:	4b05      	ldr	r3, [pc, #20]	; (8002d34 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d1e:	613b      	str	r3, [r7, #16]
      break;
 8002d20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d22:	693b      	ldr	r3, [r7, #16]
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	371c      	adds	r7, #28
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bc80      	pop	{r7}
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	40021000 	.word	0x40021000
 8002d34:	007a1200 	.word	0x007a1200
 8002d38:	080035b8 	.word	0x080035b8
 8002d3c:	080035c8 	.word	0x080035c8
 8002d40:	003d0900 	.word	0x003d0900

08002d44 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b085      	sub	sp, #20
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002d4c:	4b0a      	ldr	r3, [pc, #40]	; (8002d78 <RCC_Delay+0x34>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a0a      	ldr	r2, [pc, #40]	; (8002d7c <RCC_Delay+0x38>)
 8002d52:	fba2 2303 	umull	r2, r3, r2, r3
 8002d56:	0a5b      	lsrs	r3, r3, #9
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	fb02 f303 	mul.w	r3, r2, r3
 8002d5e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002d60:	bf00      	nop
  }
  while (Delay --);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	1e5a      	subs	r2, r3, #1
 8002d66:	60fa      	str	r2, [r7, #12]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d1f9      	bne.n	8002d60 <RCC_Delay+0x1c>
}
 8002d6c:	bf00      	nop
 8002d6e:	bf00      	nop
 8002d70:	3714      	adds	r7, #20
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bc80      	pop	{r7}
 8002d76:	4770      	bx	lr
 8002d78:	2000000c 	.word	0x2000000c
 8002d7c:	10624dd3 	.word	0x10624dd3

08002d80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d101      	bne.n	8002d92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e041      	b.n	8002e16 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d106      	bne.n	8002dac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f7fe fffa 	bl	8001da0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2202      	movs	r2, #2
 8002db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	3304      	adds	r3, #4
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	4610      	mov	r0, r2
 8002dc0:	f000 fa56 	bl	8003270 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3708      	adds	r7, #8
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
	...

08002e20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b085      	sub	sp, #20
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d001      	beq.n	8002e38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e035      	b.n	8002ea4 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2202      	movs	r2, #2
 8002e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	68da      	ldr	r2, [r3, #12]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f042 0201 	orr.w	r2, r2, #1
 8002e4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a16      	ldr	r2, [pc, #88]	; (8002eb0 <HAL_TIM_Base_Start_IT+0x90>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d009      	beq.n	8002e6e <HAL_TIM_Base_Start_IT+0x4e>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e62:	d004      	beq.n	8002e6e <HAL_TIM_Base_Start_IT+0x4e>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a12      	ldr	r2, [pc, #72]	; (8002eb4 <HAL_TIM_Base_Start_IT+0x94>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d111      	bne.n	8002e92 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f003 0307 	and.w	r3, r3, #7
 8002e78:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2b06      	cmp	r3, #6
 8002e7e:	d010      	beq.n	8002ea2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f042 0201 	orr.w	r2, r2, #1
 8002e8e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e90:	e007      	b.n	8002ea2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f042 0201 	orr.w	r2, r2, #1
 8002ea0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ea2:	2300      	movs	r3, #0
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3714      	adds	r7, #20
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bc80      	pop	{r7}
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	40012c00 	.word	0x40012c00
 8002eb4:	40000400 	.word	0x40000400

08002eb8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	f003 0302 	and.w	r3, r3, #2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d020      	beq.n	8002f1c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f003 0302 	and.w	r3, r3, #2
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d01b      	beq.n	8002f1c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f06f 0202 	mvn.w	r2, #2
 8002eec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	699b      	ldr	r3, [r3, #24]
 8002efa:	f003 0303 	and.w	r3, r3, #3
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d003      	beq.n	8002f0a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f000 f998 	bl	8003238 <HAL_TIM_IC_CaptureCallback>
 8002f08:	e005      	b.n	8002f16 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f000 f98b 	bl	8003226 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f000 f99a 	bl	800324a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	f003 0304 	and.w	r3, r3, #4
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d020      	beq.n	8002f68 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	f003 0304 	and.w	r3, r3, #4
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d01b      	beq.n	8002f68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f06f 0204 	mvn.w	r2, #4
 8002f38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2202      	movs	r2, #2
 8002f3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	699b      	ldr	r3, [r3, #24]
 8002f46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d003      	beq.n	8002f56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f000 f972 	bl	8003238 <HAL_TIM_IC_CaptureCallback>
 8002f54:	e005      	b.n	8002f62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f000 f965 	bl	8003226 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f000 f974 	bl	800324a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	f003 0308 	and.w	r3, r3, #8
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d020      	beq.n	8002fb4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	f003 0308 	and.w	r3, r3, #8
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d01b      	beq.n	8002fb4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f06f 0208 	mvn.w	r2, #8
 8002f84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2204      	movs	r2, #4
 8002f8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	69db      	ldr	r3, [r3, #28]
 8002f92:	f003 0303 	and.w	r3, r3, #3
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d003      	beq.n	8002fa2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 f94c 	bl	8003238 <HAL_TIM_IC_CaptureCallback>
 8002fa0:	e005      	b.n	8002fae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 f93f 	bl	8003226 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f000 f94e 	bl	800324a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	f003 0310 	and.w	r3, r3, #16
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d020      	beq.n	8003000 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f003 0310 	and.w	r3, r3, #16
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d01b      	beq.n	8003000 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f06f 0210 	mvn.w	r2, #16
 8002fd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2208      	movs	r2, #8
 8002fd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	69db      	ldr	r3, [r3, #28]
 8002fde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d003      	beq.n	8002fee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f000 f926 	bl	8003238 <HAL_TIM_IC_CaptureCallback>
 8002fec:	e005      	b.n	8002ffa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 f919 	bl	8003226 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f000 f928 	bl	800324a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	f003 0301 	and.w	r3, r3, #1
 8003006:	2b00      	cmp	r3, #0
 8003008:	d00c      	beq.n	8003024 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	f003 0301 	and.w	r3, r3, #1
 8003010:	2b00      	cmp	r3, #0
 8003012:	d007      	beq.n	8003024 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f06f 0201 	mvn.w	r2, #1
 800301c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f7fe ff68 	bl	8001ef4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800302a:	2b00      	cmp	r3, #0
 800302c:	d00c      	beq.n	8003048 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003034:	2b00      	cmp	r3, #0
 8003036:	d007      	beq.n	8003048 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003040:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f000 fa6f 	bl	8003526 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800304e:	2b00      	cmp	r3, #0
 8003050:	d00c      	beq.n	800306c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003058:	2b00      	cmp	r3, #0
 800305a:	d007      	beq.n	800306c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 f8f8 	bl	800325c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	f003 0320 	and.w	r3, r3, #32
 8003072:	2b00      	cmp	r3, #0
 8003074:	d00c      	beq.n	8003090 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f003 0320 	and.w	r3, r3, #32
 800307c:	2b00      	cmp	r3, #0
 800307e:	d007      	beq.n	8003090 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f06f 0220 	mvn.w	r2, #32
 8003088:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f000 fa42 	bl	8003514 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003090:	bf00      	nop
 8003092:	3710      	adds	r7, #16
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030a2:	2300      	movs	r3, #0
 80030a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d101      	bne.n	80030b4 <HAL_TIM_ConfigClockSource+0x1c>
 80030b0:	2302      	movs	r3, #2
 80030b2:	e0b4      	b.n	800321e <HAL_TIM_ConfigClockSource+0x186>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2202      	movs	r2, #2
 80030c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80030d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	68ba      	ldr	r2, [r7, #8]
 80030e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030ec:	d03e      	beq.n	800316c <HAL_TIM_ConfigClockSource+0xd4>
 80030ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030f2:	f200 8087 	bhi.w	8003204 <HAL_TIM_ConfigClockSource+0x16c>
 80030f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030fa:	f000 8086 	beq.w	800320a <HAL_TIM_ConfigClockSource+0x172>
 80030fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003102:	d87f      	bhi.n	8003204 <HAL_TIM_ConfigClockSource+0x16c>
 8003104:	2b70      	cmp	r3, #112	; 0x70
 8003106:	d01a      	beq.n	800313e <HAL_TIM_ConfigClockSource+0xa6>
 8003108:	2b70      	cmp	r3, #112	; 0x70
 800310a:	d87b      	bhi.n	8003204 <HAL_TIM_ConfigClockSource+0x16c>
 800310c:	2b60      	cmp	r3, #96	; 0x60
 800310e:	d050      	beq.n	80031b2 <HAL_TIM_ConfigClockSource+0x11a>
 8003110:	2b60      	cmp	r3, #96	; 0x60
 8003112:	d877      	bhi.n	8003204 <HAL_TIM_ConfigClockSource+0x16c>
 8003114:	2b50      	cmp	r3, #80	; 0x50
 8003116:	d03c      	beq.n	8003192 <HAL_TIM_ConfigClockSource+0xfa>
 8003118:	2b50      	cmp	r3, #80	; 0x50
 800311a:	d873      	bhi.n	8003204 <HAL_TIM_ConfigClockSource+0x16c>
 800311c:	2b40      	cmp	r3, #64	; 0x40
 800311e:	d058      	beq.n	80031d2 <HAL_TIM_ConfigClockSource+0x13a>
 8003120:	2b40      	cmp	r3, #64	; 0x40
 8003122:	d86f      	bhi.n	8003204 <HAL_TIM_ConfigClockSource+0x16c>
 8003124:	2b30      	cmp	r3, #48	; 0x30
 8003126:	d064      	beq.n	80031f2 <HAL_TIM_ConfigClockSource+0x15a>
 8003128:	2b30      	cmp	r3, #48	; 0x30
 800312a:	d86b      	bhi.n	8003204 <HAL_TIM_ConfigClockSource+0x16c>
 800312c:	2b20      	cmp	r3, #32
 800312e:	d060      	beq.n	80031f2 <HAL_TIM_ConfigClockSource+0x15a>
 8003130:	2b20      	cmp	r3, #32
 8003132:	d867      	bhi.n	8003204 <HAL_TIM_ConfigClockSource+0x16c>
 8003134:	2b00      	cmp	r3, #0
 8003136:	d05c      	beq.n	80031f2 <HAL_TIM_ConfigClockSource+0x15a>
 8003138:	2b10      	cmp	r3, #16
 800313a:	d05a      	beq.n	80031f2 <HAL_TIM_ConfigClockSource+0x15a>
 800313c:	e062      	b.n	8003204 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6818      	ldr	r0, [r3, #0]
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	6899      	ldr	r1, [r3, #8]
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	685a      	ldr	r2, [r3, #4]
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	f000 f96a 	bl	8003426 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003160:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	68ba      	ldr	r2, [r7, #8]
 8003168:	609a      	str	r2, [r3, #8]
      break;
 800316a:	e04f      	b.n	800320c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6818      	ldr	r0, [r3, #0]
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	6899      	ldr	r1, [r3, #8]
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	685a      	ldr	r2, [r3, #4]
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	f000 f953 	bl	8003426 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	689a      	ldr	r2, [r3, #8]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800318e:	609a      	str	r2, [r3, #8]
      break;
 8003190:	e03c      	b.n	800320c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6818      	ldr	r0, [r3, #0]
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	6859      	ldr	r1, [r3, #4]
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	461a      	mov	r2, r3
 80031a0:	f000 f8ca 	bl	8003338 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2150      	movs	r1, #80	; 0x50
 80031aa:	4618      	mov	r0, r3
 80031ac:	f000 f921 	bl	80033f2 <TIM_ITRx_SetConfig>
      break;
 80031b0:	e02c      	b.n	800320c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6818      	ldr	r0, [r3, #0]
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	6859      	ldr	r1, [r3, #4]
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	461a      	mov	r2, r3
 80031c0:	f000 f8e8 	bl	8003394 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2160      	movs	r1, #96	; 0x60
 80031ca:	4618      	mov	r0, r3
 80031cc:	f000 f911 	bl	80033f2 <TIM_ITRx_SetConfig>
      break;
 80031d0:	e01c      	b.n	800320c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6818      	ldr	r0, [r3, #0]
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	6859      	ldr	r1, [r3, #4]
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	461a      	mov	r2, r3
 80031e0:	f000 f8aa 	bl	8003338 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2140      	movs	r1, #64	; 0x40
 80031ea:	4618      	mov	r0, r3
 80031ec:	f000 f901 	bl	80033f2 <TIM_ITRx_SetConfig>
      break;
 80031f0:	e00c      	b.n	800320c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4619      	mov	r1, r3
 80031fc:	4610      	mov	r0, r2
 80031fe:	f000 f8f8 	bl	80033f2 <TIM_ITRx_SetConfig>
      break;
 8003202:	e003      	b.n	800320c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	73fb      	strb	r3, [r7, #15]
      break;
 8003208:	e000      	b.n	800320c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800320a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800321c:	7bfb      	ldrb	r3, [r7, #15]
}
 800321e:	4618      	mov	r0, r3
 8003220:	3710      	adds	r7, #16
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}

08003226 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003226:	b480      	push	{r7}
 8003228:	b083      	sub	sp, #12
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800322e:	bf00      	nop
 8003230:	370c      	adds	r7, #12
 8003232:	46bd      	mov	sp, r7
 8003234:	bc80      	pop	{r7}
 8003236:	4770      	bx	lr

08003238 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003240:	bf00      	nop
 8003242:	370c      	adds	r7, #12
 8003244:	46bd      	mov	sp, r7
 8003246:	bc80      	pop	{r7}
 8003248:	4770      	bx	lr

0800324a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800324a:	b480      	push	{r7}
 800324c:	b083      	sub	sp, #12
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003252:	bf00      	nop
 8003254:	370c      	adds	r7, #12
 8003256:	46bd      	mov	sp, r7
 8003258:	bc80      	pop	{r7}
 800325a:	4770      	bx	lr

0800325c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003264:	bf00      	nop
 8003266:	370c      	adds	r7, #12
 8003268:	46bd      	mov	sp, r7
 800326a:	bc80      	pop	{r7}
 800326c:	4770      	bx	lr
	...

08003270 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003270:	b480      	push	{r7}
 8003272:	b085      	sub	sp, #20
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	4a2b      	ldr	r2, [pc, #172]	; (8003330 <TIM_Base_SetConfig+0xc0>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d007      	beq.n	8003298 <TIM_Base_SetConfig+0x28>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800328e:	d003      	beq.n	8003298 <TIM_Base_SetConfig+0x28>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	4a28      	ldr	r2, [pc, #160]	; (8003334 <TIM_Base_SetConfig+0xc4>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d108      	bne.n	80032aa <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800329e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	68fa      	ldr	r2, [r7, #12]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a20      	ldr	r2, [pc, #128]	; (8003330 <TIM_Base_SetConfig+0xc0>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d007      	beq.n	80032c2 <TIM_Base_SetConfig+0x52>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032b8:	d003      	beq.n	80032c2 <TIM_Base_SetConfig+0x52>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a1d      	ldr	r2, [pc, #116]	; (8003334 <TIM_Base_SetConfig+0xc4>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d108      	bne.n	80032d4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	68fa      	ldr	r2, [r7, #12]
 80032d0:	4313      	orrs	r3, r2
 80032d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	695b      	ldr	r3, [r3, #20]
 80032de:	4313      	orrs	r3, r2
 80032e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	68fa      	ldr	r2, [r7, #12]
 80032e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	689a      	ldr	r2, [r3, #8]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	4a0d      	ldr	r2, [pc, #52]	; (8003330 <TIM_Base_SetConfig+0xc0>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d103      	bne.n	8003308 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	691a      	ldr	r2, [r3, #16]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2201      	movs	r2, #1
 800330c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	f003 0301 	and.w	r3, r3, #1
 8003316:	2b00      	cmp	r3, #0
 8003318:	d005      	beq.n	8003326 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	f023 0201 	bic.w	r2, r3, #1
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	611a      	str	r2, [r3, #16]
  }
}
 8003326:	bf00      	nop
 8003328:	3714      	adds	r7, #20
 800332a:	46bd      	mov	sp, r7
 800332c:	bc80      	pop	{r7}
 800332e:	4770      	bx	lr
 8003330:	40012c00 	.word	0x40012c00
 8003334:	40000400 	.word	0x40000400

08003338 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003338:	b480      	push	{r7}
 800333a:	b087      	sub	sp, #28
 800333c:	af00      	add	r7, sp, #0
 800333e:	60f8      	str	r0, [r7, #12]
 8003340:	60b9      	str	r1, [r7, #8]
 8003342:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6a1b      	ldr	r3, [r3, #32]
 8003348:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6a1b      	ldr	r3, [r3, #32]
 800334e:	f023 0201 	bic.w	r2, r3, #1
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	699b      	ldr	r3, [r3, #24]
 800335a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003362:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	011b      	lsls	r3, r3, #4
 8003368:	693a      	ldr	r2, [r7, #16]
 800336a:	4313      	orrs	r3, r2
 800336c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	f023 030a 	bic.w	r3, r3, #10
 8003374:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003376:	697a      	ldr	r2, [r7, #20]
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	4313      	orrs	r3, r2
 800337c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	693a      	ldr	r2, [r7, #16]
 8003382:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	697a      	ldr	r2, [r7, #20]
 8003388:	621a      	str	r2, [r3, #32]
}
 800338a:	bf00      	nop
 800338c:	371c      	adds	r7, #28
 800338e:	46bd      	mov	sp, r7
 8003390:	bc80      	pop	{r7}
 8003392:	4770      	bx	lr

08003394 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003394:	b480      	push	{r7}
 8003396:	b087      	sub	sp, #28
 8003398:	af00      	add	r7, sp, #0
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	60b9      	str	r1, [r7, #8]
 800339e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6a1b      	ldr	r3, [r3, #32]
 80033a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6a1b      	ldr	r3, [r3, #32]
 80033aa:	f023 0210 	bic.w	r2, r3, #16
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	699b      	ldr	r3, [r3, #24]
 80033b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80033be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	031b      	lsls	r3, r3, #12
 80033c4:	693a      	ldr	r2, [r7, #16]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80033d0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	011b      	lsls	r3, r3, #4
 80033d6:	697a      	ldr	r2, [r7, #20]
 80033d8:	4313      	orrs	r3, r2
 80033da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	693a      	ldr	r2, [r7, #16]
 80033e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	697a      	ldr	r2, [r7, #20]
 80033e6:	621a      	str	r2, [r3, #32]
}
 80033e8:	bf00      	nop
 80033ea:	371c      	adds	r7, #28
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bc80      	pop	{r7}
 80033f0:	4770      	bx	lr

080033f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80033f2:	b480      	push	{r7}
 80033f4:	b085      	sub	sp, #20
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
 80033fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003408:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800340a:	683a      	ldr	r2, [r7, #0]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	4313      	orrs	r3, r2
 8003410:	f043 0307 	orr.w	r3, r3, #7
 8003414:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	68fa      	ldr	r2, [r7, #12]
 800341a:	609a      	str	r2, [r3, #8]
}
 800341c:	bf00      	nop
 800341e:	3714      	adds	r7, #20
 8003420:	46bd      	mov	sp, r7
 8003422:	bc80      	pop	{r7}
 8003424:	4770      	bx	lr

08003426 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003426:	b480      	push	{r7}
 8003428:	b087      	sub	sp, #28
 800342a:	af00      	add	r7, sp, #0
 800342c:	60f8      	str	r0, [r7, #12]
 800342e:	60b9      	str	r1, [r7, #8]
 8003430:	607a      	str	r2, [r7, #4]
 8003432:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003440:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	021a      	lsls	r2, r3, #8
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	431a      	orrs	r2, r3
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	4313      	orrs	r3, r2
 800344e:	697a      	ldr	r2, [r7, #20]
 8003450:	4313      	orrs	r3, r2
 8003452:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	697a      	ldr	r2, [r7, #20]
 8003458:	609a      	str	r2, [r3, #8]
}
 800345a:	bf00      	nop
 800345c:	371c      	adds	r7, #28
 800345e:	46bd      	mov	sp, r7
 8003460:	bc80      	pop	{r7}
 8003462:	4770      	bx	lr

08003464 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003464:	b480      	push	{r7}
 8003466:	b085      	sub	sp, #20
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003474:	2b01      	cmp	r3, #1
 8003476:	d101      	bne.n	800347c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003478:	2302      	movs	r3, #2
 800347a:	e041      	b.n	8003500 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2202      	movs	r2, #2
 8003488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	68fa      	ldr	r2, [r7, #12]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	68fa      	ldr	r2, [r7, #12]
 80034b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a14      	ldr	r2, [pc, #80]	; (800350c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d009      	beq.n	80034d4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034c8:	d004      	beq.n	80034d4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a10      	ldr	r2, [pc, #64]	; (8003510 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d10c      	bne.n	80034ee <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034da:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	68ba      	ldr	r2, [r7, #8]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	68ba      	ldr	r2, [r7, #8]
 80034ec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2201      	movs	r2, #1
 80034f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034fe:	2300      	movs	r3, #0
}
 8003500:	4618      	mov	r0, r3
 8003502:	3714      	adds	r7, #20
 8003504:	46bd      	mov	sp, r7
 8003506:	bc80      	pop	{r7}
 8003508:	4770      	bx	lr
 800350a:	bf00      	nop
 800350c:	40012c00 	.word	0x40012c00
 8003510:	40000400 	.word	0x40000400

08003514 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800351c:	bf00      	nop
 800351e:	370c      	adds	r7, #12
 8003520:	46bd      	mov	sp, r7
 8003522:	bc80      	pop	{r7}
 8003524:	4770      	bx	lr

08003526 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003526:	b480      	push	{r7}
 8003528:	b083      	sub	sp, #12
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800352e:	bf00      	nop
 8003530:	370c      	adds	r7, #12
 8003532:	46bd      	mov	sp, r7
 8003534:	bc80      	pop	{r7}
 8003536:	4770      	bx	lr

08003538 <__libc_init_array>:
 8003538:	b570      	push	{r4, r5, r6, lr}
 800353a:	2600      	movs	r6, #0
 800353c:	4d0c      	ldr	r5, [pc, #48]	; (8003570 <__libc_init_array+0x38>)
 800353e:	4c0d      	ldr	r4, [pc, #52]	; (8003574 <__libc_init_array+0x3c>)
 8003540:	1b64      	subs	r4, r4, r5
 8003542:	10a4      	asrs	r4, r4, #2
 8003544:	42a6      	cmp	r6, r4
 8003546:	d109      	bne.n	800355c <__libc_init_array+0x24>
 8003548:	f000 f822 	bl	8003590 <_init>
 800354c:	2600      	movs	r6, #0
 800354e:	4d0a      	ldr	r5, [pc, #40]	; (8003578 <__libc_init_array+0x40>)
 8003550:	4c0a      	ldr	r4, [pc, #40]	; (800357c <__libc_init_array+0x44>)
 8003552:	1b64      	subs	r4, r4, r5
 8003554:	10a4      	asrs	r4, r4, #2
 8003556:	42a6      	cmp	r6, r4
 8003558:	d105      	bne.n	8003566 <__libc_init_array+0x2e>
 800355a:	bd70      	pop	{r4, r5, r6, pc}
 800355c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003560:	4798      	blx	r3
 8003562:	3601      	adds	r6, #1
 8003564:	e7ee      	b.n	8003544 <__libc_init_array+0xc>
 8003566:	f855 3b04 	ldr.w	r3, [r5], #4
 800356a:	4798      	blx	r3
 800356c:	3601      	adds	r6, #1
 800356e:	e7f2      	b.n	8003556 <__libc_init_array+0x1e>
 8003570:	080035cc 	.word	0x080035cc
 8003574:	080035cc 	.word	0x080035cc
 8003578:	080035cc 	.word	0x080035cc
 800357c:	080035d0 	.word	0x080035d0

08003580 <memset>:
 8003580:	4603      	mov	r3, r0
 8003582:	4402      	add	r2, r0
 8003584:	4293      	cmp	r3, r2
 8003586:	d100      	bne.n	800358a <memset+0xa>
 8003588:	4770      	bx	lr
 800358a:	f803 1b01 	strb.w	r1, [r3], #1
 800358e:	e7f9      	b.n	8003584 <memset+0x4>

08003590 <_init>:
 8003590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003592:	bf00      	nop
 8003594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003596:	bc08      	pop	{r3}
 8003598:	469e      	mov	lr, r3
 800359a:	4770      	bx	lr

0800359c <_fini>:
 800359c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800359e:	bf00      	nop
 80035a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035a2:	bc08      	pop	{r3}
 80035a4:	469e      	mov	lr, r3
 80035a6:	4770      	bx	lr
